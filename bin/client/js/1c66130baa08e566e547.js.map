{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/error/DimensionError.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/error/index.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/error/ArgumentsError.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/error/IndexError.js"],"names":["DimensionError","actual","expected","relation","this","SyntaxError","message","Array","isArray","join","stack","Error","prototype","RangeError","constructor","name","isDimensionError","module","exports","ArgumentsError","__webpack_require__","IndexError","path","factory","fn","count","min","max","isArgumentsError","index","arguments","length","undefined","isIndexError"],"mappings":"2FAWA,SAAAA,EAAAC,EAAAC,EAAAC,GACA,KAAAC,gBAAAJ,GACA,UAAAK,YAAA,oDAGAD,KAAAH,SACAG,KAAAF,WACAE,KAAAD,WACAC,KAAAE,QAAA,wBAAAC,MAAAC,QAAAP,GAAA,IAAAA,EAAAQ,KAAA,UAAAR,GAAA,KAAAG,KAAAD,UAAA,WAAAI,MAAAC,QAAAN,GAAA,IAAAA,EAAAO,KAAA,UAAAP,GAAA,IACAE,KAAAM,OAAA,IAAAC,OAAAD,MAGAV,EAAAY,UAAA,IAAAC,WACAb,EAAAY,UAAAE,YAAAD,WACAb,EAAAY,UAAAG,KAAA,iBACAf,EAAAY,UAAAI,kBAAA,EACAC,EAAAC,QAAAlB,oCCzBA,IAAAmB,EAAqBC,EAAQ,IAE7BpB,EAAqBoB,EAAQ,IAE7BC,EAAiBD,EAAQ,IAEzBH,EAAAC,QAAA,EACAH,KAAA,iBACAO,KAAA,QACAC,QAAA,WACA,OAAAJ,IAEC,CACDJ,KAAA,iBACAO,KAAA,QACAC,QAAA,WACA,OAAAvB,IAEC,CACDe,KAAA,aACAO,KAAA,QACAC,QAAA,WACA,OAAAF,sCCbA,SAAAF,EAAAK,EAAAC,EAAAC,EAAAC,GACA,KAAAvB,gBAAAe,GACA,UAAAd,YAAA,oDAGAD,KAAAoB,KACApB,KAAAqB,QACArB,KAAAsB,MACAtB,KAAAuB,MACAvB,KAAAE,QAAA,yCAAAkB,EAAA,KAAAC,EAAA,cAAAC,GAAAC,QAAA,IAAAA,EAAA,iBACAvB,KAAAM,OAAA,IAAAC,OAAAD,MAGAS,EAAAP,UAAA,IAAAD,MACAQ,EAAAP,UAAAE,YAAAH,MACAQ,EAAAP,UAAAG,KAAA,iBACAI,EAAAP,UAAAgB,kBAAA,EACAX,EAAAC,QAAAC,mCChBA,SAAAE,EAAAQ,EAAAH,EAAAC,GACA,KAAAvB,gBAAAiB,GACA,UAAAhB,YAAA,oDAGAD,KAAAyB,QAEAC,UAAAC,OAAA,GACA3B,KAAAsB,IAAA,EACAtB,KAAAuB,IAAAD,IAEAtB,KAAAsB,MACAtB,KAAAuB,YAGAK,IAAA5B,KAAAsB,KAAAtB,KAAAyB,MAAAzB,KAAAsB,IACAtB,KAAAE,QAAA,uBAAAF,KAAAyB,MAAA,MAAAzB,KAAAsB,IAAA,SACGM,IAAA5B,KAAAuB,KAAAvB,KAAAyB,OAAAzB,KAAAuB,IACHvB,KAAAE,QAAA,uBAAAF,KAAAyB,MAAA,OAAAzB,KAAAuB,IAAA,OAEAvB,KAAAE,QAAA,uBAAAF,KAAAyB,MAAA,IAGAzB,KAAAM,OAAA,IAAAC,OAAAD,MAGAW,EAAAT,UAAA,IAAAC,WACAQ,EAAAT,UAAAE,YAAAD,WACAQ,EAAAT,UAAAG,KAAA,aACAM,EAAAT,UAAAqB,cAAA,EACAhB,EAAAC,QAAAG","file":"js/1c66130baa08e566e547.js","sourcesContent":["'use strict';\n/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\n\nfunction DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\n\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;\nmodule.exports = DimensionError;","'use strict';\n\nvar ArgumentsError = require('./ArgumentsError');\n\nvar DimensionError = require('./DimensionError');\n\nvar IndexError = require('./IndexError');\n\nmodule.exports = [{\n  name: 'ArgumentsError',\n  path: 'error',\n  factory: function factory() {\n    return ArgumentsError;\n  }\n}, {\n  name: 'DimensionError',\n  path: 'error',\n  factory: function factory() {\n    return DimensionError;\n  }\n}, {\n  name: 'IndexError',\n  path: 'error',\n  factory: function factory() {\n    return IndexError;\n  }\n}]; // TODO: implement an InvalidValueError?","'use strict';\n/**\n * Create a syntax error with the message:\n *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'\n * @param {string} fn     Function name\n * @param {number} count  Actual argument count\n * @param {number} min    Minimum required argument count\n * @param {number} [max]  Maximum required argument count\n * @extends Error\n */\n\nfunction ArgumentsError(fn, count, min, max) {\n  if (!(this instanceof ArgumentsError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.fn = fn;\n  this.count = count;\n  this.min = min;\n  this.max = max;\n  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';\n  this.stack = new Error().stack;\n}\n\nArgumentsError.prototype = new Error();\nArgumentsError.prototype.constructor = Error;\nArgumentsError.prototype.name = 'ArgumentsError';\nArgumentsError.prototype.isArgumentsError = true;\nmodule.exports = ArgumentsError;","'use strict';\n/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\n\nfunction IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  this.index = index;\n\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n\n  this.stack = new Error().stack;\n}\n\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;\nmodule.exports = IndexError;"],"sourceRoot":""}