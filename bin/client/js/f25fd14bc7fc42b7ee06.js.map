{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/utils/bignumber/leftShift.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/utils/bignumber/rightArithShift.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/utils/bignumber/nearlyEqual.js"],"names":["module","exports","x","y","isFinite","isInteger","Error","BigNumber","constructor","isNaN","isNegative","isZero","NaN","lt","times","Math","pow","toNumber","div","floor","epsilon","eq","diff","minus","abs","max","lte"],"mappings":"4FAoBAA,EAAAC,QAAA,SAAAC,EAAAC,GACA,GAAAD,EAAAE,aAAAF,EAAAG,aAAAF,EAAAC,aAAAD,EAAAE,YACA,UAAAC,MAAA,2CAGA,IAAAC,EAAAL,EAAAM,YAEA,OAAAN,EAAAO,SAAAN,EAAAM,SAAAN,EAAAO,eAAAP,EAAAQ,SACA,IAAAJ,EAAAK,KAGAV,EAAAS,UAAAR,EAAAQ,SACAT,EAGAA,EAAAE,YAAAD,EAAAC,WAKAD,EAAAU,GAAA,IACAX,EAAAY,MAAAC,KAAAC,IAAA,EAAAb,EAAAc,YAAA,IAGAf,EAAAY,MAAA,IAAAP,EAAA,GAAAS,IAAAb,IARA,IAAAI,EAAAK,wCCfAZ,EAAAC,QAAA,SAAAC,EAAAC,GACA,GAAAD,EAAAE,aAAAF,EAAAG,aAAAF,EAAAC,aAAAD,EAAAE,YACA,UAAAC,MAAA,iDAGA,IAAAC,EAAAL,EAAAM,YAEA,OAAAN,EAAAO,SAAAN,EAAAM,SAAAN,EAAAO,eAAAP,EAAAQ,SACA,IAAAJ,EAAAK,KAGAV,EAAAS,UAAAR,EAAAQ,SACAT,EAGAC,EAAAC,WAaAD,EAAAU,GAAA,IACAX,EAAAgB,IAAAH,KAAAC,IAAA,EAAAb,EAAAc,YAAA,IAAAE,QAGAjB,EAAAgB,IAAA,IAAAX,EAAA,GAAAS,IAAAb,IAAAgB,QAhBAjB,EAAAQ,aACA,IAAAH,GAAA,GAGAL,EAAAE,WAIA,IAAAG,EAAA,GAHA,IAAAA,EAAAK,uCC/BAZ,EAAAC,QAAA,SAAAC,EAAAC,EAAAiB,GAEA,GAAAA,QACA,OAAAlB,EAAAmB,GAAAlB,GAIA,GAAAD,EAAAmB,GAAAlB,GACA,SAIA,GAAAD,EAAAO,SAAAN,EAAAM,QACA,SAIA,GAAAP,EAAAE,YAAAD,EAAAC,WAAA,CAEA,IAAAkB,EAAApB,EAAAqB,MAAApB,GAAAqB,MAEA,GAAAF,EAAAX,SACA,SAGA,IAAAc,EAAAvB,EAAAM,YAAAiB,IAAAvB,EAAAsB,MAAArB,EAAAqB,OACA,OAAAF,EAAAI,IAAAD,EAAAX,MAAAM,IAKA","file":"js/f25fd14bc7fc42b7ee06.js","sourcesContent":["'use strict';\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\nmodule.exports = function leftShift(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n\n  return x.times(new BigNumber(2).pow(y));\n};","'use strict';\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\nmodule.exports = function rightArithShift(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n\n  return x.div(new BigNumber(2).pow(y)).floor();\n};","'use strict';\n/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\n\nmodule.exports = function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n};"],"sourceRoot":""}