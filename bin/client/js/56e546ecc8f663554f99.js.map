{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/algebra/sparse/csAmd.js"],"names":["exports","name","path","factory","type","config","load","csFlip","__webpack_require__","csFkeep","csTdfs","add","multiply","transpose","_wclear","mark","lemax","W","w","n","k","_diag","i","j","order","a","asize","_size","m","dense","Math","max","sqrt","cm","at","tindex","_index","tptr","_ptr","p2","p","p1","_createTargetMatrix","min","k1","k2","e","pj","ln","nvi","pk","eln","pn","h","d","cindex","cptr","cnz","P","nv","next","head","elen","degree","hhead","last","len","_initializeQuotientGraph","nel","_initializeDegreeLists","mindeg","elenk","nvk","dk","pk1","pk2","wnvi","dext","p3","p4","nvj","jlast","ok","splice","length"],"mappings":"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","file":"js/56e546ecc8f663554f99.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load) {\n  var csFlip = load(require('./csFlip'));\n  var csFkeep = load(require('./csFkeep'));\n  var csTdfs = load(require('./csTdfs'));\n  var add = load(require('../../arithmetic/add'));\n  var multiply = load(require('../../arithmetic/multiply'));\n  var transpose = load(require('../../matrix/transpose'));\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n\n  var csAmd = function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    } // a matrix arrays\n\n\n    var asize = a._size; // rows and columns\n\n    var m = asize[0];\n    var n = asize[1]; // initialize vars\n\n    var lemax = 0; // dense threshold\n\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense); // create target matrix C\n\n    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries\n\n\n    csFkeep(cm, _diag, null); // C matrix arrays\n\n    var cindex = cm._index;\n    var cptr = cm._ptr; // number of nonzero elements in C\n\n    var cnz = cptr[n]; // allocate result (n+1)\n\n    var P = []; // create workspace (8 * (n + 1))\n\n    var W = [];\n    var len = 0; // first n + 1 entries\n\n    var nv = n + 1; // next n + 1 entries\n\n    var next = 2 * (n + 1); // next n + 1 entries\n\n    var head = 3 * (n + 1); // next n + 1 entries\n\n    var elen = 4 * (n + 1); // next n + 1 entries\n\n    var degree = 5 * (n + 1); // next n + 1 entries\n\n    var w = 6 * (n + 1); // next n + 1 entries\n\n    var hhead = 7 * (n + 1); // last n + 1 entries\n    // use P as workspace for last\n\n    var last = P; // initialize quotient graph\n\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists\n\n\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node\n\n\n    var mindeg = 0; // vars\n\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do\n\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {\n        ;\n      }\n\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      } // remove k from degree list\n\n\n      W[head + mindeg] = W[next + k]; // elenk = |Ek|\n\n      var elenk = W[elen + k]; // # of nodes k represents\n\n      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated\n\n      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n\n      var dk = 0; // flag k as in Lk\n\n      W[nv + k] = -nvk;\n      var p = cptr[k]; // do in place if W[elen + k] === 0\n\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k; // list of nodes starts at cindex[pj]\n\n          pj = p; // length of list of nodes in k\n\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e]; // length of list of nodes in e\n\n          ln = W[len + e];\n        }\n\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++]; // check  node i dead, or seen\n\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          } // W[degree + Lk] += size of node i\n\n\n          dk += nvi; // negate W[nv + i] to denote i in Lk\n\n          W[nv + i] = -nvi; // place i in Lk\n\n          cindex[pk2++] = i;\n\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          } // check we need to remove i from degree list\n\n\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = csFlip(k); // e is now a dead element\n\n          W[w + e] = 0;\n        }\n      } // cindex[cnz...nzmax] is free\n\n\n      if (elenk !== 0) {\n        cnz = pk2;\n      } // external degree of k - |Lk\\i|\n\n\n      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]\n\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1; // k is now an element\n\n      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n      // clear w if necessary\n\n      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\\Lk|\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check if W[elen + i] empty, skip it\n\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        } // W[nv + i] was negated\n\n\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi; // scan Ei\n\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      } // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n      // scan2: degree update\n\n\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1; // scan Ei\n\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p]; // check e is an unabsorbed element\n\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext; // keep e in Ei\n\n              cindex[pn++] = e; // compute the hash of node i\n\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = csFlip(k); // e is a dead element\n\n              W[w + e] = 0;\n            }\n          }\n        } // W[elen + i] = |Ei|\n\n\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i]; // prune edges in Ai\n\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p]; // check node j dead or in Lk\n\n          var nvj = W[nv + j];\n\n          if (nvj <= 0) {\n            continue;\n          } // degree(i) += |j|\n\n\n          d += nvj; // place j in node list of i\n\n          cindex[pn++] = j; // compute hash for node i\n\n          h += j;\n        } // check for mass elimination\n\n\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = csFlip(k);\n          nvi = -W[nv + i]; // |Lk| -= |i|\n\n          dk -= nvi; // |k| += W[nv + i]\n\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0; // node i is dead\n\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d); // move first node to end\n\n          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei\n\n          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei\n\n          cindex[p1] = k; // new len of adj. list of node i\n\n          W[len + i] = pn - p1 + 1; // finalize hash of i\n\n          h = (h < 0 ? -h : h) % n; // place i in hash bucket\n\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i; // save hash of i in last[i]\n\n          last[i] = h;\n        }\n      } // finalize |Lk|\n\n\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk); // clear w\n\n      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check i is dead, skip it\n\n        if (W[nv + i] >= 0) {\n          continue;\n        } // scan hash bucket of node i\n\n\n        h = last[i];\n        i = W[hhead + h]; // hash bucket will be empty\n\n        W[hhead + h] = -1;\n\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n\n          var jlast = i; // compare i with all j\n\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            } // check i and j are identical\n\n\n            if (ok) {\n              // absorb j into i\n              cptr[j] = csFlip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0; // node j is dead\n\n              W[elen + j] = -1; // delete j from hash bucket\n\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n\n\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check  i is dead, skip it\n\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        } // restore W[nv + i]\n\n\n        W[nv + i] = nvi; // compute external degree(i)\n\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        } // put i back in degree list\n\n\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i; // find new minimum degree\n\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d; // place i in Lk\n\n        cindex[p++] = i;\n      } // # nodes absorbed into k\n\n\n      W[nv + k] = nvk; // length of adj list of element k\n\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1; // k is now a dead element\n\n        W[w + k] = 0;\n      }\n\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n    // fix assembly tree\n\n\n    for (i = 0; i < n; i++) {\n      cptr[i] = csFlip(cptr[i]);\n    }\n\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    } // place unordered nodes in lists\n\n\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      } // place j in list of its parent\n\n\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    } // place elements in lists\n\n\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    } // postorder the assembly tree\n\n\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = csTdfs(i, k, W, head, next, P, w);\n      }\n    } // remove last item in array\n\n\n    P.splice(P.length - 1, 1); // return P\n\n    return P;\n  };\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n\n\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a); // check order = 1, matrix must be square\n\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    } // check order = 2, drop dense columns from M'\n\n\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr; // new column index\n\n      var p2 = 0; // loop A' columns (rows)\n\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j]; // new column j starts here\n\n        tptr[j] = p2; // skip dense col j\n\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        } // map rows in column j of A\n\n\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      } // finalize AT\n\n\n      tptr[m] = p2; // recreate A from new transpose matrix\n\n      a = transpose(at); // use A' * A\n\n      return multiply(at, a);\n    } // use A' * A, square or rectangular matrix\n\n\n    return multiply(at, a);\n  }\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n\n\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n\n    W[len + n] = 0; // initialize workspace\n\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1; // hash list i is empty\n\n      W[hhead + i] = -1; // node i is just one node\n\n      W[nv + i] = 1; // node i is alive\n\n      W[w + i] = 1; // Ek of node i is empty\n\n      W[elen + i] = 0; // degree of node i\n\n      W[degree + i] = W[len + i];\n    } // clear w\n\n\n    var mark = _wclear(0, 0, W, w, n); // n is a dead element\n\n\n    W[elen + n] = -2; // n is a root of assembly tree\n\n    cptr[n] = -1; // n is a dead element\n\n    W[w + n] = 0; // return mark\n\n    return mark;\n  }\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n\n\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0; // loop columns\n\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i]; // check node i is empty\n\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++; // i is a root of assembly tree\n\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0; // node i is dead\n\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = csFlip(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n\n        if (h !== -1) {\n          last[h] = i;\n        } // put node i in degree list d\n\n\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n\n    return nel;\n  }\n\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n\n      mark = 2;\n    } // at this point, W [0..n-1] < mark holds\n\n\n    return mark;\n  }\n\n  function _diag(i, j) {\n    return i !== j;\n  }\n\n  return csAmd;\n}\n\nexports.name = 'csAmd';\nexports.path = 'algebra.sparse';\nexports.factory = factory;"],"sourceRoot":""}