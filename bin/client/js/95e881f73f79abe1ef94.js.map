{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/index.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/hypot.js"],"names":["module","exports","__webpack_require__","flatten","name","factory","type","config","load","typed","abs","add","divide","multiply","sqrt","smaller","isPositive","hypot","... number | BigNumber","args","result","largest","i","length","value","Array","x","apply","Matrix","toArray","toTex"],"mappings":"2FAEAA,EAAAC,QAAA,CAAkBC,EAAQ,IAAUA,EAAQ,IAAUA,EAAQ,IAAgBA,EAAQ,KAAWA,EAAQ,KAAWA,EAAQ,KAAWA,EAAQ,IAAaA,EAAQ,KAAgBA,EAAQ,KAAkBA,EAAQ,KAAaA,EAAQ,KAAUA,EAAQ,KAAYA,EAAQ,KAAUA,EAAQ,KAAYA,EAAQ,KAAUA,EAAQ,KAAYA,EAAQ,KAAUA,EAAQ,IAAUA,EAAQ,KAAYA,EAAQ,KAAYA,EAAQ,KAAWA,EAAQ,KAAUA,EAAQ,IAAeA,EAAQ,KAAWA,EAAQ,KAAcA,EAAQ,KAAeA,EAAQ,IAAUA,EAAQ,KAAYA,EAAQ,KAAWA,EAAQ,IAAWA,EAAQ,KAAaA,EAAQ,IAAeA,EAAQ,IAAiBA,EAAQ,KAAgBA,EAAQ,wCCA9sB,IAAAC,EAAcD,EAAQ,GAAmBC,QAgFzCF,EAAAG,KAAA,QACAH,EAAAI,QA/EA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAiBN,EAAQ,KACzBS,EAAAH,EAAiBN,EAAQ,KACzBU,EAAAJ,EAAoBN,EAAQ,KAC5BW,EAAAL,EAAsBN,EAAQ,KAC9BY,EAAAN,EAAkBN,EAAQ,KAC1Ba,EAAAP,EAAqBN,EAAQ,KAC7Bc,EAAAR,EAAwBN,EAAQ,KA8BhCe,EAAAR,EAAA,SACAS,yBAeA,SAAAC,GAMA,IAHA,IAAAC,EAAA,EACAC,EAAA,EAEAC,EAAA,EAAmBA,EAAAH,EAAAI,OAAiBD,IAAA,CACpC,IAAAE,EAAAd,EAAAS,EAAAG,IAEAP,EAAAM,EAAAG,IACAJ,EAAAP,EAAAO,EAAAP,EAAAD,EAAAS,EAAAG,GAAAZ,EAAAS,EAAAG,KACAJ,EAAAT,EAAAS,EAAA,GACAC,EAAAG,GAEAJ,EAAAT,EAAAS,EAAAJ,EAAAQ,GAAAX,EAAAD,EAAAY,EAAAH,GAAAT,EAAAY,EAAAH,IAAAG,GAIA,OAAAX,EAAAQ,EAAAP,EAAAM,KAhCAK,MAAA,SAAAC,GACA,OAAAT,EAAAU,MAAAV,EAAAd,EAAAuB,KAEAE,OAAA,SAAAF,GACA,OAAAT,EAAAU,MAAAV,EAAAd,EAAAuB,EAAAG,eAgCA,OADAZ,EAAAa,MAAA,gCACAb","file":"js/95e881f73f79abe1ef94.js","sourcesContent":["'use strict';\n\nmodule.exports = [require('./abs'), require('./add'), require('./addScalar'), require('./cbrt'), require('./ceil'), require('./cube'), require('./divide'), require('./dotDivide'), require('./dotMultiply'), require('./dotPow'), require('./exp'), require('./expm1'), require('./fix'), require('./floor'), require('./gcd'), require('./hypot'), require('./lcm'), require('./log'), require('./log10'), require('./log1p'), require('./log2'), require('./mod'), require('./multiply'), require('./norm'), require('./nthRoot'), require('./nthRoots'), require('./pow'), require('./round'), require('./sign'), require('./sqrt'), require('./square'), require('./subtract'), require('./unaryMinus'), require('./unaryPlus'), require('./xgcd')];","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory(type, config, load, typed) {\n  var abs = load(require('./abs'));\n  var add = load(require('./addScalar'));\n  var divide = load(require('./divideScalar'));\n  var multiply = load(require('./multiplyScalar'));\n  var sqrt = load(require('./sqrt'));\n  var smaller = load(require('../relational/smaller'));\n  var isPositive = load(require('../utils/isPositive'));\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4)      // 5\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\n   *     math.hypot(-2)        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\n   *                                                          Matrix and Array input is flattened and returns a\n   *                                                          single number for the whole matrix.\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n\n  var hypot = typed('hypot', {\n    '... number | BigNumber': _hypot,\n    'Array': function Array(x) {\n      return hypot.apply(hypot, flatten(x));\n    },\n    'Matrix': function Matrix(x) {\n      return hypot.apply(hypot, flatten(x.toArray()));\n    }\n  });\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n\n    for (var i = 0; i < args.length; i++) {\n      var value = abs(args[i]);\n\n      if (smaller(largest, value)) {\n        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));\n        result = add(result, 1);\n        largest = value;\n      } else {\n        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);\n      }\n    }\n\n    return multiply(largest, sqrt(result));\n  }\n\n  hypot.toTex = \"\\\\hypot\\\\left(${args}\\\\right)\";\n  return hypot;\n}\n\nexports.name = 'hypot';\nexports.factory = factory;"],"sourceRoot":""}