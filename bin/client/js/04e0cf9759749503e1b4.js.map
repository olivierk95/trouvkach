{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/multiplyScalar.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/norm.js"],"names":["exports","factory","type","config","load","typed","multiplyScalar","number, number","x","y","Complex, Complex","mul","BigNumber, BigNumber","times","Fraction, Fraction","number | Fraction | BigNumber | Complex, Unit","res","clone","value","_normalize","Unit, number | Fraction | BigNumber | Complex","Unit, Unit","multiply","name","abs","__webpack_require__","add","pow","conj","sqrt","equalScalar","larger","smaller","matrix","norm","number","Math","Complex","BigNumber","boolean","Array","_norm","Matrix","number | Complex | BigNumber | boolean, number | BigNumber | string","Array, number | BigNumber | string","p","Matrix, number | BigNumber | string","sizeX","size","length","Number","POSITIVE_INFINITY","pinf","forEach","v","ninf","NEGATIVE_INFINITY","isNaN","n","Error","c","maxc","index","j","cj","r","maxr","i","ri","fro","toTex","1","2","undefined"],"mappings":"0FA8CAA,EAAAC,QA5CA,SAAAC,EAAAC,EAAAC,EAAAC,GAcA,IAAAC,EAAAD,EAAA,kBACAE,iBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAC,GAEAC,mBAAA,SAAAF,EAAAC,GACA,OAAAD,EAAAG,IAAAF,IAEAG,uBAAA,SAAAJ,EAAAC,GACA,OAAAD,EAAAK,MAAAJ,IAEAK,qBAAA,SAAAN,EAAAC,GACA,OAAAD,EAAAG,IAAAF,IAEAM,gDAAA,SAAAP,EAAAC,GACA,IAAAO,EAAAP,EAAAQ,QAEA,OADAD,EAAAE,MAAA,OAAAF,EAAAE,MAAAF,EAAAG,WAAAX,GAAAF,EAAAU,EAAAE,MAAAV,GACAQ,GAEAI,gDAAA,SAAAZ,EAAAC,GACA,IAAAO,EAAAR,EAAAS,QAEA,OADAD,EAAAE,MAAA,OAAAF,EAAAE,MAAAF,EAAAG,WAAAV,GAAAH,EAAAU,EAAAE,MAAAT,GACAO,GAEAK,aAAA,SAAAb,EAAAC,GACA,OAAAD,EAAAc,SAAAb,MAGA,OAAAH,qCC4KAN,EAAAuB,KAAA,OACAvB,EAAAC,QAtNA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAmB,EAAApB,EAAiBqB,EAAQ,KACzBC,EAAAtB,EAAiBqB,EAAQ,KACzBE,EAAAvB,EAAiBqB,EAAQ,KACzBG,EAAAxB,EAAkBqB,EAAQ,KAC1BI,EAAAzB,EAAkBqB,EAAQ,KAC1BH,EAAAlB,EAAsBqB,EAAQ,KAC9BK,EAAA1B,EAAyBqB,EAAQ,KACjCM,EAAA3B,EAAoBqB,EAAQ,KAC5BO,EAAA5B,EAAqBqB,EAAQ,KAC7BQ,EAAA7B,EAAoBqB,EAAQ,IAwC5BS,EAAA7B,EAAA,QACA8B,OAAAC,KAAAZ,IACAa,QAAA,SAAA7B,GACA,OAAAA,EAAAgB,OAEAc,UAAA,SAAA9B,GAEA,OAAAA,EAAAgB,OAEAe,QAAA,SAAA/B,GAEA,OAAA4B,KAAAZ,IAAAhB,IAEAgC,MAAA,SAAAhC,GACA,OAAAiC,EAAAR,EAAAzB,GAAA,IAEAkC,OAAA,SAAAlC,GACA,OAAAiC,EAAAjC,EAAA,IAEAmC,sEAAA,SAAAnC,GAEA,OAAA0B,EAAA1B,IAEAoC,qCAAA,SAAApC,EAAAqC,GACA,OAAAJ,EAAAR,EAAAzB,GAAAqC,IAEAC,sCAAA,SAAAtC,EAAAqC,GACA,OAAAJ,EAAAjC,EAAAqC,MAWA,SAAAJ,EAAAjC,EAAAqC,GAEA,IAAAE,EAAAvC,EAAAwC,OAEA,OAAAD,EAAAE,OAAA,CAEA,GAAAJ,IAAAK,OAAAC,mBAAA,QAAAN,EAAA,CAEA,IAAAO,EAAA,EASA,OAPA5C,EAAA6C,QAAA,SAAAnC,GACA,IAAAoC,EAAA9B,EAAAN,GAEAa,EAAAuB,EAAAF,KACAA,EAAAE,KAES,GACTF,EAKA,IAAAG,EAFA,GAAAV,IAAAK,OAAAM,mBAAA,SAAAX,EAWA,OAPArC,EAAA6C,QAAA,SAAAnC,GACA,IAAAoC,EAAA9B,EAAAN,GAEAqC,IAAAvB,EAAAsB,EAAAC,KACAA,EAAAD,KAES,GACTC,GAAA,EAGA,WAAAV,EACA,OAAAJ,EAAAjC,EAAA,GAGA,oBAAAqC,IAAAY,MAAAZ,GAAA,CAEA,IAAAf,EAAAe,EAAA,IAEA,IAAAa,EAAA,EAKA,OAHAlD,EAAA6C,QAAA,SAAAnC,GACAwC,EAAAhC,EAAAC,EAAAH,EAAAN,GAAA2B,GAAAa,KACW,GACX/B,EAAA+B,EAAA,EAAAb,GAGA,OAAAK,OAAAC,kBAIA,UAAAQ,MAAA,+BAIA,OAAAZ,EAAAE,OAAA,CAEA,OAAAJ,EAAA,CAEA,IAAAe,EAAA,GAEAC,EAAA,EAYA,OAVArD,EAAA6C,QAAA,SAAAnC,EAAA4C,GACA,IAAAC,EAAAD,EAAA,GACAE,EAAAtC,EAAAkC,EAAAG,IAAA,EAAAvC,EAAAN,IAEAa,EAAAiC,EAAAH,KACAA,EAAAG,GAGAJ,EAAAG,GAAAC,IACS,GACTH,EAGA,GAAAhB,IAAAK,OAAAC,mBAAA,QAAAN,EAAA,CAEA,IAAAoB,EAAA,GAEAC,EAAA,EAYA,OAVA1D,EAAA6C,QAAA,SAAAnC,EAAA4C,GACA,IAAAK,EAAAL,EAAA,GACAM,EAAA1C,EAAAuC,EAAAE,IAAA,EAAA3C,EAAAN,IAEAa,EAAAqC,EAAAF,KACAA,EAAAE,GAGAH,EAAAE,GAAAC,IACS,GACTF,EAGA,WAAArB,EAAA,CAEA,IAAAwB,EAAA,EAIA,OAHA7D,EAAA6C,QAAA,SAAAnC,EAAA4C,GACAO,EAAA3C,EAAA2C,EAAA/C,EAAAJ,EAAAU,EAAAV,OAEAM,EAAAK,EAAAwC,IAGA,OAAAxB,EAEA,UAAAc,MAAA,8FAIA,UAAAA,MAAA,gCASA,OALAzB,EAAAoC,MAAA,CACAC,EAAA,gCACAC,OAAAC,GAGAvC","file":"js/04e0cf9759749503e1b4.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`\n   * @private\n   */\n  var multiplyScalar = typed('multiplyScalar', {\n    'number, number': function numberNumber(x, y) {\n      return x * y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n  return multiplyScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var abs = load(require('../arithmetic/abs'));\n  var add = load(require('../arithmetic/add'));\n  var pow = load(require('../arithmetic/pow'));\n  var conj = load(require('../complex/conj'));\n  var sqrt = load(require('../arithmetic/sqrt'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var larger = load(require('../relational/larger'));\n  var smaller = load(require('../relational/smaller'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n\n  var norm = typed('norm', {\n    'number': Math.abs,\n    'Complex': function Complex(x) {\n      return x.abs();\n    },\n    'BigNumber': function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    'boolean': function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    'Array': function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    'Matrix': function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return norm(x);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      // check p\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x, Infinity) = max(abs(x))\n        var pinf = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          var v = abs(value);\n\n          if (larger(v, pinf)) {\n            pinf = v;\n          }\n        }, true);\n        return pinf;\n      }\n\n      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n        // norm(x, -Infinity) = min(abs(x))\n        var ninf; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          var v = abs(value);\n\n          if (!ninf || smaller(v, ninf)) {\n            ninf = v;\n          }\n        }, true);\n        return ninf || 0;\n      }\n\n      if (p === 'fro') {\n        return _norm(x, 2);\n      }\n\n      if (typeof p === 'number' && !isNaN(p)) {\n        // check p != 0\n        if (!equalScalar(p, 0)) {\n          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n          var n = 0; // skip zeros since abs(0) === 0\n\n          x.forEach(function (value) {\n            n = add(pow(abs(value), p), n);\n          }, true);\n          return pow(n, 1 / p);\n        }\n\n        return Number.POSITIVE_INFINITY;\n      } // invalid parameter value\n\n\n      throw new Error('Unsupported parameter value');\n    } // MxN matrix\n\n\n    if (sizeX.length === 2) {\n      // check p\n      if (p === 1) {\n        // norm(x) = the largest column sum\n        var c = []; // result\n\n        var maxc = 0; // skip zeros since abs(0) == 0\n\n        x.forEach(function (value, index) {\n          var j = index[1];\n          var cj = add(c[j] || 0, abs(value));\n\n          if (larger(cj, maxc)) {\n            maxc = cj;\n          }\n\n          c[j] = cj;\n        }, true);\n        return maxc;\n      }\n\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x) = the largest row sum\n        var r = []; // result\n\n        var maxr = 0; // skip zeros since abs(0) == 0\n\n        x.forEach(function (value, index) {\n          var i = index[0];\n          var ri = add(r[i] || 0, abs(value));\n\n          if (larger(ri, maxr)) {\n            maxr = ri;\n          }\n\n          r[i] = ri;\n        }, true);\n        return maxr;\n      }\n\n      if (p === 'fro') {\n        // norm(x) = sqrt(sum(diag(x'x)))\n        var fro = 0;\n        x.forEach(function (value, index) {\n          fro = add(fro, multiply(value, conj(value)));\n        });\n        return abs(sqrt(fro));\n      }\n\n      if (p === 2) {\n        // not implemented\n        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');\n      } // invalid parameter value\n\n\n      throw new Error('Unsupported parameter value');\n    }\n  }\n\n  norm.toTex = {\n    1: \"\\\\left\\\\|${args[0]}\\\\right\\\\|\",\n    2: undefined // use default template\n\n  };\n  return norm;\n}\n\nexports.name = 'norm';\nexports.factory = factory;"],"sourceRoot":""}