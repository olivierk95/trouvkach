{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/bitwise/index.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/bitwise/leftShift.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/bitwise/rightArithShift.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/bitwise/rightLogShift.js"],"names":["module","exports","__webpack_require__","isInteger","bigLeftShift","name","factory","type","config","load","typed","latex","matrix","equalScalar","zeros","algorithm01","algorithm02","algorithm08","algorithm10","algorithm11","algorithm13","algorithm14","leftShift","number, number","x","y","Error","BigNumber, BigNumber","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","valueOf","Array, Matrix","Matrix, Array","SparseMatrix, number | BigNumber","clone","DenseMatrix, number | BigNumber","number | BigNumber, SparseMatrix","size","storage","number | BigNumber, DenseMatrix","Array, number | BigNumber","number | BigNumber, Array","toTex","2","concat","operators","bigRightArithShift","rightArithShift","rightLogShift"],"mappings":"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","file":"js/d7af4d06a991cb67dcf6.js","sourcesContent":["'use strict';\n\nmodule.exports = [require('./bitAnd'), require('./bitNot'), require('./bitOr'), require('./bitXor'), require('./leftShift'), require('./rightArithShift'), require('./rightLogShift')];","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar bigLeftShift = require('../../utils/bignumber/leftShift');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Bitwise left logical shift of a value x by y number of bits, `x << y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.leftShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.leftShift(1, 2)               // returns number 4\n   *\n   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]\n   *\n   * See also:\n   *\n   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times\n   */\n\n  var leftShift = typed('leftShift', {\n    'number, number': function numberNumber(x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function leftShift');\n      }\n\n      return x << y;\n    },\n    'BigNumber, BigNumber': bigLeftShift,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm08(x, y, leftShift, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, leftShift, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, leftShift, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, leftShift);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return leftShift(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, leftShift, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, leftShift, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, leftShift, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, leftShift, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return leftShift(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return leftShift(x, matrix(y)).valueOf();\n    }\n  });\n  leftShift.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['leftShift'], \"${args[1]}\\\\right)\")\n  };\n  return leftShift;\n}\n\nexports.name = 'leftShift';\nexports.factory = factory;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar bigRightArithShift = require('../../utils/bignumber/rightArithShift');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightArithShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightArithShift(4, 2)               // returns number 1\n   *\n   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times\n   */\n\n  var rightArithShift = typed('rightArithShift', {\n    'number, number': function numberNumber(x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function rightArithShift');\n      }\n\n      return x >> y;\n    },\n    'BigNumber, BigNumber': bigRightArithShift,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm08(x, y, rightArithShift, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, rightArithShift, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, rightArithShift, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, rightArithShift);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return rightArithShift(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, rightArithShift, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, rightArithShift, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, rightArithShift, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, rightArithShift, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return rightArithShift(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return rightArithShift(x, matrix(y)).valueOf();\n    }\n  });\n  rightArithShift.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['rightArithShift'], \"${args[1]}\\\\right)\")\n  };\n  return rightArithShift;\n}\n\nexports.name = 'rightArithShift';\nexports.factory = factory;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  var rightLogShift = typed('rightLogShift', {\n    'number, number': function numberNumber(x, y) {\n      if (!isInteger(x) || !isInteger(y)) {\n        throw new Error('Integers expected in function rightLogShift');\n      }\n\n      return x >>> y;\n    },\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm08(x, y, rightLogShift, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, rightLogShift, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, rightLogShift, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, rightLogShift);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, rightLogShift, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, rightLogShift, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, rightLogShift, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, rightLogShift, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y)).valueOf();\n    }\n  });\n  rightLogShift.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['rightLogShift'], \"${args[1]}\\\\right)\")\n  };\n  return rightLogShift;\n}\n\nexports.name = 'rightLogShift';\nexports.factory = factory;"],"sourceRoot":""}