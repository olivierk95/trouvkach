{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/number.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/numeric.js"],"names":["deepMap","__webpack_require__","exports","name","factory","type","config","load","typed","number","","x","string","NaN","num","Number","isNaN","SyntaxError","BigNumber","toNumber","Fraction","valueOf","Unit","Error","null","Unit, string | Unit","unit","valuelessUnit","Array | Matrix","toTex","0","1","2","path","getTypeOf","validInputTypes","validOutputTypes","numeric","value","outputType","inputType","TypeError","Object","keys","join","node","options","args"],"mappings":"2FAEA,IAAAA,EAAcC,EAAQ,GAwEtBC,EAAAC,KAAA,SACAD,EAAAE,QAvEA,SAAAC,EAAAC,EAAAC,EAAAC,GA0BA,IAAAC,EAAAD,EAAA,UACAE,GAAA,WACA,UAEAD,OAAA,SAAAE,GACA,OAAAA,GAEAC,OAAA,SAAAD,GACA,WAAAA,EAAA,OAAAE,IACA,IAAAC,EAAAC,OAAAJ,GAEA,GAAAK,MAAAF,GACA,UAAAG,YAAA,WAAAN,EAAA,wBAGA,OAAAG,GAEAI,UAAA,SAAAP,GACA,OAAAA,EAAAQ,YAEAC,SAAA,SAAAT,GACA,OAAAA,EAAAU,WAEAC,KAAA,SAAAX,GACA,UAAAY,MAAA,iDAEAC,KAAA,SAAAb,GACA,UAEAc,sBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAP,SAAAQ,IAEAC,iBAAA,SAAAjB,GACA,OAAAX,EAAAW,EAAAF,MAQA,OALAA,EAAAoB,MAAA,CACAC,EAAA,IACAC,EAAA,4BACAC,EAAA,sDAEAvB,oCCjBAP,EAAA+B,KAAA,OACA/B,EAAAC,KAAA,WACAD,EAAAE,QAtDA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA0B,EAAA3B,EAAuBN,EAAQ,KAC/BkC,EAAA,CACAvB,QAAA,EACAH,QAAA,EACAS,WAAA,EACAE,UAAA,GAGAgB,EAAA,CACA3B,OAAAF,EAAmBN,EAAQ,KAC3BiB,UAAAX,EAAsBN,EAAQ,MAC9BmB,SAAAb,EAAqBN,EAAQ,MAY7BoC,EAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAN,EAAAI,GAEA,KAAAE,KAAAL,GACA,UAAAM,UAAA,kBAAAH,EAAA,aAAAE,EAAA,4BAAoFE,OAAAC,KAAAR,GAAAS,KAAA,OAGpF,KAAAL,KAAAH,GACA,UAAAK,UAAA,kBAAAH,EAAA,aAAAC,EAAA,6BAAqFG,OAAAC,KAAAP,GAAAQ,KAAA,OAGrF,OAAAL,IAAAC,EACAF,EAEAF,EAAAG,GAAAD,IASA,OALAD,EAAAR,MAAA,SAAAgB,EAAAC,GAEA,OAAAD,EAAAE,KAAA,GAAAlB,SAGAQ","file":"js/31af5acbb7758b459285.js","sourcesContent":["'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    'number': function number(x) {\n      return x;\n    },\n    'string': function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      return num;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.toNumber();\n    },\n    'Fraction': function Fraction(x) {\n      return x.valueOf();\n    },\n    'Unit': function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    'null': function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, number);\n    }\n  });\n  number.toTex = {\n    0: \"0\",\n    1: \"\\\\left(${args[0]}\\\\right)\",\n    2: \"\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)\"\n  };\n  return number;\n}\n\nexports.name = 'number';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var getTypeOf = load(require('../function/utils/typeof'));\n  var validInputTypes = {\n    'string': true,\n    'number': true,\n    'BigNumber': true,\n    'Fraction': true // Load the conversion functions for each output type\n\n  };\n  var validOutputTypes = {\n    'number': load(require('./number')),\n    'BigNumber': load(require('./bignumber/function/bignumber')),\n    'Fraction': load(require('./fraction/function/fraction'))\n    /**\n     * Convert a numeric value to a specific type: number, BigNumber, or Fraction\n     *\n     * @param {string | number | BigNumber | Fraction } value\n     * @param {'number' | 'BigNumber' | 'Fraction'} outputType\n     * @return {number | BigNumber | Fraction} Returns an instance of the\n     *                                         numeric in the requested type\n     */\n\n  };\n\n  var numeric = function numeric(value, outputType) {\n    var inputType = getTypeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n\n  numeric.toTex = function (node, options) {\n    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.\n    return node.args[0].toTex();\n  };\n\n  return numeric;\n} // FIXME: expose numeric in the math namespace after we've decided on a name and have written proper docs for this function. See https://github.com/josdejong/mathjs/pull/1270\n// exports.name = 'type._numeric'\n\n\nexports.path = 'type';\nexports.name = '_numeric';\nexports.factory = factory;"],"sourceRoot":""}