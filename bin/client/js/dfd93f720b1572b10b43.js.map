{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/complex/index.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/complex/arg.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/complex/im.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/complex/re.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/complex/conj.js"],"names":["module","exports","__webpack_require__","deepMap","name","factory","type","config","load","typed","arg","number","x","Math","atan2","BigNumber","Complex","Array | Matrix","toTex","1","im","re","conj","conjugate"],"mappings":"2FAEAA,EAAAC,QAAA,CAAkBC,EAAQ,KAAUA,EAAQ,IAAWA,EAAQ,KAASA,EAAQ,wCCAhF,IAAAC,EAAcD,EAAQ,GAmDtBD,EAAAG,KAAA,MACAH,EAAAI,QAlDA,SAAAC,EAAAC,EAAAC,EAAAC,GA4BA,IAAAC,EAAAD,EAAA,OACAE,OAAA,SAAAC,GACA,OAAAC,KAAAC,MAAA,EAAAF,IAEAG,UAAA,SAAAH,GACA,OAAAN,EAAAS,UAAAD,MAAA,EAAAF,IAEAI,QAAA,SAAAJ,GACA,OAAAA,EAAAF,OAGAO,iBAAA,SAAAL,GACA,OAAAT,EAAAS,EAAAF,MAMA,OAHAA,EAAAQ,MAAA,CACAC,EAAA,kCAEAT,qCChDA,IAAAP,EAAcD,EAAQ,GAkDtBD,EAAAG,KAAA,KACAH,EAAAI,QAjDA,SAAAC,EAAAC,EAAAC,EAAAC,GA4BA,IAAAW,EAAAX,EAAA,MACAE,OAAA,SAAAC,GACA,UAEAG,UAAA,SAAAH,GACA,WAAAN,EAAAS,UAAA,IAEAC,QAAA,SAAAJ,GACA,OAAAA,EAAAQ,IAEAH,iBAAA,SAAAL,GACA,OAAAT,EAAAS,EAAAQ,MAMA,OAHAA,EAAAF,MAAA,CACAC,EAAA,+CAEAC,qCC/CA,IAAAjB,EAAcD,EAAQ,GAkDtBD,EAAAG,KAAA,KACAH,EAAAI,QAjDA,SAAAC,EAAAC,EAAAC,EAAAC,GA4BA,IAAAY,EAAAZ,EAAA,MACAE,OAAA,SAAAC,GACA,OAAAA,GAEAG,UAAA,SAAAH,GACA,OAAAA,GAEAI,QAAA,SAAAJ,GACA,OAAAA,EAAAS,IAEAJ,iBAAA,SAAAL,GACA,OAAAT,EAAAS,EAAAS,MAMA,OAHAA,EAAAH,MAAA,CACAC,EAAA,+CAEAE,oCC/CA,IAAAlB,EAAcD,EAAQ,GAgDtBD,EAAAG,KAAA,OACAH,EAAAI,QA/CA,SAAAC,EAAAC,EAAAC,EAAAC,GA0BA,IAAAa,EAAAb,EAAA,QACAE,OAAA,SAAAC,GACA,OAAAA,GAEAG,UAAA,SAAAH,GACA,OAAAA,GAEAI,QAAA,SAAAJ,GACA,OAAAA,EAAAW,aAEAN,iBAAA,SAAAL,GACA,OAAAT,EAAAS,EAAAU,MAMA,OAHAA,EAAAJ,MAAA,CACAC,EAAA,+BAEAG","file":"js/dfd93f720b1572b10b43.js","sourcesContent":["'use strict';\n\nmodule.exports = [require('./arg'), require('./conj'), require('./im'), require('./re')];","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 2)\n   *    math.arg(a) / math.pi          // returns number 0.25\n   *\n   *    const b = math.complex('2 + 3i')\n   *    math.arg(b)                    // returns number 0.982793723247329\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  var arg = typed('arg', {\n    'number': function number(x) {\n      return Math.atan2(0, x);\n    },\n    'BigNumber': function BigNumber(x) {\n      return type.BigNumber.atan2(0, x);\n    },\n    'Complex': function Complex(x) {\n      return x.arg();\n    },\n    // TODO: implement BigNumber support for function arg\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, arg);\n    }\n  });\n  arg.toTex = {\n    1: \"\\\\arg\\\\left(${args[0]}\\\\right)\"\n  };\n  return arg;\n}\n\nexports.name = 'arg';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Get the imaginary part of a complex number.\n   * For a complex number `a + bi`, the function returns `b`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.im(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number -5.2\n   *    math.re(math.complex(2.4))     // returns number 0\n   *\n   * See also:\n   *\n   *    re, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The imaginary part of x\n   */\n  var im = typed('im', {\n    'number': function number(x) {\n      return 0;\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.BigNumber(0);\n    },\n    'Complex': function Complex(x) {\n      return x.im;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, im);\n    }\n  });\n  im.toTex = {\n    1: \"\\\\Im\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace\"\n  };\n  return im;\n}\n\nexports.name = 'im';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Get the real part of a complex number.\n   * For a complex number `a + bi`, the function returns `a`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.re(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number 0\n   *    math.re(math.complex(2.4))     // returns number 2.4\n   *\n   * See also:\n   *\n   *    im, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The real part of x\n   */\n  var re = typed('re', {\n    'number': function number(x) {\n      return x;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x;\n    },\n    'Complex': function Complex(x) {\n      return x.re;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, re);\n    }\n  });\n  re.toTex = {\n    1: \"\\\\Re\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace\"\n  };\n  return re;\n}\n\nexports.name = 're';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  var conj = typed('conj', {\n    'number': function number(x) {\n      return x;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x;\n    },\n    'Complex': function Complex(x) {\n      return x.conjugate();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, conj);\n    }\n  });\n  conj.toTex = {\n    1: \"\\\\left(${args[0]}\\\\right)^*\"\n  };\n  return conj;\n}\n\nexports.name = 'conj';\nexports.factory = factory;"],"sourceRoot":""}