{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/matrix/map.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/matrix/ones.js"],"names":["maxArgumentCount","__webpack_require__","_map","array","callback","args","recurse","value","index","Array","isArray","map","child","i","concat","exports","name","factory","type","config","load","typed","Array, function","Matrix, function","x","toTex","undefined","isInteger","resize","matrix","ones","","_ones","...number | BigNumber | string","size","length","format","pop","Matrix","storage","valueOf","Array | Matrix, string","defaultValue","hasBigNumbers","forEach","arr","isBigNumber","toNumber","_normalize","BigNumber","Error","_validate","m"],"mappings":"2FAEA,IAAAA,EAAuBC,EAAQ,IAAsBD,iBA8CrD,SAAAE,EAAAC,EAAAC,GAEA,IAAAC,EAAAL,EAAAI,GAqBA,OAnBA,SAAAE,EAAAC,EAAAC,GACA,OAAAC,MAAAC,QAAAH,GACAA,EAAAI,IAAA,SAAAC,EAAAC,GAEA,OAAAP,EAAAM,EAAAJ,EAAAM,OAAAD,MAIA,IAAAR,EACAD,EAAAG,GACO,IAAAF,EACPD,EAAAG,EAAAC,GAGAJ,EAAAG,EAAAC,EAAAL,GAKAG,CAAAH,EAAA,IAGAY,EAAAC,KAAA,MACAD,EAAAE,QAvEA,SAAAC,EAAAC,EAAAC,EAAAC,GAyBA,IAAAV,EAAAU,EAAA,OACAC,kBAAApB,EACAqB,mBAAA,SAAAC,EAAApB,GACA,OAAAoB,EAAAb,IAAAP,MAKA,OAFAO,EAAAc,WAAAC,EAEAf,qCCnCA,IAAAgB,EAAgB1B,EAAQ,GAAoB0B,UAE5CC,EAAa3B,EAAQ,GAAmB2B,OA8HxCb,EAAAC,KAAA,OACAD,EAAAE,QA7HA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAQ,EAAAT,EAAoBnB,EAAQ,IAmC5B6B,EAAAT,EAAA,QACAU,GAAA,WACA,gBAAAZ,EAAAU,OAAAG,EAAA,IAAAA,EAAA,eAIAC,iCAAA,SAAAC,GAGA,oBAFAA,IAAAC,OAAA,GAEA,CACA,IAAAC,EAAAF,EAAAG,MACA,OAAAL,EAAAE,EAAAE,GACO,gBAAAjB,EAAAU,OACPG,EAAAE,GAEAF,EAAAE,EAAA,YAGAzB,MAAAuB,EACAM,OAAA,SAAAJ,GACA,IAAAE,EAAAF,EAAAK,UACA,OAAAP,EAAAE,EAAAM,UAAAJ,IAEAK,yBAAA,SAAAP,EAAAE,GACA,OAAAJ,EAAAE,EAAAM,UAAAJ,MAKA,OAFAN,EAAAL,WAAAC,EAEAI,EASA,SAAAE,EAAAE,EAAAE,GACA,IAEAM,EA0BA,SAAAR,GACA,IAAAS,GAAA,EAOA,OANAT,EAAAU,QAAA,SAAArC,EAAAC,EAAAqC,GACA3B,EAAA4B,YAAAvC,KACAoC,GAAA,EACAE,EAAArC,GAAAD,EAAAwC,cAGAJ,EApCAK,CAAAd,GAEA,IAAAhB,EAAA+B,UAAA,KAIA,GAkCA,SAAAf,GACAA,EAAAU,QAAA,SAAArC,GACA,oBAAAA,IAAAoB,EAAApB,MAAA,EACA,UAAA2C,MAAA,2DAvCAC,CAAAjB,GAEAE,EAAA,CAEA,IAAAgB,EAAAvB,EAAAO,GAEA,OAAAF,EAAAC,OAAA,EACAiB,EAAAxB,OAAAM,EAAAQ,GAGAU,EAGA,IAAAP,EAAA,GAEA,OAAAX,EAAAC,OAAA,EACAP,EAAAiB,EAAAX,EAAAQ,GAGAG","file":"js/9a3ff1820c0f720c4ce9.js","sourcesContent":["'use strict';\n\nvar maxArgumentCount = require('../../utils/function').maxArgumentCount;\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n  var map = typed('map', {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n  map.toTex = undefined; // use default template\n\n  return map;\n}\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      } else if (args === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}\n\nexports.name = 'map';\nexports.factory = factory;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar resize = require('../../utils/array').resize;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n\n  var ones = typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    'Array': _ones,\n    'Matrix': function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n  ones.toTex = undefined; // use default template\n\n  return ones;\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (type.isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n}\n\nexports.name = 'ones';\nexports.factory = factory;"],"sourceRoot":""}