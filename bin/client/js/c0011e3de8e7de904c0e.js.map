{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/geometry/distance.js"],"names":["exports","name","factory","type","config","load","typed","add","__webpack_require__","subtract","multiply","divide","negate","sqrt","abs","_isNumber","a","isBigNumber","_2d","constructor","Array","_objectToArray","_3d","_parametricLine","o","keys","Object","i","length","push","_distancePointLine2D","x","y","b","c","num","den","_distancePointLine3D","z","x0","y0","z0","_distance2d","x1","y1","x2","y2","yDiff","xDiff","radicant","_distance3d","z1","z2","zDiff","Array, Array, Array","TypeError","m","xCoeff","yCoeff","constant","Object, Object, Object","hasOwnProperty","lineTwoPtY","lineTwoPtX","lineOnePtY","lineOnePtX","pointX","pointY","Array, Array","Object, Object","xCoeffLine","yCoeffLine","pointZ","pointOneX","pointOneY","pointTwoX","pointTwoY","pointOneZ","pointTwoZ","arr","_i","_pairwise","result","j","_distancePairwise"],"mappings":"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","file":"js/c0011e3de8e7de904c0e.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiplyScalar'));\n  var divide = load(require('../arithmetic/divideScalar'));\n  var negate = load(require('../arithmetic/unaryMinus'));\n  var sqrt = load(require('../arithmetic/sqrt'));\n  var abs = load(require('../arithmetic/abs'));\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in 2 and 3 dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *    math.distance([x1, y1], [x2, y2])\n    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\n    *    math.distance([x1, y1, z1], [x2, y2, z2])\n    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\n    *    math.distance([[A], [B], [C]...])\n    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\n    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\n    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\n    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\n    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])\n    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\n    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\n    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.6569\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\n    *    math.distance(\n    *     {pointX: 1, pointY: 4},\n    *     {lineOnePtX: 6, lineOnePtY: 3},\n    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n\n  var distance = typed('distance', {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        var m = divide(subtract(z[1], z[0]), subtract(y[1], y[0]));\n        var xCoeff = multiply(multiply(m, m), y[0]);\n        var yCoeff = negate(multiply(m, y[0]));\n        var constant = x[1];\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') && y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')) {\n          var m = divide(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));\n          var xCoeff = multiply(multiply(m, m), y.lineOnePtX);\n          var yCoeff = negate(multiply(m, y.lineOnePtX));\n          var constant = x.pointX;\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === 2 && y.length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distance2d(x[0], x[1], y[0], y[1]);\n      } else if (x.length === 3 && y.length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') && y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('constant')) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n\n        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') && y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') && y.hasOwnProperty('b') && y.hasOwnProperty('c')) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n\n        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')) {\n          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n\n        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')) {\n          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array': function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n\n      return _distancePairwise(arr);\n    }\n  });\n\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || type.isBigNumber(a);\n  }\n\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n\n    return a;\n  }\n\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      for (var i in a) {\n        if (a[i].length !== 2 || !_isNumber(a[i][0]) || !_isNumber(a[i][1])) {\n          return false;\n        }\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      for (var _i in a) {\n        if (a[_i].length !== 3 || !_isNumber(a[_i][0]) || !_isNumber(a[_i][1]) || !_isNumber(a[_i][2])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(add(add(multiply(a, x), multiply(b, y)), c));\n    var den = sqrt(add(multiply(a, a), multiply(b, b)));\n    var result = divide(num, den);\n    return result;\n  }\n\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiply(subtract(y0, y), c), multiply(subtract(z0, z), b)), subtract(multiply(subtract(z0, z), a), multiply(subtract(x0, x), c)), subtract(multiply(subtract(x0, x), b), multiply(subtract(y0, y), a))];\n    num = sqrt(add(add(multiply(num[0], num[0]), multiply(num[1], num[1])), multiply(num[2], num[2])));\n    var den = sqrt(add(add(multiply(a, a), multiply(b, b)), multiply(c, c)));\n    var result = divide(num, den);\n    return result;\n  }\n\n  function _distance2d(x1, y1, x2, y2) {\n    var yDiff = subtract(y2, y1);\n    var xDiff = subtract(x2, x1);\n    var radicant = add(multiply(yDiff, yDiff), multiply(xDiff, xDiff));\n    var result = sqrt(radicant);\n    return result;\n  }\n\n  function _distance3d(x1, y1, z1, x2, y2, z2) {\n    var zDiff = subtract(z2, z1);\n    var yDiff = subtract(y2, y1);\n    var xDiff = subtract(x2, x1);\n    var radicant = add(add(multiply(zDiff, zDiff), multiply(yDiff, yDiff)), multiply(xDiff, xDiff));\n    var result = sqrt(radicant);\n    return result;\n  }\n\n  function _distancePairwise(a) {\n    var result = [];\n\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));\n        } else if (a[0].length === 3) {\n          result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));\n        }\n      }\n    }\n\n    return result;\n  }\n\n  return distance;\n}\n\nexports.name = 'distance';\nexports.factory = factory;"],"sourceRoot":""}