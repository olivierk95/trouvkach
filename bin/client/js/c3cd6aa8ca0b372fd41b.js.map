{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/relational/unequal.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/relational/smallerEq.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/relational/smaller.js"],"names":["nearlyEqual","__webpack_require__","bigNearlyEqual","exports","name","factory","type","config","load","typed","matrix","algorithm03","algorithm07","algorithm12","algorithm13","algorithm14","latex","unequal","any, any","x","y","undefined","_unequal","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","valueOf","Array, Matrix","Matrix, Array","SparseMatrix, any","DenseMatrix, any","any, SparseMatrix","any, DenseMatrix","Array, any","any, Array","boolean, boolean","number, number","epsilon","BigNumber, BigNumber","Fraction, Fraction","equals","Complex, Complex","Unit, Unit","equalBase","Error","value","toTex","2","concat","operators","smallerEq","lte","compare","TypeError","smaller","lt"],"mappings":"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","file":"js/c3cd6aa8ca0b372fd41b.js","sourcesContent":["'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured epsilon. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   * Strings are compared by their numerical value.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everything\n   * except `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3)       // returns true\n   *    math.unequal(2 + 2, 4)       // returns false\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.unequal(a, b)           // returns false\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.unequal(c, d)           // returns [false, true, false]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.unequal(0, null)        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n\n\n  var unequal = typed('unequal', {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n\n      if (y === null) {\n        return x !== null;\n      }\n\n      if (x === undefined) {\n        return y !== undefined;\n      }\n\n      if (y === undefined) {\n        return x !== undefined;\n      }\n\n      return _unequal(x, y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, _unequal);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, _unequal, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, _unequal, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, _unequal);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return unequal(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return unequal(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return unequal(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, _unequal, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, _unequal, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, _unequal, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, _unequal, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _unequal, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _unequal, true).valueOf();\n    }\n  });\n\n  var _unequal = typed('_unequal', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x !== y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return !x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return !x.equals(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return unequal(x.value, y.value);\n    }\n  });\n\n  unequal.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['unequal'], \"${args[1]}\\\\right)\")\n  };\n  return unequal;\n}\n\nexports.name = 'unequal';\nexports.factory = factory;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is smaller or equal to y.\n   *\n   * The function returns true when x is smaller than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smallerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(1 + 2, 3)        // returns false\n   *    math.smallerEq(1 + 2, 3)      // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n\n  var smallerEq = typed('smallerEq', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x <= y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x <= y || nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) !== 1;\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return smallerEq(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, smallerEq);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, smallerEq, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, smallerEq, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, smallerEq);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return smallerEq(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return smallerEq(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return smallerEq(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, smallerEq, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, smallerEq, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, smallerEq, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, smallerEq, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smallerEq, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smallerEq, true).valueOf();\n    }\n  });\n  smallerEq.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['smallerEq'], \"${args[1]}\\\\right)\")\n  };\n  return smallerEq;\n}\n\nexports.name = 'smallerEq';\nexports.factory = factory;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n\n  var smaller = typed('smaller', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x < y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === -1;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return smaller(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, smaller);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, smaller, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, smaller, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, smaller);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, smaller, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, smaller, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, smaller, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, smaller, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n  smaller.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['smaller'], \"${args[1]}\\\\right)\")\n  };\n  return smaller;\n}\n\nexports.name = 'smaller';\nexports.factory = factory;"],"sourceRoot":""}