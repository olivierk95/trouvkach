{"version":3,"sources":["webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/distribution.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/factorial.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/combinations.js"],"names":["ArgumentsError","__webpack_require__","isCollection","isNumber","exports","name","factory","type","config","load","typed","math","matrix","array","rng","distribution","distributions","hasOwnProperty","Error","args","Array","prototype","slice","call","arguments","_pickRandom","possibles","number","weights","single","isMatrix","valueOf","isArray","TypeError","size","length","totalWeights","i","len","pick","result","Math","floor","randKey","_i","_len","indexOf","push","_random","min","max","_randomInt","_randomDataForMatrix","randFunc","data","shift","_i2","_length","random","arg1","arg2","arg3","undefined","res","randomInt","number | Array","arg","number | Array, number","Array, number, number","pickRandom","Array, number | Array","Array, number | Array, Array | number","apply","this","uniform","normal","u1","u2","picked","pow","log","cos","PI","toTex","deepMap","gamma","latex","factorial","n","BigNumber","isNegative","plus","Array | Matrix","1","concat","operators","isInteger","product","isPositiveInteger","gte","combinations","number, number","k","nMinusk","BigNumber, BigNumber","ii","one","gt","minus","lt","lte","times","dividedBy","2"],"mappings":"4FAEA,IAAAA,EAAqBC,EAAQ,IAE7BC,EAAmBD,EAAQ,IAE3BE,EAAeF,EAAQ,GAAoBE,SAqS3CC,EAAAC,KAAA,eACAD,EAAAE,QAlSA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAoBR,EAAQ,IAE5BY,EAAcZ,EAAQ,GAGtBa,EAAAL,EAAiBR,EAAQ,MAyBzB,SAAAc,EAAAV,GACA,IAAAW,EAAAC,eAAAZ,GACA,UAAAa,MAAA,wBAAAb,GAGA,IAAAc,EAAAC,MAAAC,UAAAC,MAAAC,KAAAC,UAAA,GAEA,gBAAAT,GAyHA,SAAAU,EAAAC,EAAAC,EAAAC,GACA,IAAAC,OAAA,IAAAF,EAMA,GAJAE,IACAF,EAAA,GAGApB,EAAAuB,SAAAJ,GACAA,IAAAK,eACS,IAAAX,MAAAY,QAAAN,GACT,UAAAO,UAAA,oDAGA,GAAApB,EAAAqB,KAAAR,GAAAS,OAAA,EACA,UAAAjB,MAAA,0CAGA,IAAAkB,EAAA,EAEA,YAAAR,EAAA,CACA,GAAAA,EAAAO,SAAAT,EAAAS,OACA,UAAAjB,MAAA,kDAGA,QAAAmB,EAAA,EAAAC,EAAAV,EAAAO,OAA+CE,EAAAC,EAASD,IAAA,CACxD,IAAAlC,EAAAyB,EAAAS,KAAAT,EAAAS,GAAA,EACA,UAAAnB,MAAA,gDAGAkB,GAAAR,EAAAS,IAIA,IAAAF,EAAAT,EAAAS,OAEA,OAAAA,EACA,SACS,GAAAR,GAAAQ,EACT,OAAAR,EAAA,EAAAD,IAAA,GAMA,IAHA,IACAa,EADAC,EAAA,GAGAA,EAAAL,OAAAR,GAAA,CACA,YAAAC,EACAW,EAAAb,EAAAe,KAAAC,MAAA5B,IAAAqB,SAIA,IAFA,IAAAQ,EAAA7B,IAAAsB,EAEAQ,EAAA,EAAAC,EAAAnB,EAAAS,OAAqDS,EAAAC,EAAWD,IAGhE,IAFAD,GAAAf,EAAAgB,IAEA,GACAL,EAAAb,EAAAkB,GACA,OAKA,IAAAJ,EAAAM,QAAAP,IACAC,EAAAO,KAAAR,GAIA,OAAAV,EAAAW,EAAA,GAAAA,EAGA,SAAAQ,EAAAC,EAAAC,GACA,OAAAD,EAAAlC,KAAAmC,EAAAD,GAGA,SAAAE,EAAAF,EAAAC,GACA,OAAAT,KAAAC,MAAAO,EAAAlC,KAAAmC,EAAAD,IAIA,SAAAG,EAAAlB,EAAAe,EAAAC,EAAAG,GACA,IAAAC,EAAA,GAGA,IAFApB,IAAAZ,MAAA,IAEAa,OAAA,EACA,QAAAE,EAAA,EAAAF,EAAAD,EAAAqB,QAAgDlB,EAAAF,EAAYE,IAC5DiB,EAAAP,KAAAK,EAAAlB,EAAAe,EAAAC,EAAAG,SAGA,QAAAG,EAAA,EAAAC,EAAAvB,EAAAqB,QAAmDC,EAAAC,EAAeD,IAClEF,EAAAP,KAAAM,EAAAJ,EAAAC,IAIA,OAAAI,EAGA,MArNA,CACAI,OAAA,SAAAC,EAAAC,EAAAC,GACA,IAAA3B,EAAAe,EAAAC,EAEA,GAAA1B,UAAAW,OAAA,EACA,UAAAnC,EAAA,SAAAwB,UAAAW,OAAA,KAyBA,GAxBW,IAAAX,UAAAW,OAEXjC,EAAAyD,GACAzB,EAAAyB,EAEAT,EAAAS,EAEW,IAAAnC,UAAAW,OAEXjC,EAAAyD,IACAzB,EAAAyB,EACAT,EAAAU,IAEAX,EAAAU,EACAT,EAAAU,IAIA1B,EAAAyB,EACAV,EAAAW,EACAV,EAAAW,QAIAC,IAAAb,IAAA9C,EAAA8C,SAAAa,IAAAZ,IAAA/C,EAAA+C,GACA,UAAAjB,UAAA,uCAMA,QAHA6B,IAAAZ,MAAA,QACAY,IAAAb,MAAA,QAEAa,IAAA5B,EAAA,CACA,IAAA6B,EAAAX,EAAAlB,EAAAH,UAAAkB,EAAAC,EAAAF,GAEA,OAAAzC,EAAAuB,SAAAI,GAAAtB,EAAAmD,KAGA,OAAAf,EAAAC,EAAAC,IAEAc,UAAAtD,EAAA,CACAuD,iBAAA,SAAAC,GAGA,GAAAhE,EAAAgE,GAAA,CACA,IAAAhC,EAAAgC,EAGAH,EAAAX,EAAAlB,EAAAH,UANA,EAIA,EAEAoB,GAEA,OAAA5C,EAAAuB,SAAAI,GAAAtB,EAAAmD,KAGA,OAAAZ,EAXA,EAUAe,IAIAC,yBAAA,SAAAR,EAAAC,GACA,GAAA1D,EAAAyD,GAAA,CACA,IAAAzB,EAAAyB,EACAT,EAAAU,EAGAG,EAAAX,EAAAlB,EAAAH,UAFA,EAEAmB,EAAAC,GAEA,OAAA5C,EAAAuB,SAAAI,GAAAtB,EAAAmD,KAIA,OAAAZ,EAFAQ,EACAC,IAIAQ,wBAAA,SAAAlC,EAAAe,EAAAC,GACA,IAAAa,EAAAX,EAAAlB,EAAAH,UAAAkB,EAAAC,EAAAC,GAEA,OAAAjB,IAAA,IAAAA,EAAAJ,SAAAlB,EAAAmD,QAGAM,WAAA3D,EAAA,CACAU,MAAA,SAAAM,GACA,OAAAD,EAAAC,IAEA4C,wBAAA,SAAA5C,EAAAkC,GACA,IAAAjC,EAAAC,EAEA,GAAAR,MAAAY,QAAA4B,GACAhC,EAAAgC,MACa,KAAAzD,EAAAyD,GAGb,UAAA3B,UAAA,2CAFAN,EAAAiC,EAKA,OAAAnC,EAAAC,EAAAC,EAAAC,IAEA2C,wCAAA,SAAA7C,EAAAkC,EAAAC,GACA,IAAAlC,EAAAC,EAUA,GARAR,MAAAY,QAAA4B,IACAhC,EAAAgC,EACAjC,EAAAkC,IAEAjC,EAAAiC,EACAlC,EAAAiC,IAGAxC,MAAAY,QAAAJ,KAAAzB,EAAAwB,GACA,UAAAM,UAAA,2CAGA,OAAAR,EAAAC,EAAAC,EAAAC,OApHA,CADAZ,EAAAX,GAAAmE,MAAAC,KAAAtD,IA8NA,IAAAH,EAAA,CACA0D,QAAA,WACA,OAAA5D,GAMA6D,OAAA,WACA,kBAMA,IALA,IAAAC,EACAC,EACAC,GAAA,EAGAA,EAAA,GAAAA,EAAA,GACAF,EAAA9D,IACA+D,EAAA/D,IACAgE,EAAA,IAAArC,KAAAsC,KAAA,EAAAtC,KAAAuC,IAAAJ,GAAA,IAAAnC,KAAAwC,IAAA,EAAAxC,KAAAyC,GAAAL,GAAA,GAGA,OAAAC,KAMA,OAFA/D,EAAAoE,WAAArB,EAEA/C,oCCtSA,IAAAqE,EAAcnF,EAAQ,GAuDtBG,EAAAC,KAAA,YACAD,EAAAE,QAtDA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA2E,EAAA5E,EAAmBR,EAAQ,MAE3BqF,EAAcrF,EAAQ,GAyBtBsF,EAAA7E,EAAA,aACAiB,OAAA,SAAA6D,GACA,GAAAA,EAAA,EACA,UAAAtE,MAAA,8BAGA,OAAAmE,EAAAG,EAAA,IAEAC,UAAA,SAAAD,GACA,GAAAA,EAAAE,aACA,UAAAxE,MAAA,8BAGA,OAAAmE,EAAAG,EAAAG,KAAA,KAEAC,iBAAA,SAAAJ,GACA,OAAAJ,EAAAI,EAAAD,MAMA,OAHAA,EAAAJ,MAAA,CACAU,EAAA,4BAAyBC,OAAAR,EAAAS,UAAA,YAEzBR,oCCpDA,IAAAS,EAAgB/F,EAAQ,GAAoB+F,UAE5CC,EAAchG,EAAQ,KAwFtB,SAAAiG,EAAAV,GACA,OAAAA,EAAAQ,aAAAR,EAAAW,IAAA,GAGA/F,EAAAC,KAAA,eACAD,EAAAE,QA3FA,SAAAC,EAAAC,EAAAC,EAAAC,GAwBA,IAAA0F,EAAA1F,EAAA,gBACA2F,iBAAA,SAAAb,EAAAc,GACA,IAAAC,EAEA,IAAAP,EAAAR,MAAA,EACA,UAAAvD,UAAA,4DAGA,IAAA+D,EAAAM,MAAA,EACA,UAAArE,UAAA,4DAGA,GAAAqE,EAAAd,EACA,UAAAvD,UAAA,qCAKA,OAAAqE,GAFAC,EAAAf,EAAAc,GAGAL,EAAAM,EAAA,EAAAf,GACAS,EAAA,EAAAK,GAGAL,EAAAK,EAAA,EAAAd,GACAS,EAAA,EAAAM,IAEAC,uBAAA,SAAAhB,EAAAc,GACA,IAAApD,EAAAV,EAAAH,EAAAoE,EACAC,EAAA,IAAAnG,EAAAkF,UAAA,GAEA,IAAAS,EAAAV,KAAAU,EAAAI,GACA,UAAArE,UAAA,4DAGA,GAAAqE,EAAAK,GAAAnB,GACA,UAAAvD,UAAA,kDAOA,IAJAiB,EAAAsC,EAAAoB,MAAAN,GACAA,EAAAO,GAAA3D,OAAAoD,GACA9D,EAAAkE,EAEArE,EAAAqE,EAAAD,EAAAjB,EAAAoB,MAAA1D,GAAsCb,EAAAyE,IAAAL,GAAWpE,IAAAsD,KAAA,GACjDnD,IAAAuE,MAAA7D,EAAAyC,KAAAtD,IAAA2E,UAAA3E,GAGA,OAAAG,KAOA,OAHA4D,EAAAjB,MAAA,CACA8B,EAAA,mCAEAb","file":"js/b77d15c7b1cbf79ebf72.js","sourcesContent":["'use strict';\n\nvar ArgumentsError = require('../../error/ArgumentsError');\n\nvar isCollection = require('../../utils/collection/isCollection');\n\nvar isNumber = require('../../utils/number').isNumber; // TODO: rethink math.distribution\n// TODO: rework to a typed function\n\n\nfunction factory(type, config, load, typed, math) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var array = require('../../utils/array'); // seeded pseudo random number generator\n\n\n  var rng = load(require('./seededRNG'));\n  /**\n   * Create a distribution object with a set of random functions for given\n   * random distribution.\n   *\n   * Syntax:\n   *\n   *     math.distribution(name)\n   *\n   * Examples:\n   *\n   *     const normalDist = math.distribution('normal') // create a normal distribution\n   *     normalDist.random(0, 10)                     // get a random value between 0 and 10\n   *\n   * See also:\n   *\n   *     random, randomInt, pickRandom\n   *\n   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.\n   * @return {Object}       Returns a distribution object containing functions:\n   *                        `random([size] [, min] [, max])`,\n   *                        `randomInt([min] [, max])`,\n   *                        `pickRandom(array)`\n   */\n\n  function distribution(name) {\n    if (!distributions.hasOwnProperty(name)) {\n      throw new Error('Unknown distribution ' + name);\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n    var distribution = distributions[name].apply(this, args);\n    return function (distribution) {\n      // This is the public API for all distributions\n      var randFunctions = {\n        random: function random(arg1, arg2, arg3) {\n          var size, min, max;\n\n          if (arguments.length > 3) {\n            throw new ArgumentsError('random', arguments.length, 0, 3);\n          } else if (arguments.length === 1) {\n            // `random(max)` or `random(size)`\n            if (isCollection(arg1)) {\n              size = arg1;\n            } else {\n              max = arg1;\n            }\n          } else if (arguments.length === 2) {\n            // `random(min, max)` or `random(size, max)`\n            if (isCollection(arg1)) {\n              size = arg1;\n              max = arg2;\n            } else {\n              min = arg1;\n              max = arg2;\n            }\n          } else {\n            // `random(size, min, max)`\n            size = arg1;\n            min = arg2;\n            max = arg3;\n          } // TODO: validate type of size\n\n\n          if (min !== undefined && !isNumber(min) || max !== undefined && !isNumber(max)) {\n            throw new TypeError('Invalid argument in function random');\n          }\n\n          if (max === undefined) max = 1;\n          if (min === undefined) min = 0;\n\n          if (size !== undefined) {\n            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);\n\n            return type.isMatrix(size) ? matrix(res) : res;\n          }\n\n          return _random(min, max);\n        },\n        randomInt: typed({\n          'number | Array': function numberArray(arg) {\n            var min = 0;\n\n            if (isCollection(arg)) {\n              var size = arg;\n              var max = 1;\n\n              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n\n              return type.isMatrix(size) ? matrix(res) : res;\n            } else {\n              var _max = arg;\n              return _randomInt(min, _max);\n            }\n          },\n          'number | Array, number': function numberArrayNumber(arg1, arg2) {\n            if (isCollection(arg1)) {\n              var size = arg1;\n              var max = arg2;\n              var min = 0;\n\n              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n\n              return type.isMatrix(size) ? matrix(res) : res;\n            } else {\n              var _min = arg1;\n              var _max2 = arg2;\n              return _randomInt(_min, _max2);\n            }\n          },\n          'Array, number, number': function ArrayNumberNumber(size, min, max) {\n            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);\n\n            return size && size.isMatrix === true ? matrix(res) : res;\n          }\n        }),\n        pickRandom: typed({\n          'Array': function Array(possibles) {\n            return _pickRandom(possibles);\n          },\n          'Array, number | Array': function ArrayNumberArray(possibles, arg2) {\n            var number, weights;\n\n            if (Array.isArray(arg2)) {\n              weights = arg2;\n            } else if (isNumber(arg2)) {\n              number = arg2;\n            } else {\n              throw new TypeError('Invalid argument in function pickRandom');\n            }\n\n            return _pickRandom(possibles, number, weights);\n          },\n          'Array, number | Array, Array | number': function ArrayNumberArrayArrayNumber(possibles, arg2, arg3) {\n            var number, weights;\n\n            if (Array.isArray(arg2)) {\n              weights = arg2;\n              number = arg3;\n            } else {\n              weights = arg3;\n              number = arg2;\n            }\n\n            if (!Array.isArray(weights) || !isNumber(number)) {\n              throw new TypeError('Invalid argument in function pickRandom');\n            }\n\n            return _pickRandom(possibles, number, weights);\n          }\n        })\n      };\n\n      function _pickRandom(possibles, number, weights) {\n        var single = typeof number === 'undefined';\n\n        if (single) {\n          number = 1;\n        }\n\n        if (type.isMatrix(possibles)) {\n          possibles = possibles.valueOf(); // get Array\n        } else if (!Array.isArray(possibles)) {\n          throw new TypeError('Unsupported type of value in function pickRandom');\n        }\n\n        if (array.size(possibles).length > 1) {\n          throw new Error('Only one dimensional vectors supported');\n        }\n\n        var totalWeights = 0;\n\n        if (typeof weights !== 'undefined') {\n          if (weights.length !== possibles.length) {\n            throw new Error('Weights must have the same length as possibles');\n          }\n\n          for (var i = 0, len = weights.length; i < len; i++) {\n            if (!isNumber(weights[i]) || weights[i] < 0) {\n              throw new Error('Weights must be an array of positive numbers');\n            }\n\n            totalWeights += weights[i];\n          }\n        }\n\n        var length = possibles.length;\n\n        if (length === 0) {\n          return [];\n        } else if (number >= length) {\n          return number > 1 ? possibles : possibles[0];\n        }\n\n        var result = [];\n        var pick;\n\n        while (result.length < number) {\n          if (typeof weights === 'undefined') {\n            pick = possibles[Math.floor(rng() * length)];\n          } else {\n            var randKey = rng() * totalWeights;\n\n            for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n              randKey -= weights[_i];\n\n              if (randKey < 0) {\n                pick = possibles[_i];\n                break;\n              }\n            }\n          }\n\n          if (result.indexOf(pick) === -1) {\n            result.push(pick);\n          }\n        }\n\n        return single ? result[0] : result; // TODO: add support for multi dimensional matrices\n      }\n\n      function _random(min, max) {\n        return min + distribution() * (max - min);\n      }\n\n      function _randomInt(min, max) {\n        return Math.floor(min + distribution() * (max - min));\n      } // This is a function for generating a random matrix recursively.\n\n\n      function _randomDataForMatrix(size, min, max, randFunc) {\n        var data = [];\n        size = size.slice(0);\n\n        if (size.length > 1) {\n          for (var i = 0, length = size.shift(); i < length; i++) {\n            data.push(_randomDataForMatrix(size, min, max, randFunc));\n          }\n        } else {\n          for (var _i2 = 0, _length = size.shift(); _i2 < _length; _i2++) {\n            data.push(randFunc(min, max));\n          }\n        }\n\n        return data;\n      }\n\n      return randFunctions;\n    }(distribution);\n  } // Each distribution is a function that takes no argument and when called returns\n  // a number between 0 and 1.\n\n\n  var distributions = {\n    uniform: function uniform() {\n      return rng;\n    },\n    // Implementation of normal distribution using Box-Muller transform\n    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\n    // We take : mean = 0.5, standard deviation = 1/6\n    // so that 99.7% values are in [0, 1].\n    normal: function normal() {\n      return function () {\n        var u1;\n        var u2;\n        var picked = -1; // We reject values outside of the interval [0, 1]\n        // TODO: check if it is ok to do that?\n\n        while (picked < 0 || picked > 1) {\n          u1 = rng();\n          u2 = rng();\n          picked = 1 / 6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;\n        }\n\n        return picked;\n      };\n    }\n  };\n  distribution.toTex = undefined; // use default template\n\n  return distribution;\n}\n\nexports.name = 'distribution';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var gamma = load(require('./gamma'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Compute the factorial of a value\n   *\n   * Factorial only supports an integer value as argument.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.factorial(n)\n   *\n   * Examples:\n   *\n   *    math.factorial(5)    // returns 120\n   *    math.factorial(3)    // returns 6\n   *\n   * See also:\n   *\n   *    combinations, gamma, permutations\n   *\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n   */\n\n\n  var factorial = typed('factorial', {\n    'number': function number(n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n + 1);\n    },\n    'BigNumber': function BigNumber(n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n.plus(1));\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return deepMap(n, factorial);\n    }\n  });\n  factorial.toTex = {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latex.operators['factorial'])\n  };\n  return factorial;\n}\n\nexports.name = 'factorial';\nexports.factory = factory;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar product = require('./product');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Compute the number of ways of picking `k` unordered outcomes from `n`\n   * possibilities.\n   *\n   * Combinations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.combinations(n, k)\n   *\n   * Examples:\n   *\n   *    math.combinations(7, 5) // returns 21\n   *\n   * See also:\n   *\n   *    permutations, factorial\n   *\n   * @param {number | BigNumber} n    Total number of objects in the set\n   * @param {number | BigNumber} k    Number of objects in the subset\n   * @return {number | BigNumber}     Number of possible combinations.\n   */\n  var combinations = typed('combinations', {\n    'number, number': function numberNumber(n, k) {\n      var prodrange, nMinusk;\n\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n\n      if (k > n) {\n        throw new TypeError('k must be less than or equal to n');\n      }\n\n      nMinusk = n - k;\n\n      if (k < nMinusk) {\n        prodrange = product(nMinusk + 1, n);\n        return prodrange / product(1, k);\n      }\n\n      prodrange = product(k + 1, n);\n      return prodrange / product(1, nMinusk);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var max, result, i, ii;\n      var one = new type.BigNumber(1);\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function combinations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('k must be less than n in function combinations');\n      }\n\n      max = n.minus(k);\n      if (k.lt(max)) max = k;\n      result = one;\n\n      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {\n        result = result.times(max.plus(i)).dividedBy(i);\n      }\n\n      return result;\n    } // TODO: implement support for collection in combinations\n\n  });\n  combinations.toTex = {\n    2: \"\\\\binom{${args[0]}}{${args[1]}}\"\n  };\n  return combinations;\n}\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n\nexports.name = 'combinations';\nexports.factory = factory;"],"sourceRoot":""}