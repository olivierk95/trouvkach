{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/derivative.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/lsolve.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/lup.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/lusolve.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/simplify.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/rationalize.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/slu.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/usolve.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/algebra/qr.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/abs.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/add.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/cbrt.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/ceil.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/cube.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/divide.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/dotDivide.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/dotMultiply.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/dotPow.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/exp.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/expm.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/expm1.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/fix.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/floor.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/gcd.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/hypot.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/lcm.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/log.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/log2.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/log1p.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/log10.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/mod.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/multiply.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/norm.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/nthRoot.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/nthRoots.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/pow.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/round.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/sign.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/sqrt.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/sqrtm.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/square.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/subtract.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/unaryMinus.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/unaryPlus.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/arithmetic/xgcd.js"],"names":["module","exports","name","category","syntax","description","examples","seealso"],"mappings":"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","file":"js/06f7a37f6691a6b3386c.js","sourcesContent":["\"use strict\";\n\nmodule.exports = {\n  'name': 'derivative',\n  'category': 'Algebra',\n  'syntax': ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],\n  'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',\n  'examples': ['derivative(\"2x^3\", \"x\")', 'derivative(\"2x^3\", \"x\", {simplify: false})', 'derivative(\"2x^2 + 3x + 4\", \"x\")', 'derivative(\"sin(2x)\", \"x\")', 'f = parse(\"x^2 + x\")', 'x = parse(\"x\")', 'df = derivative(f, x)', 'df.eval({x: 3})'],\n  'seealso': ['simplify', 'parse', 'eval']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'lsolve',\n  'category': 'Algebra',\n  'syntax': ['x=lsolve(L, b)'],\n  'description': 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',\n  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],\n  'seealso': ['lup', 'lusolve', 'usolve', 'matrix', 'sparse']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'lup',\n  'category': 'Algebra',\n  'syntax': ['lup(m)'],\n  'description': 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',\n  'examples': ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],\n  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'lusolve',\n  'category': 'Algebra',\n  'syntax': ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],\n  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',\n  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],\n  'seealso': ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'simplify',\n  'category': 'Algebra',\n  'syntax': ['simplify(expr)', 'simplify(expr, rules)'],\n  'description': 'Simplify an expression tree.',\n  'examples': ['simplify(\"3 + 2 / 4\")', 'simplify(\"2x + x\")', 'f = parse(\"x * (x + 2 + x)\")', 'simplified = simplify(f)', 'simplified.eval({x: 2})'],\n  'seealso': ['derivative', 'parse', 'eval']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'rationalize',\n  'category': 'Algebra',\n  'syntax': ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],\n  'description': 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',\n  'examples': ['rationalize(\"2x/y - y/(x+1)\")', 'rationalize(\"2x/y - y/(x+1)\", true)'],\n  'seealso': ['simplify']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'slu',\n  'category': 'Algebra',\n  'syntax': ['slu(A, order, threshold)'],\n  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',\n  'examples': ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],\n  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'usolve',\n  'category': 'Algebra',\n  'syntax': ['x=usolve(U, b)'],\n  'description': 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',\n  'examples': ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],\n  'seealso': ['lup', 'lusolve', 'lsolve', 'matrix', 'sparse']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'qr',\n  'category': 'Algebra',\n  'syntax': ['qr(A)'],\n  'description': 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',\n  'examples': ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],\n  'seealso': ['lup', 'slu', 'matrix']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'abs',\n  'category': 'Arithmetic',\n  'syntax': ['abs(x)'],\n  'description': 'Compute the absolute value.',\n  'examples': ['abs(3.5)', 'abs(-4.2)'],\n  'seealso': ['sign']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'add',\n  'category': 'Operators',\n  'syntax': ['x + y', 'add(x, y)'],\n  'description': 'Add two values.',\n  'examples': ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '\"2.3\" + \"4\"'],\n  'seealso': ['subtract']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'cbrt',\n  'category': 'Arithmetic',\n  'syntax': ['cbrt(x)', 'cbrt(x, allRoots)'],\n  'description': 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',\n  'examples': ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],\n  'seealso': ['square', 'sqrt', 'cube', 'multiply']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'ceil',\n  'category': 'Arithmetic',\n  'syntax': ['ceil(x)'],\n  'description': 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',\n  'examples': ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],\n  'seealso': ['floor', 'fix', 'round']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'cube',\n  'category': 'Arithmetic',\n  'syntax': ['cube(x)'],\n  'description': 'Compute the cube of a value. The cube of x is x * x * x.',\n  'examples': ['cube(2)', '2^3', '2 * 2 * 2'],\n  'seealso': ['multiply', 'square', 'pow']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'divide',\n  'category': 'Operators',\n  'syntax': ['x / y', 'divide(x, y)'],\n  'description': 'Divide two values.',\n  'examples': ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],\n  'seealso': ['multiply']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'dotDivide',\n  'category': 'Operators',\n  'syntax': ['x ./ y', 'dotDivide(x, y)'],\n  'description': 'Divide two values element wise.',\n  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],\n  'seealso': ['multiply', 'dotMultiply', 'divide']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'dotMultiply',\n  'category': 'Operators',\n  'syntax': ['x .* y', 'dotMultiply(x, y)'],\n  'description': 'Multiply two values element wise.',\n  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],\n  'seealso': ['multiply', 'divide', 'dotDivide']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'dotpow',\n  'category': 'Operators',\n  'syntax': ['x .^ y', 'dotpow(x, y)'],\n  'description': 'Calculates the power of x to y element wise.',\n  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],\n  'seealso': ['pow']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'exp',\n  'category': 'Arithmetic',\n  'syntax': ['exp(x)'],\n  'description': 'Calculate the exponent of a value.',\n  'examples': ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\\'s formula'],\n  'seealso': ['expm', 'expm1', 'pow', 'log']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'expm',\n  'category': 'Arithmetic',\n  'syntax': ['exp(x)'],\n  'description': 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',\n  'examples': ['expm([[0,2],[0,0]])'],\n  'seealso': ['exp']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'expm1',\n  'category': 'Arithmetic',\n  'syntax': ['expm1(x)'],\n  'description': 'Calculate the value of subtracting 1 from the exponential value.',\n  'examples': ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],\n  'seealso': ['exp', 'pow', 'log']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'fix',\n  'category': 'Arithmetic',\n  'syntax': ['fix(x)'],\n  'description': 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',\n  'examples': ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],\n  'seealso': ['ceil', 'floor', 'round']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'floor',\n  'category': 'Arithmetic',\n  'syntax': ['floor(x)'],\n  'description': 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',\n  'examples': ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],\n  'seealso': ['ceil', 'fix', 'round']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'gcd',\n  'category': 'Arithmetic',\n  'syntax': ['gcd(a, b)', 'gcd(a, b, c, ...)'],\n  'description': 'Compute the greatest common divisor.',\n  'examples': ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],\n  'seealso': ['lcm', 'xgcd']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'hypot',\n  'category': 'Arithmetic',\n  'syntax': ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],\n  'description': 'Calculate the hypotenusa of a list with values. ',\n  'examples': ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],\n  'seealso': ['abs', 'norm']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'lcm',\n  'category': 'Arithmetic',\n  'syntax': ['lcm(x, y)'],\n  'description': 'Compute the least common multiple.',\n  'examples': ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],\n  'seealso': ['gcd']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'log',\n  'category': 'Arithmetic',\n  'syntax': ['log(x)', 'log(x, base)'],\n  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',\n  'examples': ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],\n  'seealso': ['exp', 'log1p', 'log2', 'log10']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'log2',\n  'category': 'Arithmetic',\n  'syntax': ['log2(x)'],\n  'description': 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',\n  'examples': ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],\n  'seealso': ['exp', 'log1p', 'log', 'log10']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'log1p',\n  'category': 'Arithmetic',\n  'syntax': ['log1p(x)', 'log1p(x, base)'],\n  'description': 'Calculate the logarithm of a `value+1`',\n  'examples': ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],\n  'seealso': ['exp', 'log', 'log2', 'log10']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'log10',\n  'category': 'Arithmetic',\n  'syntax': ['log10(x)'],\n  'description': 'Compute the 10-base logarithm of a value.',\n  'examples': ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],\n  'seealso': ['exp', 'log']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'mod',\n  'category': 'Operators',\n  'syntax': ['x % y', 'x mod y', 'mod(x, y)'],\n  'description': 'Calculates the modulus, the remainder of an integer division.',\n  'examples': ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],\n  'seealso': ['divide']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'multiply',\n  'category': 'Operators',\n  'syntax': ['x * y', 'multiply(x, y)'],\n  'description': 'multiply two values.',\n  'examples': ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],\n  'seealso': ['divide']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'norm',\n  'category': 'Arithmetic',\n  'syntax': ['norm(x)', 'norm(x, p)'],\n  'description': 'Calculate the norm of a number, vector or matrix.',\n  'examples': ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], \"inf\")', 'norm([[1, 2], [3, 4]], \"fro\")']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'nthRoot',\n  'category': 'Arithmetic',\n  'syntax': ['nthRoot(a)', 'nthRoot(a, root)'],\n  'description': 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation \"x^root = A\".',\n  'examples': ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],\n  'seealso': ['nthRoots', 'pow', 'sqrt']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'nthRoots',\n  'category': 'Arithmetic',\n  'syntax': ['nthRoots(A)', 'nthRoots(A, root)'],\n  'description': '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation \"x^root = A\". ' + 'This function returns an array of complex values.',\n  'examples': ['nthRoots(1)', 'nthRoots(1, 3)'],\n  'seealso': ['sqrt', 'pow', 'nthRoot']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'pow',\n  'category': 'Operators',\n  'syntax': ['x ^ y', 'pow(x, y)'],\n  'description': 'Calculates the power of x to y, x^y.',\n  'examples': ['2^3', '2*2*2', '1 + e ^ (pi * i)'],\n  'seealso': ['multiply', 'nthRoot', 'nthRoots', 'sqrt']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'round',\n  'category': 'Arithmetic',\n  'syntax': ['round(x)', 'round(x, n)'],\n  'description': 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',\n  'examples': ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],\n  'seealso': ['ceil', 'floor', 'fix']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'sign',\n  'category': 'Arithmetic',\n  'syntax': ['sign(x)'],\n  'description': 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',\n  'examples': ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],\n  'seealso': ['abs']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'sqrt',\n  'category': 'Arithmetic',\n  'syntax': ['sqrt(x)'],\n  'description': 'Compute the square root value. If x = y * y, then y is the square root of x.',\n  'examples': ['sqrt(25)', '5 * 5', 'sqrt(-1)'],\n  'seealso': ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'sqrtm',\n  'category': 'Arithmetic',\n  'syntax': ['sqrtm(x)'],\n  'description': 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',\n  'examples': ['sqrtm([[1, 2], [3, 4]])'],\n  'seealso': ['sqrt', 'abs', 'square', 'multiply']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'square',\n  'category': 'Arithmetic',\n  'syntax': ['square(x)'],\n  'description': 'Compute the square of a value. The square of x is x * x.',\n  'examples': ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],\n  'seealso': ['multiply', 'pow', 'sqrt', 'cube']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'subtract',\n  'category': 'Operators',\n  'syntax': ['x - y', 'subtract(x, y)'],\n  'description': 'subtract two values.',\n  'examples': ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],\n  'seealso': ['add']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'unaryMinus',\n  'category': 'Operators',\n  'syntax': ['-x', 'unaryMinus(x)'],\n  'description': 'Inverse the sign of a value. Converts booleans and strings to numbers.',\n  'examples': ['-4.5', '-(-5.6)', '-\"22\"'],\n  'seealso': ['add', 'subtract', 'unaryPlus']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'unaryPlus',\n  'category': 'Operators',\n  'syntax': ['+x', 'unaryPlus(x)'],\n  'description': 'Converts booleans and strings to numbers.',\n  'examples': ['+true', '+\"2\"'],\n  'seealso': ['add', 'subtract', 'unaryMinus']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'xgcd',\n  'category': 'Arithmetic',\n  'syntax': ['xgcd(a, b)'],\n  'description': 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',\n  'examples': ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],\n  'seealso': ['gcd', 'lcm']\n};"],"sourceRoot":""}