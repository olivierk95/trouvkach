{"version":3,"sources":["webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/index.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/cos.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/cosh.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/cot.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/coth.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/csc.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/csch.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/sec.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/sech.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/sin.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/sinh.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/tan.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/trigonometry/tanh.js"],"names":["module","exports","__webpack_require__","deepMap","name","factory","type","config","load","typed","cos","number","Math","Complex","x","BigNumber","Unit","hasBase","BASE_UNITS","ANGLE","TypeError","value","Array | Matrix","toTex","1","_cosh","cosh","exp","cot","tan","div","_coth","e","coth","tanh","csc","sin","sign","_csch","Number","POSITIVE_INFINITY","abs","csch","sinh","sec","_sech","sech","_sinh","_tanh"],"mappings":"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","file":"js/c385c5f3db78f9d55c05.js","sourcesContent":["'use strict';\n\nmodule.exports = [require('./acos'), require('./acosh'), require('./acot'), require('./acoth'), require('./acsc'), require('./acsch'), require('./asec'), require('./asech'), require('./asin'), require('./asinh'), require('./atan'), require('./atan2'), require('./atanh'), require('./cos'), require('./cosh'), require('./cot'), require('./coth'), require('./csc'), require('./csch'), require('./sec'), require('./sech'), require('./sin'), require('./sinh'), require('./tan'), require('./tanh')];","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2)                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x\n   */\n  var cos = typed('cos', {\n    'number': Math.cos,\n    'Complex': function Complex(x) {\n      return x.cos();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.cos();\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cos is no angle');\n      }\n\n      return cos(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, cos);\n    }\n  });\n  cos.toTex = {\n    1: \"\\\\cos\\\\left(${args[0]}\\\\right)\"\n  };\n  return cos;\n}\n\nexports.name = 'cos';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the hyperbolic cosine of a value,\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cosh(x)\n   *\n   * Examples:\n   *\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\n   *\n   * See also:\n   *\n   *    sinh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x\n   */\n  var cosh = typed('cosh', {\n    'number': _cosh,\n    'Complex': function Complex(x) {\n      return x.cosh();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.cosh();\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cosh is no angle');\n      }\n\n      return cosh(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, cosh);\n    }\n  });\n  cosh.toTex = {\n    1: \"\\\\cosh\\\\left(${args[0]}\\\\right)\"\n  };\n  return cosh;\n}\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n * @private\n */\n\n\nvar _cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n\nexports.name = 'cosh';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  var cot = typed('cot', {\n    'number': function number(x) {\n      return 1 / Math.tan(x);\n    },\n    'Complex': function Complex(x) {\n      return x.cot();\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.BigNumber(1).div(x.tan());\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cot is no angle');\n      }\n\n      return cot(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, cot);\n    }\n  });\n  cot.toTex = {\n    1: \"\\\\cot\\\\left(${args[0]}\\\\right)\"\n  };\n  return cot;\n}\n\nexports.name = 'cot';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the hyperbolic cotangent of a value,\n   * defined as `coth(x) = 1 / tanh(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.coth(x)\n   *\n   * Examples:\n   *\n   *    // coth(x) = 1 / tanh(x)\n   *    math.coth(2)         // returns 1.0373147207275482\n   *    1 / math.tanh(2)     // returns 1.0373147207275482\n   *\n   * See also:\n   *\n   *    sinh, tanh, cosh\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x\n   */\n  var coth = typed('coth', {\n    'number': _coth,\n    'Complex': function Complex(x) {\n      return x.coth();\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.BigNumber(1).div(x.tanh());\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function coth is no angle');\n      }\n\n      return coth(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, coth);\n    }\n  });\n  coth.toTex = {\n    1: \"\\\\coth\\\\left(${args[0]}\\\\right)\"\n  };\n  return coth;\n}\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n * @private\n */\n\n\nfunction _coth(x) {\n  var e = Math.exp(2 * x);\n  return (e + 1) / (e - 1);\n}\n\nexports.name = 'coth';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.csc(x)\n   *\n   * Examples:\n   *\n   *    math.csc(2)      // returns number 1.099750170294617\n   *    1 / math.sin(2)  // returns number 1.099750170294617\n   *\n   * See also:\n   *\n   *    sin, sec, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cosecant of x\n   */\n  var csc = typed('csc', {\n    'number': function number(x) {\n      return 1 / Math.sin(x);\n    },\n    'Complex': function Complex(x) {\n      return x.csc();\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.BigNumber(1).div(x.sin());\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function csc is no angle');\n      }\n\n      return csc(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, csc);\n    }\n  });\n  csc.toTex = {\n    1: \"\\\\csc\\\\left(${args[0]}\\\\right)\"\n  };\n  return csc;\n}\n\nexports.name = 'csc';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar sign = require('../../utils/number').sign;\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the hyperbolic cosecant of a value,\n   * defined as `csch(x) = 1 / sinh(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.csch(x)\n   *\n   * Examples:\n   *\n   *    // csch(x) = 1/ sinh(x)\n   *    math.csch(0.5)       // returns 1.9190347513349437\n   *    1 / math.sinh(0.5)   // returns 1.9190347513349437\n   *\n   * See also:\n   *\n   *    sinh, sech, coth\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x\n   */\n  var csch = typed('csch', {\n    'number': _csch,\n    'Complex': function Complex(x) {\n      return x.csch();\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.BigNumber(1).div(x.sinh());\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function csch is no angle');\n      }\n\n      return csch(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, csch);\n    }\n  });\n  csch.toTex = {\n    1: \"\\\\mathrm{csch}\\\\left(${args[0]}\\\\right)\"\n  };\n  return csch;\n}\n/**\n * Calculate the hyperbolic cosecant of a number\n * @param {number} x\n * @returns {number}\n * @private\n */\n\n\nfunction _csch(x) {\n  // consider values close to zero (+/-)\n  if (x === 0) {\n    return Number.POSITIVE_INFINITY;\n  } else {\n    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);\n  }\n}\n\nexports.name = 'csch';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Secant of x\n   */\n  var sec = typed('sec', {\n    'number': function number(x) {\n      return 1 / Math.cos(x);\n    },\n    'Complex': function Complex(x) {\n      return x.sec();\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.BigNumber(1).div(x.cos());\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sec is no angle');\n      }\n\n      return sec(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, sec);\n    }\n  });\n  sec.toTex = {\n    1: \"\\\\sec\\\\left(${args[0]}\\\\right)\"\n  };\n  return sec;\n}\n\nexports.name = 'sec';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the hyperbolic secant of a value,\n   * defined as `sech(x) = 1 / cosh(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sech(x)\n   *\n   * Examples:\n   *\n   *    // sech(x) = 1/ cosh(x)\n   *    math.sech(0.5)       // returns 0.886818883970074\n   *    1 / math.cosh(0.5)   // returns 0.886818883970074\n   *\n   * See also:\n   *\n   *    cosh, csch, coth\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x\n   */\n  var sech = typed('sech', {\n    'number': _sech,\n    'Complex': function Complex(x) {\n      return x.sech();\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.BigNumber(1).div(x.cosh());\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sech is no angle');\n      }\n\n      return sech(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, sech);\n    }\n  });\n  sech.toTex = {\n    1: \"\\\\mathrm{sech}\\\\left(${args[0]}\\\\right)\"\n  };\n  return sech;\n}\n/**\n * Calculate the hyperbolic secant of a number\n * @param {number} x\n * @returns {number}\n * @private\n */\n\n\nfunction _sech(x) {\n  return 2 / (Math.exp(x) + Math.exp(-x));\n}\n\nexports.name = 'sech';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the sine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sin(x)\n   *\n   * Examples:\n   *\n   *    math.sin(2)                      // returns number 0.9092974268256813\n   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475\n   *    math.sin(math.unit(90, 'deg'))   // returns number 1\n   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x\n   */\n  var sin = typed('sin', {\n    'number': Math.sin,\n    'Complex': function Complex(x) {\n      return x.sin();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.sin();\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sin is no angle');\n      }\n\n      return sin(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sin(0) = 0\n      return deepMap(x, sin, true);\n    }\n  });\n  sin.toTex = {\n    1: \"\\\\sin\\\\left(${args[0]}\\\\right)\"\n  };\n  return sin;\n}\n\nexports.name = 'sin';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the hyperbolic sine of a value,\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sinh(x)\n   *\n   * Examples:\n   *\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\n   *\n   * See also:\n   *\n   *    cosh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x\n   */\n  var sinh = typed('sinh', {\n    'number': _sinh,\n    'Complex': function Complex(x) {\n      return x.sinh();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.sinh();\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sinh is no angle');\n      }\n\n      return sinh(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sinh(0) = 0\n      return deepMap(x, sinh, true);\n    }\n  });\n  sinh.toTex = {\n    1: \"\\\\sinh\\\\left(${args[0]}\\\\right)\"\n  };\n  return sinh;\n}\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n * @private\n */\n\n\nvar _sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n\nexports.name = 'sinh';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.tan(x)\n   *\n   * Examples:\n   *\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\n   *    math.tan(math.pi / 4)            // returns number 1\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\n   *\n   * See also:\n   *\n   *    atan, sin, cos\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x\n   */\n  var tan = typed('tan', {\n    'number': Math.tan,\n    'Complex': function Complex(x) {\n      return x.tan();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.tan();\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function tan is no angle');\n      }\n\n      return tan(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since tan(0) = 0\n      return deepMap(x, tan, true);\n    }\n  });\n  tan.toTex = {\n    1: \"\\\\tan\\\\left(${args[0]}\\\\right)\"\n  };\n  return tan;\n}\n\nexports.name = 'tan';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the hyperbolic tangent of a value,\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.tanh(x)\n   *\n   * Examples:\n   *\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n   *    math.tanh(0.5)                   // returns 0.46211715726000974\n   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974\n   *    1 / math.coth(0.5)               // returns 0.46211715726000974\n   *\n   * See also:\n   *\n   *    sinh, cosh, coth\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x\n   */\n  var tanh = typed('tanh', {\n    'number': _tanh,\n    'Complex': function Complex(x) {\n      return x.tanh();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.tanh();\n    },\n    'Unit': function Unit(x) {\n      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function tanh is no angle');\n      }\n\n      return tanh(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since tanh(0) = 0\n      return deepMap(x, tanh, true);\n    }\n  });\n  tanh.toTex = {\n    1: \"\\\\tanh\\\\left(${args[0]}\\\\right)\"\n  };\n  return tanh;\n}\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n * @private\n */\n\n\nvar _tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n\nexports.name = 'tanh';\nexports.factory = factory;"],"sourceRoot":""}