{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/type/matrix/utils/algorithm12.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/type/matrix/utils/algorithm11.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/type/matrix/utils/algorithm10.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/type/matrix/utils/algorithm14.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/type/matrix/utils/algorithm13.js"],"names":["exports","name","factory","type","config","load","typed","DenseMatrix","s","b","callback","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","dt","rows","columns","cf","convert","find","cdata","c","data","size","datatype","x","w","j","mark","k0","k1","k","r","i","equalScalar","__webpack_require__","SparseMatrix","eq","zero","cvalues","cindex","cptr","values","index","ptr","length","v","push","clone","a","adata","_data","_iterate","f","level","n","av","bv","cv","DimensionError","bdata","bsize","bdt","csize","RangeError"],"mappings":"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","file":"js/4b68436849928a195856.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm12 = function algorithm12(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  return algorithm12;\n}\n\nexports.name = 'algorithm12';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm11 = function algorithm11(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm11;\n}\n\nexports.name = 'algorithm11';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  var algorithm10 = function algorithm10(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cdata = []; // matrix\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  return algorithm10;\n}\n\nexports.name = 'algorithm10';\nexports.factory = factory;","'use strict';\n\nvar clone = require('../../../utils/object').clone;\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n\n  var algorithm14 = function algorithm14(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  }; // recursive function\n\n\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n\n    return cv;\n  }\n\n  return algorithm14;\n}\n\nexports.name = 'algorithm14';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n\n  var algorithm13 = function algorithm13(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b arrays\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // c arrays\n\n    var csize = []; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // validate each one of the dimension sizes\n\n\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      } // update dimension in c\n\n\n      csize[s] = asize[s];\n    } // datatype\n\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix\n\n    return new DenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  }; // recursive function\n\n\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n\n    return cv;\n  }\n\n  return algorithm13;\n}\n\nexports.name = 'algorithm13';\nexports.factory = factory;"],"sourceRoot":""}