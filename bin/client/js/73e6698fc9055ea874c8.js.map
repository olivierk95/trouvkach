{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/divideScalar.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/dotDivide.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/dotMultiply.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/dotPow.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/exp.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/expm1.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/divide.js"],"names":["exports","factory","type","config","load","typed","numeric","__webpack_require__","getTypeOf","divideScalar","number, number","x","y","Complex, Complex","div","BigNumber, BigNumber","Fraction, Fraction","Unit, number | Fraction | BigNumber","res","clone","one","value","_normalize","number | Fraction | BigNumber, Unit","pow","Unit, Unit","divide","name","matrix","latex","algorithm02","algorithm03","algorithm07","algorithm11","algorithm12","algorithm13","algorithm14","dotDivide","any, any","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","valueOf","Array, Matrix","Matrix, Array","SparseMatrix, any","DenseMatrix, any","any, SparseMatrix","any, DenseMatrix","Array, any","any, Array","toTex","2","concat","operators","multiplyScalar","algorithm09","dotMultiply","dotPow","deepMap","exp","number","Math","Complex","BigNumber","Array | Matrix","1","expm1","r","re","cos","im","sin","minus","extend","multiply","inv","Array | Matrix, Array | Matrix","any, Array | Matrix","signatures"],"mappings":"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","file":"js/73e6698fc9055ea874c8.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load, typed) {\n  var numeric = load(require('../../type/numeric'));\n  var getTypeOf = load(require('../../function/utils/typeof'));\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`\n   * @private\n   */\n\n  var divideScalar = typed('divide', {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {\n      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, getTypeOf(y));\n      res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {\n      var res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      var one = numeric(1, getTypeOf(x));\n      res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.divide(y);\n    }\n  });\n  return divideScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var divideScalar = load(require('./divideScalar'));\n\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4)   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n\n  var dotDivide = typed('dotDivide', {\n    'any, any': divideScalar,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, divideScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, divideScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, divideScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, divideScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return dotDivide(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return dotDivide(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return dotDivide(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, divideScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, divideScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, divideScalar, true).valueOf();\n    }\n  });\n  dotDivide.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['dotDivide'], \"${args[1]}\\\\right)\")\n  };\n  return dotDivide;\n}\n\nexports.name = 'dotDivide';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var multiplyScalar = load(require('./multiplyScalar'));\n\n  var latex = require('../../utils/latex');\n\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Multiply two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotMultiply(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotMultiply(2, 4) // returns 8\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]\n   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]\n   *\n   * See also:\n   *\n   *    multiply, divide, dotDivide\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n   */\n\n  var dotMultiply = typed('dotMultiply', {\n    'any, any': multiplyScalar,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm09(x, y, multiplyScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, multiplyScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, multiplyScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return dotMultiply(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return dotMultiply(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return dotMultiply(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    }\n  });\n  dotMultiply.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['dotMultiply'], \"${args[1]}\\\\right)\")\n  };\n  return dotMultiply;\n}\n\nexports.name = 'dotMultiply';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var pow = load(require('./pow'));\n\n  var latex = require('../../utils/latex');\n\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3)            // returns number 8\n   *\n   *    const a = [[1, 2], [4, 3]]\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n\n  var dotPow = typed('dotPow', {\n    'any, any': pow,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, pow, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, pow, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, pow, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, pow);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return dotPow(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return dotPow(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return dotPow(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, dotPow, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, dotPow, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, dotPow, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, dotPow, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, dotPow, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, dotPow, true).valueOf();\n    }\n  });\n  dotPow.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['dotPow'], \"${args[1]}\\\\right)\")\n  };\n  return dotPow;\n}\n\nexports.name = 'dotPow';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the exponent of a value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2)                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\n   *    math.log(math.exp(2))        // returns number 2\n   *\n   *    math.exp([1, 2, 3])\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    expm1, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  var exp = typed('exp', {\n    'number': Math.exp,\n    'Complex': function Complex(x) {\n      return x.exp();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.exp();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n      return deepMap(x, exp);\n    }\n  });\n  exp.toTex = {\n    1: \"\\\\exp\\\\left(${args[0]}\\\\right)\"\n  };\n  return exp;\n}\n\nexports.name = 'exp';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Calculate the value of subtracting 1 from the exponential value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.expm1(x)\n   *\n   * Examples:\n   *\n   *    math.expm1(2)                      // returns number 6.38905609893065\n   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495\n   *    math.log(math.expm1(2) + 1)        // returns number 2\n   *\n   *    math.expm1([1, 2, 3])\n   *    // returns Array [\n   *    //   1.718281828459045,\n   *    //   6.3890560989306495,\n   *    //   19.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    exp, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n\n\n  var expm1 = typed('expm1', {\n    'number': Math.expm1 || _expm1,\n    'Complex': function Complex(x) {\n      var r = Math.exp(x.re);\n      return new type.Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.exp().minus(1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, expm1);\n    }\n  });\n  /**\n   * Calculates exponentiation minus 1.\n   * @param {number} x\n   * @return {number} res\n   * @private\n   */\n\n  function _expm1(x) {\n    return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n  }\n\n  expm1.toTex = \"\\\\left(e\".concat(latex.operators['pow'], \"{${args[0]}}-1\\\\right)\");\n  return expm1;\n}\n\nexports.name = 'expm1';\nexports.factory = factory;","'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory(type, config, load, typed) {\n  var divideScalar = load(require('./divideScalar'));\n  var multiply = load(require('./multiply'));\n  var inv = load(require('../matrix/inv'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  var divide = typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n  divide.toTex = {\n    2: \"\\\\frac{${args[0]}}{${args[1]}}\"\n  };\n  return divide;\n}\n\nexports.name = 'divide';\nexports.factory = factory;"],"sourceRoot":""}