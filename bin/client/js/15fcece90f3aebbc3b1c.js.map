{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/xgcd.js"],"names":["isInteger","__webpack_require__","exports","name","factory","type","config","load","typed","matrix","xgcd","number, number","a","b","t","q","r","res","x","lastx","y","lasty","Error","Math","floor","BigNumber, BigNumber","zero","BigNumber","one","isInt","isZero","div","mod","minus","times","lt","neg","toTex","undefined"],"mappings":"2FAEA,IAAAA,EAAgBC,EAAQ,GAAoBD,UAyI5CE,EAAAC,KAAA,OACAD,EAAAE,QAxIA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAoBN,EAAQ,IAyB5BS,EAAAF,EAAA,QACAG,iBAeA,SAAAC,EAAAC,GAEA,IAAAC,EAEAC,EAEAC,EAwBAC,EAtBAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA,IAAArB,EAAAY,KAAAZ,EAAAa,GACA,UAAAS,MAAA,uDAGA,KAAAT,GACAE,EAAAQ,KAAAC,MAAAZ,EAAAC,GACAG,EAAAJ,EAAAG,EAAAF,EACAC,EAAAI,EACAA,EAAAC,EAAAJ,EAAAG,EACAC,EAAAL,EACAA,EAAAM,EACAA,EAAAC,EAAAN,EAAAK,EACAC,EAAAP,EACAF,EAAAC,EACAA,EAAAG,EAWA,OALAC,EADAL,EAAA,EACA,EAAAA,GAAAO,GAAAE,GAEA,CAAAT,IAAAO,EAAA,EAAAE,GAGA,UAAAf,EAAAG,OAAAQ,EAAAR,EAAAQ,IApDAQ,uBA+DA,SAAAb,EAAAC,GAEA,IACAC,EAEAC,EAEAC,EAyBAC,EAxBAS,EAAA,IAAArB,EAAAsB,UAAA,GACAC,EAAA,IAAAvB,EAAAsB,UAAA,GACAT,EAAAQ,EACAP,EAAAS,EACAR,EAAAQ,EACAP,EAAAK,EAEA,IAAAd,EAAAiB,UAAAhB,EAAAgB,QACA,UAAAP,MAAA,uDAGA,MAAAT,EAAAiB,UACAf,EAAAH,EAAAmB,IAAAlB,GAAAW,QACAR,EAAAJ,EAAAoB,IAAAnB,GACAC,EAAAI,EACAA,EAAAC,EAAAc,MAAAlB,EAAAmB,MAAAhB,IACAC,EAAAL,EACAA,EAAAM,EACAA,EAAAC,EAAAY,MAAAlB,EAAAmB,MAAAd,IACAC,EAAAP,EACAF,EAAAC,EACAA,EAAAG,EAWA,OALAC,EADAL,EAAAuB,GAAAT,GACA,CAAAd,EAAAwB,MAAAjB,EAAAiB,MAAAf,EAAAe,OAEA,CAAAxB,IAAAkB,SAAA,EAAAX,EAAAE,GAGA,UAAAf,EAAAG,OAAAQ,EAAAR,EAAAQ,MAlGA,OAFAP,EAAA2B,WAAAC,EAEA5B","file":"js/15fcece90f3aebbc3b1c.js","sourcesContent":["'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Calculate the extended greatest common divisor for two values.\n   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n   *\n   * Syntax:\n   *\n   *    math.xgcd(a, b)\n   *\n   * Examples:\n   *\n   *    math.xgcd(8, 12)             // returns [4, -1, 1]\n   *    math.gcd(8, 12)              // returns 4\n   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]\n   *\n   * See also:\n   *\n   *    gcd, lcm\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`\n   *                              where `div = gcd(a, b)` and `a*m + b*n = div`\n   */\n\n  var xgcd = typed('xgcd', {\n    'number, number': _xgcd,\n    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction\n\n  });\n  xgcd.toTex = undefined; // use default template\n\n  return xgcd;\n  /**\n   * Calculate xgcd for two numbers\n   * @param {number} a\n   * @param {number} b\n   * @return {number} result\n   * @private\n   */\n\n  function _xgcd(a, b) {\n    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var t; // used to swap two variables\n\n    var q; // quotient\n\n    var r; // remainder\n\n    var x = 0;\n    var lastx = 1;\n    var y = 1;\n    var lasty = 0;\n\n    if (!isInteger(a) || !isInteger(b)) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (b) {\n      q = Math.floor(a / b);\n      r = a - q * b;\n      t = x;\n      x = lastx - q * x;\n      lastx = t;\n      t = y;\n      y = lasty - q * y;\n      lasty = t;\n      a = b;\n      b = r;\n    }\n\n    var res;\n\n    if (a < 0) {\n      res = [-a, -lastx, -lasty];\n    } else {\n      res = [a, a ? lastx : 0, lasty];\n    }\n\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n  /**\n   * Calculate xgcd for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @return {BigNumber[]} result\n   * @private\n   */\n\n\n  function _xgcdBigNumber(a, b) {\n    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n    var // used to swap two variables\n    t;\n    var // quotient\n    q;\n    var // remainder\n    r;\n    var zero = new type.BigNumber(0);\n    var one = new type.BigNumber(1);\n    var x = zero;\n    var lastx = one;\n    var y = one;\n    var lasty = zero;\n\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function xgcd must be integer numbers');\n    }\n\n    while (!b.isZero()) {\n      q = a.div(b).floor();\n      r = a.mod(b);\n      t = x;\n      x = lastx.minus(q.times(x));\n      lastx = t;\n      t = y;\n      y = lasty.minus(q.times(y));\n      lasty = t;\n      a = b;\n      b = r;\n    }\n\n    var res;\n\n    if (a.lt(zero)) {\n      res = [a.neg(), lastx.neg(), lasty.neg()];\n    } else {\n      res = [a, !a.isZero() ? lastx : 0, lasty];\n    }\n\n    return config.matrix === 'Array' ? res : matrix(res);\n  }\n}\n\nexports.name = 'xgcd';\nexports.factory = factory;"],"sourceRoot":""}