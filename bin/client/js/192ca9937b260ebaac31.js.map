{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/fix.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/floor.js"],"names":["deepMap","__webpack_require__","exports","name","factory","type","config","load","typed","fix","number","x","Math","floor","ceil","Complex","re","im","BigNumber","isNegative","Fraction","s","Array | Matrix","toTex","1"],"mappings":"4FAEA,IAAAA,EAAcC,EAAQ,GAsDtBC,EAAAC,KAAA,MACAD,EAAAE,QArDA,SAAAC,EAAAC,EAAAC,EAAAC,GA4BA,IAAAC,EAAAD,EAAA,OACAE,OAAA,SAAAC,GACA,OAAAA,EAAA,EAAAC,KAAAC,MAAAF,GAAAC,KAAAE,KAAAH,IAEAI,QAAA,SAAAJ,GACA,WAAAN,EAAAU,QAAAJ,EAAAK,GAAA,EAAAJ,KAAAC,MAAAF,EAAAK,IAAAJ,KAAAE,KAAAH,EAAAK,IAAAL,EAAAM,GAAA,EAAAL,KAAAC,MAAAF,EAAAM,IAAAL,KAAAE,KAAAH,EAAAM,MAEAC,UAAA,SAAAP,GACA,OAAAA,EAAAQ,aAAAR,EAAAG,OAAAH,EAAAE,SAEAO,SAAA,SAAAT,GACA,OAAAA,EAAAU,EAAA,EAAAV,EAAAG,OAAAH,EAAAE,SAEAS,iBAAA,SAAAX,GAEA,OAAAX,EAAAW,EAAAF,GAAA,MAMA,OAHAA,EAAAc,MAAA,CACAC,EAAA,8CAEAf,qCCnDA,IAAAT,EAAcC,EAAQ,GAoDtBC,EAAAC,KAAA,QACAD,EAAAE,QAnDA,SAAAC,EAAAC,EAAAC,EAAAC,GA4BA,IAAAK,EAAAL,EAAA,SACAE,OAAAE,KAAAC,MACAE,QAAA,SAAAJ,GACA,OAAAA,EAAAE,SAEAK,UAAA,SAAAP,GACA,OAAAA,EAAAE,SAEAO,SAAA,SAAAT,GACA,OAAAA,EAAAE,SAEAS,iBAAA,SAAAX,GAEA,OAAAX,EAAAW,EAAAE,GAAA,MAMA,OAHAA,EAAAU,MAAA,CACAC,EAAA,2CAEAX","file":"js/192ca9937b260ebaac31.js","sourcesContent":["'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards zero.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.fix(x)\n   *\n   * Examples:\n   *\n   *    math.fix(3.2)                // returns number 3\n   *    math.fix(3.8)                // returns number 3\n   *    math.fix(-4.2)               // returns number -4\n   *    math.fix(-4.7)               // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.fix(c)                  // returns Complex 3 - 2i\n   *\n   *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]\n   *\n   * See also:\n   *\n   *    ceil, floor, round\n   *\n   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value\n   */\n  var fix = typed('fix', {\n    'number': function number(x) {\n      return x > 0 ? Math.floor(x) : Math.ceil(x);\n    },\n    'Complex': function Complex(x) {\n      return new type.Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.isNegative() ? x.ceil() : x.floor();\n    },\n    'Fraction': function Fraction(x) {\n      return x.s < 0 ? x.ceil() : x.floor();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since fix(0) = 0\n      return deepMap(x, fix, true);\n    }\n  });\n  fix.toTex = {\n    1: \"\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)\"\n  };\n  return fix;\n}\n\nexports.name = 'fix';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.floor(c)                // returns Complex 3 - 3i\n   *\n   *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var floor = typed('floor', {\n    'number': Math.floor,\n    'Complex': function Complex(x) {\n      return x.floor();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.floor();\n    },\n    'Fraction': function Fraction(x) {\n      return x.floor();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, floor, true);\n    }\n  });\n  floor.toTex = {\n    1: \"\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor\"\n  };\n  return floor;\n}\n\nexports.name = 'floor';\nexports.factory = factory;"],"sourceRoot":""}