{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/bignumber/function/bignumber.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/bignumber/index.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/bignumber/BigNumber.js"],"names":["deepMap","__webpack_require__","exports","name","factory","type","config","load","typed","bignumber","","BigNumber","number","x","string","Fraction","n","div","d","times","s","null","Array | Matrix","toTex","0","1","module","Object","defineProperty","value","math","_decimal","default","clone","precision","prototype","isBigNumber","toJSON","mathjs","this","toString","fromJSON","json","on","curr","prev","path","obj","__esModule"],"mappings":"2FAEA,IAAAA,EAAcC,EAAQ,GA4DtBC,EAAAC,KAAA,YACAD,EAAAE,QA3DA,SAAAC,EAAAC,EAAAC,EAAAC,GA0BA,IAAAC,EAAAD,EAAA,aACAE,GAAA,WACA,WAAAL,EAAAM,UAAA,IAEAC,OAAA,SAAAC,GAEA,WAAAR,EAAAM,UAAAE,EAAA,KAEAC,OAAA,SAAAD,GACA,WAAAR,EAAAM,UAAAE,IAEAF,UAAA,SAAAE,GAEA,OAAAA,GAEAE,SAAA,SAAAF,GACA,WAAAR,EAAAM,UAAAE,EAAAG,GAAAC,IAAAJ,EAAAK,GAAAC,MAAAN,EAAAO,IAEAC,KAAA,SAAAR,GACA,WAAAR,EAAAM,UAAA,IAEAW,iBAAA,SAAAT,GACA,OAAAb,EAAAa,EAAAJ,MAOA,OAJAA,EAAAc,MAAA,CACAC,EAAA,IACAC,EAAA,6BAEAhB,qCCzDAiB,EAAAxB,QAAA,CACAD,EAAQ,KACRA,EAAQ,wCCFR0B,OAAAC,eAAA1B,EAAA,cACA2B,OAAA,IAEA3B,EAAAE,QAOA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAsB,GACA,IAAAnB,EAAAoB,EAAAC,QAAAC,MAAA,CACAC,UAAA5B,EAAA4B,YA0CA,OAnCAvB,EAAAwB,UAAA9B,KAAA,YACAM,EAAAwB,UAAAC,aAAA,EAQAzB,EAAAwB,UAAAE,OAAA,WACA,OACAC,OAAA,YACAT,MAAAU,KAAAC,aAWA7B,EAAA8B,SAAA,SAAAC,GACA,WAAA/B,EAAA+B,EAAAb,QAIAC,EAAAa,GAAA,kBAAAC,EAAAC,GACAD,EAAAV,YAAAW,EAAAX,WACAvB,EAAAL,OAAA,CACA4B,UAAAU,EAAAV,cAIAvB,GAlDAT,EAAA4B,KAAA5B,EAAA4C,KAAA5C,EAAAC,UAAA,EAEA,IAEA4C,EAFAhB,GAEAgB,EAFsC9C,EAAQ,OAER8C,EAAAC,WAAAD,EAAA,CAAuCf,QAAAe,GAkD7E7C,EAAAC,KADA,YAGAD,EAAA4C,KADA,OAIA5C,EAAA4B,MAFA","file":"js/b6e2e11d5aaf7b30fa02.js","sourcesContent":["'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  var bignumber = typed('bignumber', {\n    '': function _() {\n      return new type.BigNumber(0);\n    },\n    'number': function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new type.BigNumber(x + '');\n    },\n    'string': function string(x) {\n      return new type.BigNumber(x);\n    },\n    'BigNumber': function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    'Fraction': function Fraction(x) {\n      return new type.BigNumber(x.n).div(x.d).times(x.s);\n    },\n    'null': function _null(x) {\n      return new type.BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, bignumber);\n    }\n  });\n  bignumber.toTex = {\n    0: '0',\n    1: \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return bignumber;\n}\n\nexports.name = 'bignumber';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [// type\nrequire('./BigNumber'), // construction function\nrequire('./function/bignumber')];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.factory = factory;\nexports.math = exports.path = exports.name = void 0;\n\nvar _decimal = _interopRequireDefault(require(\"decimal.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction factory(type, config, load, typed, math) {\n  var BigNumber = _decimal.default.clone({\n    precision: config.precision\n  });\n  /**\n   * Attach type information\n   */\n\n\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n\n\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  }; // listen for changed in the configuration, automatically apply changed precision\n\n\n  math.on('config', function (curr, prev) {\n    if (curr.precision !== prev.precision) {\n      BigNumber.config({\n        precision: curr.precision\n      });\n    }\n  });\n  return BigNumber;\n}\n\nvar name = 'BigNumber';\nexports.name = name;\nvar path = 'type';\nexports.path = path;\nvar math = true; // request access to the math namespace\n\nexports.math = math;"],"sourceRoot":""}