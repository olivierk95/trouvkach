{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/geometry/index.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/geometry/intersect.js"],"names":["module","exports","__webpack_require__","name","factory","type","config","load","typed","abs","add","addScalar","matrix","multiply","multiplyScalar","divideScalar","subtract","smaller","equalScalar","intersect","Array, Array, Array","x","y","plane","_3d","TypeError","length","_isNumber","_4d","x1","y1","z1","x2","y2","z2","z","c","x1x","x2x","y1y","y2y","z1z","z2z","t","px","py","pz","_intersectLinePlane","Array, Array, Array, Array","w","_2d","p1a","p1b","p2a","p2b","o1","o2","d1","d2","det","epsilon","d20o11","d21o10","d20o21","d21o20","_intersect2d","x3","y3","z3","x4","y4","z4","d1343","_intersect3dHelper","d4321","d1321","d4343","d2121","ta","tb","pax","pay","paz","pbx","pby","pbz","Matrix, Matrix, Matrix","valueOf","Matrix, Matrix, Matrix, Matrix","a","isBigNumber","b","d","e","f","g","h","i","j","k","l","add1","add2","add3"],"mappings":"4FAEAA,EAAAC,QAAA,CAAkBC,EAAQ,KAAgBA,EAAQ,wCCmMlDD,EAAAE,KAAA,YACAF,EAAAG,QApMA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAiBL,EAAQ,KACzBQ,EAAAH,EAAiBL,EAAQ,KACzBS,EAAAJ,EAAuBL,EAAQ,KAC/BU,EAAAL,EAAoBL,EAAQ,IAC5BW,EAAAN,EAAsBL,EAAQ,KAC9BY,EAAAP,EAA4BL,EAAQ,KACpCa,EAAAR,EAA0BL,EAAQ,KAClCc,EAAAT,EAAsBL,EAAQ,KAC9Be,EAAAV,EAAqBL,EAAQ,KAC7BgB,EAAAX,EAAyBL,EAAQ,KA6BjCiB,EAAAX,EAAA,aACAY,sBAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,GACA,UAAAI,UAAA,kEAGA,IAAAD,EAAAF,GACA,UAAAG,UAAA,mEAGA,IAqEA,SAAAJ,GACA,WAAAA,EAAAK,QAAAC,EAAAN,EAAA,KAAAM,EAAAN,EAAA,KAAAM,EAAAN,EAAA,KAAAM,EAAAN,EAAA,IAtEAO,CAAAL,GACA,UAAAE,UAAA,mDAGA,OA2HA,SAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAb,EAAAC,EAAAa,EAAAC,GACA,IAAAC,EAAAvB,EAAAe,EAAAR,GACAiB,EAAAxB,EAAAkB,EAAAX,GACAkB,EAAAzB,EAAAgB,EAAAR,GACAkB,EAAA1B,EAAAmB,EAAAX,GACAmB,EAAA3B,EAAAiB,EAAAI,GACAO,EAAA5B,EAAAoB,EAAAC,GACAQ,EAAA5B,EAAAC,MAAAoB,EAAAC,GAAAE,GAAAE,GAAAzB,MAAAL,IAAA2B,EAAAE,GAAAE,GAAAL,GAAAE,GAAAE,IACAG,EAAAjC,EAAAkB,EAAAf,EAAA6B,EAAA3B,EAAAgB,EAAAH,KACAgB,EAAAlC,EAAAmB,EAAAhB,EAAA6B,EAAA3B,EAAAiB,EAAAH,KACAgB,EAAAnC,EAAAoB,EAAAjB,EAAA6B,EAAA3B,EAAAkB,EAAAH,KACA,OAAAa,EAAAC,EAAAC,GAtIAC,CAAA1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAyB,6BAAA,SAAAC,EAAA5B,EAAAC,EAAAa,GACA,OAAAc,EAAAvB,OAAA,CACA,IAAAwB,EAAAD,GACA,UAAAxB,UAAA,kEAGA,IAAAyB,EAAA7B,GACA,UAAAI,UAAA,mEAGA,IAAAyB,EAAA5B,GACA,UAAAG,UAAA,kEAGA,IAAAyB,EAAAf,GACA,UAAAV,UAAA,mEAGA,OAiDA,SAAA0B,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAJ,EACAK,EAAAH,EACAI,EAAAzC,EAAAuC,EAAAH,GACAM,EAAA1C,EAAAwC,EAAAF,GACAK,EAAA3C,EAAAF,EAAA2C,EAAA,GAAAC,EAAA,IAAA5C,EAAA4C,EAAA,GAAAD,EAAA,KAEA,GAAAxC,EAAAR,EAAAkD,GAAArD,EAAAsD,SACA,YAGA,IAAAC,EAAA/C,EAAA4C,EAAA,GAAAH,EAAA,IACAO,EAAAhD,EAAA4C,EAAA,GAAAH,EAAA,IACAQ,EAAAjD,EAAA4C,EAAA,GAAAF,EAAA,IACAQ,EAAAlD,EAAA4C,EAAA,GAAAF,EAAA,IACAb,EAAA5B,EAAAJ,EAAAK,IAAA6C,EAAAC,GAAAC,GAAAC,GAAAL,GACA,OAAAjD,EAAAG,EAAA4C,EAAAd,GAAAY,GAjEAU,CAAAhB,EAAA5B,EAAAC,EAAAa,GACO,OAAAc,EAAAvB,OAAA,CACP,IAAAF,EAAAyB,GACA,UAAAxB,UAAA,kEAGA,IAAAD,EAAAH,GACA,UAAAI,UAAA,mEAGA,IAAAD,EAAAF,GACA,UAAAG,UAAA,kEAGA,IAAAD,EAAAW,GACA,UAAAV,UAAA,mEAGA,OA0DAI,EA1DAoB,EAAA,GA0DAnB,EA1DAmB,EAAA,GA0DAlB,EA1DAkB,EAAA,GA0DAjB,EA1DAX,EAAA,GA0DAY,EA1DAZ,EAAA,GA0DAa,EA1DAb,EAAA,GA0DA6C,EA1DA5C,EAAA,GA0DA6C,EA1DA7C,EAAA,GA0DA8C,EA1DA9C,EAAA,GA0DA+C,EA1DAlC,EAAA,GA0DAmC,EA1DAnC,EAAA,GA0DAoC,EA1DApC,EAAA,GA2DAqC,EAAAC,EAAA5C,EAAAqC,EAAAG,EAAAH,EAAApC,EAAAqC,EAAAG,EAAAH,EAAApC,EAAAqC,EAAAG,EAAAH,GAEAM,EAAAD,EAAAJ,EAAAH,EAAAlC,EAAAH,EAAAyC,EAAAH,EAAAlC,EAAAH,EAAAyC,EAAAH,EAAAlC,EAAAH,GAEA4C,EAAAF,EAAA5C,EAAAqC,EAAAlC,EAAAH,EAAAC,EAAAqC,EAAAlC,EAAAH,EAAAC,EAAAqC,EAAAlC,EAAAH,GAEA6C,EAAAH,EAAAJ,EAAAH,EAAAG,EAAAH,EAAAI,EAAAH,EAAAG,EAAAH,EAAAI,EAAAH,EAAAG,EAAAH,GAEAS,EAAAJ,EAAAzC,EAAAH,EAAAG,EAAAH,EAAAI,EAAAH,EAAAG,EAAAH,EAAAI,EAAAH,EAAAG,EAAAH,GAEA+C,EAAA/D,EAAAC,EAAAF,EAAA0D,EAAAE,GAAA5D,EAAA6D,EAAAC,IAAA5D,EAAAF,EAAA+D,EAAAD,GAAA9D,EAAA4D,OACAK,EAAAhE,EAAAJ,EAAA6D,EAAA1D,EAAAgE,EAAAJ,IAAAE,GACAI,EAAArE,EAAAkB,EAAAf,EAAAgE,EAAA9D,EAAAgB,EAAAH,KACAoD,EAAAtE,EAAAmB,EAAAhB,EAAAgE,EAAA9D,EAAAiB,EAAAH,KACAoD,EAAAvE,EAAAoB,EAAAjB,EAAAgE,EAAA9D,EAAAkB,EAAAH,KACAoD,EAAAxE,EAAAuD,EAAApD,EAAAiE,EAAA/D,EAAAqD,EAAAH,KACAkB,EAAAzE,EAAAwD,EAAArD,EAAAiE,EAAA/D,EAAAsD,EAAAH,KACAkB,EAAA1E,EAAAyD,EAAAtD,EAAAiE,EAAA/D,EAAAuD,EAAAH,KAEAlD,EAAA8D,EAAAG,IAAAjE,EAAA+D,EAAAG,IAAAlE,EAAAgE,EAAAG,GACA,CAAAL,EAAAC,EAAAC,GAEA,KA/EA,UAAAzD,UAAA,uDAwDA,IAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAgC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAEAE,EAEAC,EAEAC,EAEAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAvEAC,yBAAA,SAAAjE,EAAAC,EAAAC,GACA,OAAAX,EAAAO,EAAAE,EAAAkE,UAAAjE,EAAAiE,UAAAhE,EAAAgE,aAEAC,iCAAA,SAAAvC,EAAA5B,EAAAC,EAAAa,GAEA,OAAAvB,EAAAO,EAAA8B,EAAAsC,UAAAlE,EAAAkE,UAAAjE,EAAAiE,UAAApD,EAAAoD,eAIA,SAAA5D,EAAA8D,GAEA,uBAAAA,GAAApF,EAAAqF,YAAAD,GAGA,SAAAvC,EAAA7B,GACA,WAAAA,EAAAK,QAAAC,EAAAN,EAAA,KAAAM,EAAAN,EAAA,IAGA,SAAAG,EAAAH,GACA,WAAAA,EAAAK,QAAAC,EAAAN,EAAA,KAAAM,EAAAN,EAAA,KAAAM,EAAAN,EAAA,IA0BA,SAAAoD,EAAAgB,EAAAE,EAAAvD,EAAAwD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAC,EAAAvF,EAAAE,EAAAyE,EAAAE,GAAA3E,EAAAoB,EAAAwD,IACAU,EAAAxF,EAAAE,EAAA6E,EAAAC,GAAA9E,EAAA+E,EAAAC,IACAO,EAAAzF,EAAAE,EAAAiF,EAAAC,GAAAlF,EAAAmF,EAAAC,IACA,OAAAzF,IAAA0F,EAAAC,GAAAC,GA8CA,OAAApF","file":"js/76565c28a2b1fa34f30b.js","sourcesContent":["'use strict';\n\nmodule.exports = [require('./intersect'), require('./distance')];","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var abs = load(require('../arithmetic/abs'));\n  var add = load(require('../arithmetic/add'));\n  var addScalar = load(require('../arithmetic/addScalar'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var multiplyScalar = load(require('../arithmetic/multiplyScalar'));\n  var divideScalar = load(require('../arithmetic/divideScalar'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var smaller = load(require('../relational/smaller'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR null if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n\n  var intersect = typed('intersect', {\n    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n\n      if (!_4d(plane)) {\n        throw new TypeError('Array with 4 numbers expected as third argument');\n      }\n\n      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n    },\n    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {\n      if (w.length === 2) {\n        if (!_2d(w)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n        }\n\n        return _intersect2d(w, x, y, z);\n      } else if (w.length === 3) {\n        if (!_3d(w)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n        }\n\n        if (!_3d(z)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n        }\n\n        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n      } else {\n        throw new TypeError('Arrays with two or thee dimensional points expected');\n      }\n    },\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));\n    }\n  });\n\n  function _isNumber(a) {\n    // intersect supports numbers and bignumbers\n    return typeof a === 'number' || type.isBigNumber(a);\n  }\n\n  function _2d(x) {\n    return x.length === 2 && _isNumber(x[0]) && _isNumber(x[1]);\n  }\n\n  function _3d(x) {\n    return x.length === 3 && _isNumber(x[0]) && _isNumber(x[1]) && _isNumber(x[2]);\n  }\n\n  function _4d(x) {\n    return x.length === 4 && _isNumber(x[0]) && _isNumber(x[1]) && _isNumber(x[2]) && _isNumber(x[3]);\n  }\n\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n\n    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n\n  return intersect;\n}\n\nexports.name = 'intersect';\nexports.factory = factory;"],"sourceRoot":""}