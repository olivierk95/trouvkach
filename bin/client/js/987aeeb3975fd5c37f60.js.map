{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/relational/compareText.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/relational/compareNatural.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/relational/deepEqual.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/relational/compare.js"],"names":["exports","name","factory","type","config","load","typed","matrix","__webpack_require__","_typeof","algorithm13","algorithm14","compareText","any, any","_compareText","DenseMatrix, DenseMatrix","x","y","Array, Array","valueOf","Array, Matrix","Matrix, Array","DenseMatrix, any","any, DenseMatrix","Array, any","any, Array","isString","TypeError","toTex","undefined","naturalSort","getTypeOf","compare","compareBooleans","signatures","compareNatural","c","typeX","typeY","toString","compareMatricesAndArrays","isSparseMatrix","compareArrays","toJSON","values","toArray","isDenseMatrix","data","Array","isArray","re","im","compareComplexNumbers","equalBase","value","formatUnits","keysX","Object","keys","keysY","sort","i","length","v","compareObjects","ii","Math","min","equal","deepEqual","_deepEqual","len","nearlyEqual","bigNearlyEqual","algorithm03","algorithm05","algorithm12","boolean, boolean","number, number","epsilon","BigNumber, BigNumber","eq","BigNumber","cmp","Fraction, Fraction","Fraction","Complex, Complex","Unit, Unit","Error","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","SparseMatrix, any","any, SparseMatrix"],"mappings":"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","file":"js/987aeeb3975fd5c37f60.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n\n  var _typeof = load(require('../utils/typeof'));\n\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  var compareText = typed('compareText', {\n    'any, any': _compareText,\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, _compareText);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return compareText(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return compareText(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return compareText(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, _compareText, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, _compareText, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _compareText, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _compareText, true).valueOf();\n    }\n  });\n  /**\n   * Compare two strings\n   * @param {string} x\n   * @param {string} y\n   * @returns {number}\n   * @private\n   */\n\n  function _compareText(x, y) {\n    // we don't want to convert numbers to string, only accept string input\n    if (!type.isString(x)) {\n      throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + _typeof(x) + ', index: 0)');\n    }\n\n    if (!type.isString(y)) {\n      throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + _typeof(y) + ', index: 1)');\n    }\n\n    return x === y ? 0 : x > y ? 1 : -1;\n  }\n\n  compareText.toTex = undefined; // use default template\n\n  return compareText;\n}\n\nexports.name = 'compareText';\nexports.factory = factory;","'use strict';\n\nvar naturalSort = require('javascript-natural-sort');\n\nfunction factory(type, config, load, typed) {\n  var getTypeOf = load(require('../utils/typeof'));\n  var compare = load(require('./compare'));\n  var compareBooleans = compare.signatures['boolean,boolean'];\n  /**\n   * Compare two values of any type in a deterministic, natural way.\n   *\n   * For numeric values, the function works the same as `math.compare`.\n   * For types of values that can't be compared mathematically,\n   * the function compares in a natural way.\n   *\n   * For numeric values, x and y are considered equal when the relative\n   * difference between x and y is smaller than the configured epsilon.\n   * The function cannot be used to compare values smaller than\n   * approximately 2.22e-16.\n   *\n   * For Complex numbers, first the real parts are compared. If equal,\n   * the imaginary parts are compared.\n   *\n   * Strings are compared with a natural sorting algorithm, which\n   * orders strings in a \"logic\" way following some heuristics.\n   * This differs from the function `compare`, which converts the string\n   * into a numeric value and compares that. The function `compareText`\n   * on the other hand compares text lexically.\n   *\n   * Arrays and Matrices are compared value by value until there is an\n   * unequal pair of values encountered. Objects are compared by sorted\n   * keys until the keys or their values are unequal.\n   *\n   * Syntax:\n   *\n   *    math.compareNatural(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareNatural(6, 1)              // returns 1\n   *    math.compareNatural(2, 3)              // returns -1\n   *    math.compareNatural(7, 7)              // returns 0\n   *\n   *    math.compareNatural('10', '2')         // returns 1\n   *    math.compareText('10', '2')            // returns -1\n   *    math.compare('10', '2')                // returns 1\n   *\n   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1\n   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1\n   *    math.compare('Answer: 10', 'Answer: 2')\n   *        // Error: Cannot convert \"Answer: 10\" to a number\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compareNatural(a, b)              // returns 1\n   *\n   *    const c = math.complex('2 + 3i')\n   *    const d = math.complex('2 + 4i')\n   *    math.compareNatural(c, d)              // returns -1\n   *\n   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1\n   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1\n   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1\n   *    math.compareNatural([1, 2], [1, 2])       // returns 0\n   *\n   *    math.compareNatural({a: 2}, {a: 4})       // returns -1\n   *\n   * See also:\n   *\n   *    compare, compareText\n   *\n   * @param  {*} x First value to compare\n   * @param  {*} y Second value to compare\n   * @return {number} Returns the result of the comparison:\n   *                  1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  var compareNatural = typed('compareNatural', {\n    'any, any': function anyAny(x, y) {\n      var typeX = getTypeOf(x);\n      var typeY = getTypeOf(y);\n      var c; // numeric types\n\n      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {\n        c = compare(x, y);\n\n        if (c.toString() !== '0') {\n          // c can be number, BigNumber, or Fraction\n          return c > 0 ? 1 : -1; // return a number\n        } else {\n          return naturalSort(typeX, typeY);\n        }\n      } // matrix types\n\n\n      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {\n        c = compareMatricesAndArrays(x, y);\n\n        if (c !== 0) {\n          return c;\n        } else {\n          return naturalSort(typeX, typeY);\n        }\n      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'\n\n\n      if (typeX !== typeY) {\n        return naturalSort(typeX, typeY);\n      }\n\n      if (typeX === 'Complex') {\n        return compareComplexNumbers(x, y);\n      }\n\n      if (typeX === 'Unit') {\n        if (x.equalBase(y)) {\n          return compareNatural(x.value, y.value);\n        } // compare by units\n\n\n        return compareArrays(x.formatUnits(), y.formatUnits());\n      }\n\n      if (typeX === 'boolean') {\n        return compareBooleans(x, y);\n      }\n\n      if (typeX === 'string') {\n        return naturalSort(x, y);\n      }\n\n      if (typeX === 'Object') {\n        return compareObjects(x, y);\n      }\n\n      if (typeX === 'null') {\n        return 0;\n      }\n\n      if (typeX === 'undefined') {\n        return 0;\n      } // this should not occur...\n\n\n      throw new TypeError('Unsupported type of value \"' + typeX + '\"');\n    }\n  });\n  compareNatural.toTex = undefined; // use default template\n\n  /**\n   * Compare mixed matrix/array types, by converting to same-shaped array.\n   * This comparator is non-deterministic regarding input types.\n   * @param {Array | SparseMatrix | DenseMatrix | *} x\n   * @param {Array | SparseMatrix | DenseMatrix | *} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n  function compareMatricesAndArrays(x, y) {\n    if (type.isSparseMatrix(x) && type.isSparseMatrix(y)) {\n      return compareArrays(x.toJSON().values, y.toJSON().values);\n    }\n\n    if (type.isSparseMatrix(x)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(x.toArray(), y);\n    }\n\n    if (type.isSparseMatrix(y)) {\n      // note: convert to array is expensive\n      return compareMatricesAndArrays(x, y.toArray());\n    } // convert DenseArray into Array\n\n\n    if (type.isDenseMatrix(x)) {\n      return compareMatricesAndArrays(x.toJSON().data, y);\n    }\n\n    if (type.isDenseMatrix(y)) {\n      return compareMatricesAndArrays(x, y.toJSON().data);\n    } // convert scalars to array\n\n\n    if (!Array.isArray(x)) {\n      return compareMatricesAndArrays([x], y);\n    }\n\n    if (!Array.isArray(y)) {\n      return compareMatricesAndArrays(x, [y]);\n    }\n\n    return compareArrays(x, y);\n  }\n  /**\n   * Compare two Arrays\n   *\n   * - First, compares value by value\n   * - Next, if all corresponding values are equal,\n   *   look at the length: longest array will be considered largest\n   *\n   * @param {Array} x\n   * @param {Array} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  function compareArrays(x, y) {\n    // compare each value\n    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n      var v = compareNatural(x[i], y[i]);\n\n      if (v !== 0) {\n        return v;\n      }\n    } // compare the size of the arrays\n\n\n    if (x.length > y.length) {\n      return 1;\n    }\n\n    if (x.length < y.length) {\n      return -1;\n    } // both Arrays have equal size and content\n\n\n    return 0;\n  }\n  /**\n   * Compare two objects\n   *\n   * - First, compare sorted property names\n   * - Next, compare the property values\n   *\n   * @param {Object} x\n   * @param {Object} y\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  function compareObjects(x, y) {\n    var keysX = Object.keys(x);\n    var keysY = Object.keys(y); // compare keys\n\n    keysX.sort(naturalSort);\n    keysY.sort(naturalSort);\n    var c = compareArrays(keysX, keysY);\n\n    if (c !== 0) {\n      return c;\n    } // compare values\n\n\n    for (var i = 0; i < keysX.length; i++) {\n      var v = compareNatural(x[keysX[i]], y[keysY[i]]);\n\n      if (v !== 0) {\n        return v;\n      }\n    }\n\n    return 0;\n  }\n\n  return compareNatural;\n}\n/**\n * Compare two complex numbers, `x` and `y`:\n *\n * - First, compare the real values of `x` and `y`\n * - If equal, compare the imaginary values of `x` and `y`\n *\n * @params {Complex} x\n * @params {Complex} y\n * @returns {number} Returns the comparison result: -1, 0, or 1\n */\n\n\nfunction compareComplexNumbers(x, y) {\n  if (x.re > y.re) {\n    return 1;\n  }\n\n  if (x.re < y.re) {\n    return -1;\n  }\n\n  if (x.im > y.im) {\n    return 1;\n  }\n\n  if (x.im < y.im) {\n    return -1;\n  }\n\n  return 0;\n}\n\nexports.name = 'compareNatural';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var equal = load(require('./equal'));\n  /**\n   * Test element wise whether two matrices are equal.\n   * The function accepts both matrices and scalar values.\n   *\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.deepEqual(x, y)\n   *\n   * Examples:\n   *\n   *    math.deepEqual(2, 4)   // returns false\n   *\n   *    a = [2, 5, 1]\n   *    b = [2, 7, 1]\n   *\n   *    math.deepEqual(a, b)   // returns false\n   *    math.equal(a, b)       // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    equal, unequal\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\n   */\n\n  var deepEqual = typed('deepEqual', {\n    'any, any': function anyAny(x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n  deepEqual.toTex = undefined; // use default template\n\n  return deepEqual;\n  /**\n   * Test whether two arrays have the same size and all elements are equal\n   * @param {Array | *} x\n   * @param {Array | *} y\n   * @return {boolean} Returns true if both arrays are deep equal\n   */\n\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n\n        if (len !== y.length) {\n          return false;\n        }\n\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (Array.isArray(y)) {\n        return false;\n      } else {\n        return equal(x, y);\n      }\n    }\n  }\n}\n\nexports.name = 'deepEqual';\nexports.factory = factory;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  var compare = typed('compare', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x === y || nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon) ? new type.BigNumber(0) : new type.BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new type.Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return compare(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, compare);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, compare, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, compare, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, compare);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return compare(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return compare(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return compare(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, compare, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, compare, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, compare, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, compare, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, compare, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, compare, true).valueOf();\n    }\n  });\n  compare.toTex = undefined; // use default template\n\n  return compare;\n}\n\nexports.name = 'compare';\nexports.factory = factory;"],"sourceRoot":""}