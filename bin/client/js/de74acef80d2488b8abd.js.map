{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/add.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/addScalar.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/abs.js"],"names":["extend","__webpack_require__","exports","name","factory","type","config","load","typed","matrix","addScalar","latex","algorithm01","algorithm04","algorithm10","algorithm13","algorithm14","add","DenseMatrix, DenseMatrix","x","y","DenseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","SparseMatrix, SparseMatrix","Array, Array","valueOf","Array, Matrix","Matrix, Array","DenseMatrix, any","SparseMatrix, any","any, DenseMatrix","any, SparseMatrix","Array, any","any, Array","any, any","any, any, ...any","rest","result","i","length","signatures","toTex","2","concat","operators","number, number","Complex, Complex","BigNumber, BigNumber","plus","Fraction, Fraction","Unit, Unit","value","undefined","Error","equalBase","res","clone","fixPrefix","deepMap","abs","number","Math","Complex","BigNumber","Fraction","Array | Matrix","Unit","1"],"mappings":"0FAEA,IAAAA,EAAaC,EAAQ,GAAoBD,OA+GzCE,EAAAC,KAAA,MACAD,EAAAE,QA9GA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAoBN,EAAQ,IAC5BS,EAAAH,EAAuBN,EAAQ,KAE/BU,EAAcV,EAAQ,GAEtBW,EAAAL,EAAyBN,EAAQ,KACjCY,EAAAN,EAAyBN,EAAQ,KACjCa,EAAAP,EAAyBN,EAAQ,KACjCc,EAAAR,EAAyBN,EAAQ,IACjCe,EAAAT,EAAyBN,EAAQ,IAoCjCgB,EAAAT,EAAA,MAAAR,EAAA,CAEAkB,2BAAA,SAAAC,EAAAC,GACA,OAAAL,EAAAI,EAAAC,EAAAV,IAEAW,4BAAA,SAAAF,EAAAC,GACA,OAAAR,EAAAO,EAAAC,EAAAV,GAAA,IAEAY,4BAAA,SAAAH,EAAAC,GACA,OAAAR,EAAAQ,EAAAD,EAAAT,GAAA,IAEAa,6BAAA,SAAAJ,EAAAC,GACA,OAAAP,EAAAM,EAAAC,EAAAV,IAEAc,eAAA,SAAAL,EAAAC,GAEA,OAAAH,EAAAR,EAAAU,GAAAV,EAAAW,IAAAK,WAEAC,gBAAA,SAAAP,EAAAC,GAEA,OAAAH,EAAAR,EAAAU,GAAAC,IAEAO,gBAAA,SAAAR,EAAAC,GAEA,OAAAH,EAAAE,EAAAV,EAAAW,KAEAQ,mBAAA,SAAAT,EAAAC,GACA,OAAAJ,EAAAG,EAAAC,EAAAV,GAAA,IAEAmB,oBAAA,SAAAV,EAAAC,GACA,OAAAN,EAAAK,EAAAC,EAAAV,GAAA,IAEAoB,mBAAA,SAAAX,EAAAC,GACA,OAAAJ,EAAAI,EAAAD,EAAAT,GAAA,IAEAqB,oBAAA,SAAAZ,EAAAC,GACA,OAAAN,EAAAM,EAAAD,EAAAT,GAAA,IAEAsB,aAAA,SAAAb,EAAAC,GAEA,OAAAJ,EAAAP,EAAAU,GAAAC,EAAAV,GAAA,GAAAe,WAEAQ,aAAA,SAAAd,EAAAC,GAEA,OAAAJ,EAAAP,EAAAW,GAAAD,EAAAT,GAAA,GAAAe,WAEAS,WAAAxB,EACAyB,mBAAA,SAAAhB,EAAAC,EAAAgB,GAGA,IAFA,IAAAC,EAAApB,EAAAE,EAAAC,GAEAkB,EAAA,EAAqBA,EAAAF,EAAAG,OAAiBD,IACtCD,EAAApB,EAAAoB,EAAAD,EAAAE,IAGA,OAAAD,IAEG3B,EAAA8B,aAIH,OAHAvB,EAAAwB,MAAA,CACAC,EAAA,oBAAyBC,OAAAhC,EAAAiC,UAAA,2BAEzB3B,oCCpEAf,EAAAE,QAxCA,SAAAC,EAAAC,EAAAC,EAAAC,GAcA,IAAAS,EAAAT,EAAA,OACAqC,iBAAA,SAAA1B,EAAAC,GACA,OAAAD,EAAAC,GAEA0B,mBAAA,SAAA3B,EAAAC,GACA,OAAAD,EAAAF,IAAAG,IAEA2B,uBAAA,SAAA5B,EAAAC,GACA,OAAAD,EAAA6B,KAAA5B,IAEA6B,qBAAA,SAAA9B,EAAAC,GACA,OAAAD,EAAAF,IAAAG,IAEA8B,aAAA,SAAA/B,EAAAC,GACA,UAAAD,EAAAgC,YAAAC,IAAAjC,EAAAgC,MAAA,UAAAE,MAAA,oDACA,UAAAjC,EAAA+B,YAAAC,IAAAhC,EAAA+B,MAAA,UAAAE,MAAA,oDACA,IAAAlC,EAAAmC,UAAAlC,GAAA,UAAAiC,MAAA,sBACA,IAAAE,EAAApC,EAAAqC,QAGA,OAFAD,EAAAJ,MAAAlC,EAAAsC,EAAAJ,MAAA/B,EAAA+B,OACAI,EAAAE,WAAA,EACAF,KAGA,OAAAtC,oCCrCA,IAAAyC,EAAczD,EAAQ,GAoDtBC,EAAAC,KAAA,MACAD,EAAAE,QAnDA,SAAAC,EAAAC,EAAAC,EAAAC,GAyBA,IAAAmD,EAAAnD,EAAA,OACAoD,OAAAC,KAAAF,IACAG,QAAA,SAAA3C,GACA,OAAAA,EAAAwC,OAEAI,UAAA,SAAA5C,GACA,OAAAA,EAAAwC,OAEAK,SAAA,SAAA7C,GACA,OAAAA,EAAAwC,OAEAM,iBAAA,SAAA9C,GAEA,OAAAuC,EAAAvC,EAAAwC,GAAA,IAEAO,KAAA,SAAA/C,GACA,OAAAA,EAAAwC,SAMA,OAHAA,EAAAlB,MAAA,CACA0B,EAAA,6BAEAR","file":"js/de74acef80d2488b8abd.js","sourcesContent":["'use strict';\n\nvar extend = require('../../utils/object').extend;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n\n  var latex = require('../../utils/latex.js');\n\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3)               // returns number 5\n   *    math.add(2, 3, 4)            // returns number 9\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(-4, 1)\n   *    math.add(a, b)               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   *    const c = math.unit('5 cm')\n   *    const d = math.unit('2.1 mm')\n   *    math.add(c, d)               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n\n  var add = typed('add', extend({\n    // we extend the signatures of addScalar with signatures dealing with matrices\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, addScalar);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, addScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, addScalar, true);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, addScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return add(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return add(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return add(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, addScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, y, addScalar, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, addScalar, true);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, addScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, addScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, addScalar, true).valueOf();\n    },\n    'any, any': addScalar,\n    'any, any, ...any': function anyAnyAny(x, y, rest) {\n      var result = add(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = add(result, rest[i]);\n      }\n\n      return result;\n    }\n  }, addScalar.signatures));\n  add.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['add'], \"${args[1]}\\\\right)\")\n  };\n  return add;\n}\n\nexports.name = 'add';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix), and does\n   * not validate the number of of inputs.\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`\n   * @private\n   */\n  var add = typed('add', {\n    'number, number': function numberNumber(x, y) {\n      return x + y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = add(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n  return add;\n}\n\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  var abs = typed('abs', {\n    'number': Math.abs,\n    'Complex': function Complex(x) {\n      return x.abs();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.abs();\n    },\n    'Fraction': function Fraction(x) {\n      return x.abs();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, abs, true);\n    },\n    'Unit': function Unit(x) {\n      return x.abs();\n    }\n  });\n  abs.toTex = {\n    1: \"\\\\left|${args[0]}\\\\right|\"\n  };\n  return abs;\n}\n\nexports.name = 'abs';\nexports.factory = factory;"],"sourceRoot":""}