{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/resultset/ResultSet.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/resultset/index.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/string.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/unit/index.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/unit/function/unit.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/unit/function/createUnit.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/unit/function/splitUnit.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/type/unit/physicalConstants.js"],"names":["exports","name","path","factory","type","config","load","typed","ResultSet","entries","this","SyntaxError","prototype","isResultSet","valueOf","toString","join","toJSON","mathjs","fromJSON","json","module","__webpack_require__","deepMap","number","string","","format","null","x","boolean","Array | Matrix","any","String","toTex","0","1","unit","Unit","clone","isValuelessUnit","parse","allowNoUnits","number | BigNumber | Fraction | Complex, string","value","2","Object, Object","obj","options","createUnit","Object","string, Unit | string | Object, Object","def","string, Unit | string | Object","Unit, Array","parts","splitUnit","lazy","setLazyConstant","math","resolver","expression","mathWithTransform","fixedUnit","str","fixPrefix"],"mappings":"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","file":"js/8cbca9159f1689d2d9b7.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * A ResultSet contains a list or results\n   * @class ResultSet\n   * @param {Array} entries\n   * @constructor ResultSet\n   */\n  function ResultSet(entries) {\n    if (!(this instanceof ResultSet)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.entries = entries || [];\n  }\n  /**\n   * Attach type information\n   */\n\n\n  ResultSet.prototype.type = 'ResultSet';\n  ResultSet.prototype.isResultSet = true;\n  /**\n   * Returns the array with results hold by this ResultSet\n   * @memberof ResultSet\n   * @returns {Array} entries\n   */\n\n  ResultSet.prototype.valueOf = function () {\n    return this.entries;\n  };\n  /**\n   * Returns the stringified results of the ResultSet\n   * @memberof ResultSet\n   * @returns {string} string\n   */\n\n\n  ResultSet.prototype.toString = function () {\n    return '[' + this.entries.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the ResultSet\n   * @memberof ResultSet\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   */\n\n\n  ResultSet.prototype.toJSON = function () {\n    return {\n      mathjs: 'ResultSet',\n      entries: this.entries\n    };\n  };\n  /**\n   * Instantiate a ResultSet from a JSON object\n   * @memberof ResultSet\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`\n   * @return {ResultSet}\n   */\n\n\n  ResultSet.fromJSON = function (json) {\n    return new ResultSet(json.entries);\n  };\n\n  return ResultSet;\n}\n\nexports.name = 'ResultSet';\nexports.path = 'type';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [// type\nrequire('./ResultSet')];","'use strict';\n\nvar deepMap = require('./../utils/collection/deepMap');\n\nvar number = require('../utils/number');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a string or convert any object into a string.\n   * Elements of Arrays and Matrices are processed element wise.\n   *\n   * Syntax:\n   *\n   *    math.string(value)\n   *\n   * Examples:\n   *\n   *    math.string(4.2)               // returns string '4.2'\n   *    math.string(math.complex(3, 2) // returns string '3 + 2i'\n   *\n   *    const u = math.unit(5, 'km')\n   *    math.string(u.to('m'))         // returns string '5000 m'\n   *\n   *    math.string([true, false])     // returns ['true', 'false']\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, unit\n   *\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n   * @return {string | Array | Matrix} The created string\n   */\n  var string = typed('string', {\n    '': function _() {\n      return '';\n    },\n    'number': number.format,\n    'null': function _null(x) {\n      return 'null';\n    },\n    'boolean': function boolean(x) {\n      return x + '';\n    },\n    'string': function string(x) {\n      return x;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, string);\n    },\n    'any': function any(x) {\n      return String(x);\n    }\n  });\n  string.toTex = {\n    0: '\\\\mathtt{\"\"}',\n    1: \"\\\\mathrm{string}\\\\left(${args[0]}\\\\right)\"\n  };\n  return string;\n}\n\nexports.name = 'string';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [// type\nrequire('./Unit'), // construction function\nrequire('./function/unit'), // create new units\nrequire('./function/createUnit'), // split units\nrequire('./function/splitUnit'), // physical constants\nrequire('./physicalConstants')];","'use strict';\n\nvar deepMap = require('../../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a unit. Depending on the passed arguments, the function\n   * will create and return a new math.type.Unit object.\n   * When a matrix is provided, all elements will be converted to units.\n   *\n   * Syntax:\n   *\n   *     math.unit(unit : string)\n   *     math.unit(value : number, unit : string)\n   *\n   * Examples:\n   *\n   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm\n   *    const b = math.unit('23 kg')    // returns Unit 23 kg\n   *    a.to('m')                       // returns Unit 0.05 m\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, string, createUnit\n   *\n   * @param {* | Array | Matrix} args   A number and unit.\n   * @return {Unit | Array | Matrix}    The created unit\n   */\n  var unit = typed('unit', {\n    'Unit': function Unit(x) {\n      return x.clone();\n    },\n    'string': function string(x) {\n      if (type.Unit.isValuelessUnit(x)) {\n        return new type.Unit(null, x); // a pure unit\n      }\n\n      return type.Unit.parse(x, {\n        allowNoUnits: true\n      }); // a unit with value, like '5cm'\n    },\n    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {\n      return new type.Unit(value, unit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, unit);\n    }\n  });\n  unit.toTex = {\n    1: \"\\\\left(${args[0]}\\\\right)\",\n    2: \"\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)\"\n  };\n  return unit;\n}\n\nexports.name = 'unit';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   *\n   * Syntax:\n   *\n   *     math.createUnit({\n   *       baseUnit1: {\n   *         aliases: [string, ...]\n   *         prefixes: object\n   *       },\n   *       unit2: {\n   *         definition: string,\n   *         aliases: [string, ...]\n   *         prefixes: object,\n   *         offset: number\n   *       },\n   *       unit3: string    // Shortcut\n   *     })\n   *\n   *     // Another shortcut:\n   *     math.createUnit(string, unit : string, [object])\n   *\n   * Examples:\n   *\n   *     math.createUnit('foo')\n   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})\n   *     math.createUnit('mph', '1 mile/hour')\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n   * @param {Object} options   (optional) An object containing any of the following properties:\n   *     - `prefixes {string}` \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".\n   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']\n   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @return {Unit} The new unit\n   */\n  var createUnit = typed('createUnit', {\n    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.\n    'Object, Object': function ObjectObject(obj, options) {\n      return type.Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'Object': function Object(obj) {\n      return type.Unit.createUnit(obj, {});\n    },\n    // Shortcut method for creating one unit.\n    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {\n      var obj = {};\n      obj[name] = def;\n      return type.Unit.createUnit(obj, options);\n    },\n    // Same as above but without the options.\n    'string, Unit | string | Object': function stringUnitStringObject(name, def) {\n      var obj = {};\n      obj[name] = def;\n      return type.Unit.createUnit(obj, {});\n    },\n    // Without a definition, creates a base unit.\n    'string': function string(name) {\n      var obj = {};\n      obj[name] = {};\n      return type.Unit.createUnit(obj, {});\n    }\n  });\n  return createUnit;\n}\n\nexports.name = 'createUnit';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Split a unit in an array of units whose sum is equal to the original unit.\n   *\n   * Syntax:\n   *\n   *     splitUnit(unit: Unit, parts: Array.<Unit>)\n   *\n   * Example:\n   *\n   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])\n   *     // [ 3 feet, 3.3700787401575 inch ]\n   *\n   * See also:\n   *\n   *     unit\n   *\n   * @param {Array} [parts] An array of strings or valueless units.\n   * @return {Array} An array of units.\n   */\n  var splitUnit = typed('splitUnit', {\n    'Unit, Array': function UnitArray(unit, parts) {\n      return unit.splitUnit(parts);\n    }\n  });\n  return splitUnit;\n}\n\nexports.name = 'splitUnit';\nexports.factory = factory;","'use strict';\n\nvar lazy = require('../../utils/object').lazy;\n\nfunction factory(type, config, load, typed, math) {\n  // helper function to create a unit with a fixed prefix\n  function fixedUnit(str) {\n    var unit = type.Unit.parse(str);\n    unit.fixPrefix = true;\n    return unit;\n  } // Source: http://www.wikiwand.com/en/Physical_constant\n  // Universal constants\n\n\n  setLazyConstant(math, 'speedOfLight', function () {\n    return fixedUnit('299792458 m s^-1');\n  });\n  setLazyConstant(math, 'gravitationConstant', function () {\n    return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2');\n  });\n  setLazyConstant(math, 'planckConstant', function () {\n    return fixedUnit('6.626069311e-34 J s');\n  });\n  setLazyConstant(math, 'reducedPlanckConstant', function () {\n    return fixedUnit('1.05457172647e-34 J s');\n  }); // Electromagnetic constants\n\n  setLazyConstant(math, 'magneticConstant', function () {\n    return fixedUnit('1.2566370614e-6 N A^-2');\n  });\n  setLazyConstant(math, 'electricConstant', function () {\n    return fixedUnit('8.854187817e-12 F m^-1');\n  });\n  setLazyConstant(math, 'vacuumImpedance', function () {\n    return fixedUnit('376.730313461 ohm');\n  });\n  setLazyConstant(math, 'coulomb', function () {\n    return fixedUnit('8.9875517873681764e9 N m^2 C^-2');\n  });\n  setLazyConstant(math, 'elementaryCharge', function () {\n    return fixedUnit('1.60217656535e-19 C');\n  });\n  setLazyConstant(math, 'bohrMagneton', function () {\n    return fixedUnit('9.2740096820e-24 J T^-1');\n  });\n  setLazyConstant(math, 'conductanceQuantum', function () {\n    return fixedUnit('7.748091734625e-5 S');\n  });\n  setLazyConstant(math, 'inverseConductanceQuantum', function () {\n    return fixedUnit('12906.403721742 ohm');\n  });\n  setLazyConstant(math, 'magneticFluxQuantum', function () {\n    return fixedUnit('2.06783375846e-15 Wb');\n  });\n  setLazyConstant(math, 'nuclearMagneton', function () {\n    return fixedUnit('5.0507835311e-27 J T^-1');\n  });\n  setLazyConstant(math, 'klitzing', function () {\n    return fixedUnit('25812.807443484 ohm');\n  }); // setLazyConstant(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')})  // TODO: support for Hz needed\n  // Atomic and nuclear constants\n\n  setLazyConstant(math, 'bohrRadius', function () {\n    return fixedUnit('5.291772109217e-11 m');\n  });\n  setLazyConstant(math, 'classicalElectronRadius', function () {\n    return fixedUnit('2.817940326727e-15 m');\n  });\n  setLazyConstant(math, 'electronMass', function () {\n    return fixedUnit('9.1093829140e-31 kg');\n  });\n  setLazyConstant(math, 'fermiCoupling', function () {\n    return fixedUnit('1.1663645e-5 GeV^-2');\n  });\n  setLazyConstant(math, 'fineStructure', function () {\n    return 7.297352569824e-3;\n  });\n  setLazyConstant(math, 'hartreeEnergy', function () {\n    return fixedUnit('4.3597443419e-18 J');\n  });\n  setLazyConstant(math, 'protonMass', function () {\n    return fixedUnit('1.67262177774e-27 kg');\n  });\n  setLazyConstant(math, 'deuteronMass', function () {\n    return fixedUnit('3.3435830926e-27 kg');\n  });\n  setLazyConstant(math, 'neutronMass', function () {\n    return fixedUnit('1.6749271613e-27 kg');\n  });\n  setLazyConstant(math, 'quantumOfCirculation', function () {\n    return fixedUnit('3.636947552024e-4 m^2 s^-1');\n  });\n  setLazyConstant(math, 'rydberg', function () {\n    return fixedUnit('10973731.56853955 m^-1');\n  });\n  setLazyConstant(math, 'thomsonCrossSection', function () {\n    return fixedUnit('6.65245873413e-29 m^2');\n  });\n  setLazyConstant(math, 'weakMixingAngle', function () {\n    return 0.222321;\n  });\n  setLazyConstant(math, 'efimovFactor', function () {\n    return 22.7;\n  }); // Physico-chemical constants\n\n  setLazyConstant(math, 'atomicMass', function () {\n    return fixedUnit('1.66053892173e-27 kg');\n  });\n  setLazyConstant(math, 'avogadro', function () {\n    return fixedUnit('6.0221412927e23 mol^-1');\n  });\n  setLazyConstant(math, 'boltzmann', function () {\n    return fixedUnit('1.380648813e-23 J K^-1');\n  });\n  setLazyConstant(math, 'faraday', function () {\n    return fixedUnit('96485.336521 C mol^-1');\n  });\n  setLazyConstant(math, 'firstRadiation', function () {\n    return fixedUnit('3.7417715317e-16 W m^2');\n  }); // setLazyConstant(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}) // TODO spectralRadiance\n\n  setLazyConstant(math, 'loschmidt', function () {\n    return fixedUnit('2.686780524e25 m^-3');\n  });\n  setLazyConstant(math, 'gasConstant', function () {\n    return fixedUnit('8.314462175 J K^-1 mol^-1');\n  });\n  setLazyConstant(math, 'molarPlanckConstant', function () {\n    return fixedUnit('3.990312717628e-10 J s mol^-1');\n  });\n  setLazyConstant(math, 'molarVolume', function () {\n    return fixedUnit('2.241396820e-10 m^3 mol^-1');\n  });\n  setLazyConstant(math, 'sackurTetrode', function () {\n    return -1.164870823;\n  });\n  setLazyConstant(math, 'secondRadiation', function () {\n    return fixedUnit('1.438777013e-2 m K');\n  });\n  setLazyConstant(math, 'stefanBoltzmann', function () {\n    return fixedUnit('5.67037321e-8 W m^-2 K^-4');\n  });\n  setLazyConstant(math, 'wienDisplacement', function () {\n    return fixedUnit('2.897772126e-3 m K');\n  }); // Adopted values\n\n  setLazyConstant(math, 'molarMass', function () {\n    return fixedUnit('1e-3 kg mol^-1');\n  });\n  setLazyConstant(math, 'molarMassC12', function () {\n    return fixedUnit('1.2e-2 kg mol^-1');\n  });\n  setLazyConstant(math, 'gravity', function () {\n    return fixedUnit('9.80665 m s^-2');\n  }); // atm is defined in Unit.js\n  // Natural units\n\n  setLazyConstant(math, 'planckLength', function () {\n    return fixedUnit('1.61619997e-35 m');\n  });\n  setLazyConstant(math, 'planckMass', function () {\n    return fixedUnit('2.1765113e-8 kg');\n  });\n  setLazyConstant(math, 'planckTime', function () {\n    return fixedUnit('5.3910632e-44 s');\n  });\n  setLazyConstant(math, 'planckCharge', function () {\n    return fixedUnit('1.87554595641e-18 C');\n  });\n  setLazyConstant(math, 'planckTemperature', function () {\n    return fixedUnit('1.41683385e+32 K');\n  });\n} // create a lazy constant in both math and mathWithTransform\n\n\nfunction setLazyConstant(math, name, resolver) {\n  lazy(math, name, resolver);\n  lazy(math.expression.mathWithTransform, name, resolver);\n}\n\nexports.factory = factory;\nexports.lazy = false; // no lazy loading of constants, the constants themselves are lazy when needed\n\nexports.math = true; // request access to the math namespace"],"sourceRoot":""}