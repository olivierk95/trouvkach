{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/tiny-emitter/index.js"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","module","exports","TinyEmitter"],"mappings":"6EAAA,SAAAA,KAKAA,EAAAC,UAAA,CACAC,GAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAC,KAAAD,IAAAC,KAAAD,EAAA,IAOA,OALAA,EAAAH,KAAAG,EAAAH,GAAA,KAAAK,KAAA,CACAC,GAAAL,EACAC,QAGAE,MAGAG,KAAA,SAAAP,EAAAC,EAAAC,GACA,IAAAM,EAAAJ,KACA,SAAAK,IACAD,EAAAE,IAAAV,EAAAS,GACAR,EAAAU,MAAAT,EAAAU,WAIA,OADAH,EAAAI,EAAAZ,EACAG,KAAAL,GAAAC,EAAAS,EAAAP,IAGAY,KAAA,SAAAd,GAMA,IALA,IAAAe,EAAA,GAAAC,MAAAC,KAAAL,UAAA,GACAM,IAAAd,KAAAD,IAAAC,KAAAD,EAAA,KAAyCH,IAAA,IAAAgB,QACzCG,EAAA,EACAC,EAAAF,EAAAG,OAEWF,EAAAC,EAASD,IACpBD,EAAAC,GAAAb,GAAAK,MAAAO,EAAAC,GAAAjB,IAAAa,GAGA,OAAAX,MAGAM,IAAA,SAAAV,EAAAC,GACA,IAAAE,EAAAC,KAAAD,IAAAC,KAAAD,EAAA,IACAmB,EAAAnB,EAAAH,GACAuB,EAAA,GAEA,GAAAD,GAAArB,EACA,QAAAkB,EAAA,EAAAC,EAAAE,EAAAD,OAAwCF,EAAAC,EAASD,IACjDG,EAAAH,GAAAb,KAAAL,GAAAqB,EAAAH,GAAAb,GAAAO,IAAAZ,GACAsB,EAAAlB,KAAAiB,EAAAH,IAYA,OAJAI,EAAA,OACApB,EAAAH,GAAAuB,SACApB,EAAAH,GAEAI,OAIAoB,EAAAC,QAAA5B,EACA2B,EAAAC,QAAAC,YAAA7B","file":"js/ab6ad6a77ac76cfb9e23.js","sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n"],"sourceRoot":""}