{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/max.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/median.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/mean.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/min.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/index.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/mad.js"],"names":["deepForEach","__webpack_require__","reduce","containsCollections","exports","name","factory","type","config","load","typed","larger","improveErrorMessage","max","Array | Matrix","_max","Array | Matrix, number | BigNumber","array","dim","valueOf","_largest","...","args","TypeError","toTex","x","y","err","value","isNaN","NaN","undefined","Error","flatten","add","divide","compare","partitionSelect","median","_median","num","length","mid","right","left","i","middle2","m","middle","number | BigNumber | Complex | Unit","number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit","size","mean","_mean","sum","s","Array","isArray","smaller","min","_min","_smallest","module","abs","map","subtract","mad","_mad","med","message","indexOf","replace"],"mappings":"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","file":"js/2647502d8a7d5ba5ba5a.js","sourcesContent":["'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var larger = load(require('../relational/larger'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the maximum value of a matrix or a  list with values.\n   * In case of a multi dimensional array, the maximum of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.max(a, b, c, ...)\n   *     math.max(A)\n   *     math.max(A, dim)\n   *\n   * Examples:\n   *\n   *     math.max(2, 1, 4, 3)                  // returns 4\n   *     math.max([2, 1, 4, 3])                // returns 4\n   *\n   *     // maximum over a specified dimension (zero-based)\n   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]\n   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, min, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The maximum value\n   */\n\n  var max = typed('max', {\n    // max([a, b, c, d, ...])\n    'Array | Matrix': _max,\n    // max([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _largest);\n    },\n    // max(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function max');\n      }\n\n      return _max(args);\n    }\n  });\n  max.toTex = \"\\\\max\\\\left(${args}\\\\right)\";\n  return max;\n  /**\n   * Return the largest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is largest, or y when y is largest\n   * @private\n   */\n\n  function _largest(x, y) {\n    try {\n      return larger(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'max', y);\n    }\n  }\n  /**\n   * Recursively calculate the maximum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} max\n   * @private\n   */\n\n\n  function _max(array) {\n    var max;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          max = NaN;\n        } else if (max === undefined || larger(value, max)) {\n          max = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'max', value);\n      }\n    });\n\n    if (max === undefined) {\n      throw new Error('Cannot calculate max of an empty array');\n    }\n\n    return max;\n  }\n}\n\nexports.name = 'max';\nexports.factory = factory;","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var divide = load(require('../arithmetic/divideScalar'));\n  var compare = load(require('../relational/compare'));\n  var partitionSelect = load(require('../matrix/partitionSelect'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the median of a matrix or a list with values. The values are\n   * sorted and the middle value is returned. In case of an even number of\n   * values, the average of the two middle values is returned.\n   * Supported types of values are: Number, BigNumber, Unit\n   *\n   * In case of a (multi dimensional) array or matrix, the median of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.median(a, b, c, ...)\n   *     math.median(A)\n   *\n   * Examples:\n   *\n   *     math.median(5, 2, 7)        // returns 5\n   *     math.median([3, -1, 5, 7])  // returns 4\n   *\n   * See also:\n   *\n   *     mean, min, max, sum, prod, std, var, quantileSeq\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The median\n   */\n\n  var median = typed('median', {\n    // median([a, b, c, d, ...])\n    'Array | Matrix': _median,\n    // median([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      // TODO: implement median(A, dim)\n      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)\n    },\n    // median(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function median');\n      }\n\n      return _median(args);\n    }\n  });\n  /**\n   * Recursively calculate the median of an n-dimensional array\n   * @param {Array} array\n   * @return {Number} median\n   * @private\n   */\n\n  function _median(array) {\n    try {\n      array = flatten(array.valueOf());\n      var num = array.length;\n\n      if (num === 0) {\n        throw new Error('Cannot calculate median of an empty array');\n      }\n\n      if (num % 2 === 0) {\n        // even: return the average of the two middle values\n        var mid = num / 2 - 1;\n        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part\n\n        var left = array[mid];\n\n        for (var i = 0; i < mid; ++i) {\n          if (compare(array[i], left) > 0) {\n            left = array[i];\n          }\n        }\n\n        return middle2(left, right);\n      } else {\n        // odd: return the middle value\n        var m = partitionSelect(array, (num - 1) / 2);\n        return middle(m);\n      }\n    } catch (err) {\n      throw improveErrorMessage(err, 'median');\n    }\n  } // helper function to type check the middle value of the array\n\n\n  var middle = typed({\n    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {\n      return value;\n    }\n  }); // helper function to type check the two middle value of the array\n\n  var middle2 = typed({\n    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {\n      return divide(add(left, right), 2);\n    }\n  });\n  median.toTex = undefined; // use default template\n\n  return median;\n}\n\nexports.name = 'median';\nexports.factory = factory;","'use strict';\n\nvar size = require('../../utils/array').size;\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n\n  var mean = typed('mean', {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  mean.toTex = undefined; // use default template\n\n  return mean;\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? size(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum = 0;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n}\n\nexports.name = 'mean';\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var smaller = load(require('../relational/smaller'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the minimum value of a matrix or a  list of values.\n   * In case of a multi dimensional array, the minimum of the flattened array\n   * will be calculated. When `dim` is provided, the minimum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dim)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3)                  // returns 1\n   *     math.min([2, 1, 4, 3])                // returns 1\n   *\n   *     // minimum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n\n  var min = typed('min', {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n  min.toTex = \"\\\\min\\\\left(${args}\\\\right)\";\n  return min;\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n\n\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    return min;\n  }\n}\n\nexports.name = 'min';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [require('./mad'), require('./max'), require('./mean'), require('./median'), require('./min'), require('./mode'), require('./prod'), require('./quantileSeq'), require('./std'), require('./sum'), require('./var')];","'use strict';\n\nvar flatten = require('../../utils/array').flatten;\n\nfunction factory(type, config, load, typed) {\n  var abs = load(require('../arithmetic/abs'));\n  var map = load(require('../matrix/map'));\n  var median = load(require('../statistics/median'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30)             // returns 10\n   *     math.mad([1, 2, 3])              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n\n  var mad = typed('mad', {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n  mad.toTex = undefined; // use default template\n\n  return mad;\n\n  function _mad(array) {\n    array = flatten(array.valueOf());\n\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n}\n\nexports.name = 'mad';\nexports.factory = factory;"],"sourceRoot":""}