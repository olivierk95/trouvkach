{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/nthRoot.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/nthRoots.js"],"names":["_nthRoot","a","root","inv","Error","Math","abs","Infinity","isFinite","x","pow","exports","name","factory","type","config","load","typed","matrix","__webpack_require__","algorithm01","algorithm02","algorithm06","algorithm11","algorithm13","algorithm14","complexErr","nthRoot","number","number, number","BigNumber","_bigNthRoot","Complex","Complex, number","y","BigNumber, BigNumber","Array | Matrix","SparseMatrix, SparseMatrix","density","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","valueOf","Array, Matrix","Matrix, Array","SparseMatrix, number | BigNumber","DenseMatrix, number | BigNumber","number | BigNumber, SparseMatrix","number | BigNumber, DenseMatrix","Array, number | BigNumber","number | BigNumber, Array","toTex","2","precision","Big","clone","zero","one","isNegative","neg","isZero","mod","equals","div","isNeg","toPrecision","complex","on","_calculateExactResult","val","_nthComplexRoots","offset","aIsNumeric","re","im","arg","roots","r","k","halfPiFactor","round","push","phi","PI","nthRoots"],"mappings":"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","file":"js/b580b3c73d56e3ccd4df.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9\n   *     math.sqrt(9)          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';\n  var nthRoot = typed('nthRoot', {\n    'number': function number(x) {\n      return _nthRoot(x, 2);\n    },\n    'number, number': _nthRoot,\n    'BigNumber': function BigNumber(x) {\n      return _bigNthRoot(x, new type.BigNumber(2));\n    },\n    'Complex': function Complex(x) {\n      throw new Error(complexErr);\n    },\n    'Complex, number': function ComplexNumber(x, y) {\n      throw new Error(complexErr);\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return nthRoot(x, 2);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return algorithm06(x, y, nthRoot);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, nthRoot, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return algorithm01(x, y, nthRoot, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, nthRoot);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, nthRoot, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, nthRoot, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return algorithm11(y, x, nthRoot, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, nthRoot, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y)).valueOf();\n    }\n  });\n  nthRoot.toTex = {\n    2: \"\\\\sqrt[${args[1]}]{${args[0]}}\"\n  };\n  return nthRoot;\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * http://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = type.BigNumber.precision;\n    var Big = type.BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new type.BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n}\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} root\n * @private\n */\n\n\nfunction _nthRoot(a, root) {\n  var inv = root < 0;\n\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  } // edge cases zero and infinity\n\n\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n\n  /*\n  let x = 1 // Initial guess\n  let xPrev = 1\n  let i = 0\n  const iMax = 10000\n  do {\n    const delta = (a / Math.pow(x, root - 1) - x) / root\n    xPrev = x\n    x = x + delta\n    i++\n  }\n  while (xPrev !== x && i < iMax)\n   if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge')\n  }\n   return inv ? 1 / x : x\n  */\n}\n\nexports.name = 'nthRoot';\nexports.factory = factory;","'use strict';\n\nvar Complex = require('../../type/complex/Complex');\n\nvar typed = require('../../core/typed');\n\nvar complex = Complex.factory('Complex', {}, '', typed, {\n  on: function on(x, y) {}\n});\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the nth roots of a value.\n   * An nth root of a positive real number A,\n   * is a positive real solution of the equation \"x^root = A\".\n   * This function returns an array of complex values.\n   *\n   * Syntax:\n   *\n   *    math.nthRoots(x)\n   *    math.nthRoots(x, root)\n   *\n   * Examples:\n   *\n   *    math.nthRoots(1)\n   *    // returns [\n   *    //   {re: 1, im: 0},\n   *    //   {re: -1, im: 0}\n   *    // ]\n   *    nthRoots(1, 3)\n   *    // returns [\n   *    //   { re: 1, im: 0 },\n   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },\n   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }\n   *    ]\n   *\n   * See also:\n   *\n   *    nthRoot, pow, sqrt\n   *\n   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value\n   */\n  var nthRoots = typed('nthRoots', {\n    'Complex': function Complex(x) {\n      return _nthComplexRoots(x, 2);\n    },\n    'Complex, number': _nthComplexRoots\n  });\n  nthRoots.toTex = {\n    2: \"\\\\{y : $y^{args[1]} = {${args[0]}}\\\\}\"\n  };\n  return nthRoots;\n}\n/**\n * Each function here returns a real multiple of i as a Complex value.\n * @param  {number} val\n * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3\n */\n// This is used to fix float artifacts for zero-valued components.\n\n\nvar _calculateExactResult = [function realPos(val) {\n  return complex(val);\n}, function imagPos(val) {\n  return complex(0, val);\n}, function realNeg(val) {\n  return complex(-val);\n}, function imagNeg(val) {\n  return complex(0, -val);\n}];\n/**\n * Calculate the nth root of a Complex Number a using De Movire's Theorem.\n * @param  {Complex} a\n * @param  {number} root\n * @return {Array} array of n Complex Roots\n */\n\nfunction _nthComplexRoots(a, root) {\n  if (root < 0) throw new Error('Root must be greater than zero');\n  if (root === 0) throw new Error('Root must be non-zero');\n  if (root % 1 !== 0) throw new Error('Root must be an integer');\n  if (a === 0 || a.abs() === 0) return [complex(0)];\n  var aIsNumeric = typeof a === 'number';\n  var offset; // determine the offset (argument of a)/(pi/2)\n\n  if (aIsNumeric || a.re === 0 || a.im === 0) {\n    if (aIsNumeric) {\n      offset = 2 * +(a < 0); // numeric value on the real axis\n    } else if (a.im === 0) {\n      offset = 2 * +(a.re < 0); // complex value on the real axis\n    } else {\n      offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis\n    }\n  }\n\n  var arg = a.arg();\n  var abs = a.abs();\n  var roots = [];\n  var r = Math.pow(abs, 1 / root);\n\n  for (var k = 0; k < root; k++) {\n    var halfPiFactor = (offset + 4 * k) / root;\n    /**\n     * If (offset + 4*k)/root is an integral multiple of pi/2\n     * then we can produce a more exact result.\n     */\n\n    if (halfPiFactor === Math.round(halfPiFactor)) {\n      roots.push(_calculateExactResult[halfPiFactor % 4](r));\n      continue;\n    }\n\n    roots.push(complex({\n      r: r,\n      phi: (arg + 2 * Math.PI * k) / root\n    }));\n  }\n\n  return roots;\n}\n\nexports.name = 'nthRoots';\nexports.factory = factory;"],"sourceRoot":""}