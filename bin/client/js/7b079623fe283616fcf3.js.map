{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/statistics/var.js"],"names":["DEFAULT_NORMALIZATION","deepForEach","__webpack_require__","exports","name","factory","type","config","load","typed","add","subtract","multiply","divide","isNaN","improveErrorMessage","variance","Array | Matrix","array","_var","Array | Matrix, string","...","args","toTex","normalization","sum","num","length","SyntaxError","value","err","Error","mean","diff","zero","isBigNumber","BigNumber"],"mappings":"2FAEA,IAAAA,EAAA,WAEAC,EAAkBC,EAAQ,IA6H1BC,EAAAC,KAAA,MACAD,EAAAE,QA5HA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAiBN,EAAQ,KACzBS,EAAAH,EAAsBN,EAAQ,KAC9BU,EAAAJ,EAAsBN,EAAQ,KAC9BW,EAAAL,EAAoBN,EAAQ,KAC5BY,EAAAN,EAAmBN,EAAQ,KAC3Ba,EAAAP,EAAiCN,EAAQ,KA4CzCc,EAAAP,EAAA,YAEAQ,iBAAA,SAAAC,GACA,OAAAC,EAAAD,EAAAlB,IAGAoB,yBAAAD,EAEAE,MAAA,SAAAC,GACA,OAAAH,EAAAG,EAAAtB,MAIA,OADAgB,EAAAO,MAAA,sCACAP,EAaA,SAAAG,EAAAD,EAAAM,GACA,IAAAC,EAAA,EACAC,EAAA,EAEA,OAAAR,EAAAS,OACA,UAAAC,YAAA,6DAYA,GARA3B,EAAAiB,EAAA,SAAAW,GACA,IACAJ,EAAAf,EAAAe,EAAAI,GACAH,IACO,MAAAI,GACP,MAAAf,EAAAe,EAAA,MAAAD,MAGA,IAAAH,EAAA,UAAAK,MAAA,0CACA,IAAAC,EAAAnB,EAAAY,EAAAC,GAQA,GANAD,EAAA,EACAxB,EAAAiB,EAAA,SAAAW,GACA,IAAAI,EAAAtB,EAAAkB,EAAAG,GACAP,EAAAf,EAAAe,EAAAb,EAAAqB,QAGAnB,EAAAW,GACA,OAAAA,EAGA,OAAAD,GACA,kBACA,OAAAX,EAAAY,EAAAC,GAEA,aACA,OAAAb,EAAAY,EAAAC,EAAA,GAEA,eACA,IAAAQ,EAAA5B,EAAA6B,YAAAV,GAAA,IAAAnB,EAAA8B,UAAA,KACA,WAAAV,EAAAQ,EAAArB,EAAAY,EAAAC,EAAA,GAEA,QACA,UAAAK,MAAA,0BAAAP,EAAA","file":"js/7b079623fe283616fcf3.js","sourcesContent":["'use strict';\n\nvar DEFAULT_NORMALIZATION = 'unbiased';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiplyScalar'));\n  var divide = load(require('../arithmetic/divideScalar'));\n  var isNaN = load(require('../utils/isNaN'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the variance of a matrix or a  list with values.\n   * In case of a (multi dimensional) array or matrix, the variance over all\n   * elements will be calculated.\n   *\n   * Optionally, the type of normalization can be specified as second\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   * Note that older browser may not like the variable name `var`. In that\n   * case, the function can be called as `math['var'](...)` instead of\n   * `math.var(...)`.\n   *\n   * Syntax:\n   *\n   *     math.var(a, b, c, ...)\n   *     math.var(A)\n   *     math.var(A, normalization)\n   *\n   * Examples:\n   *\n   *     math.var(2, 4, 6)                     // returns 4\n   *     math.var([2, 4, 6, 8])                // returns 6.666666666666667\n   *     math.var([2, 4, 6, 8], 'uncorrected') // returns 5\n   *     math.var([2, 4, 6, 8], 'biased')      // returns 4\n   *\n   *     math.var([[1, 2, 3], [4, 5, 6]])      // returns 3.5\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, std, sum\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @return {*} The variance\n   */\n\n  var variance = typed('variance', {\n    // var([a, b, c, d, ...])\n    'Array | Matrix': function ArrayMatrix(array) {\n      return _var(array, DEFAULT_NORMALIZATION);\n    },\n    // var([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _var,\n    // var(a, b, c, d, ...)\n    '...': function _(args) {\n      return _var(args, DEFAULT_NORMALIZATION);\n    }\n  });\n  variance.toTex = \"\\\\mathrm{Var}\\\\left(${args}\\\\right)\";\n  return variance;\n  /**\n   * Recursively calculate the variance of an n-dimensional array\n   * @param {Array} array\n   * @param {string} normalization\n   *                        Determines how to normalize the variance:\n   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)\n   *                        - 'uncorrected' The sum of squared errors is divided by n\n   *                        - 'biased'      The sum of squared errors is divided by (n + 1)\n   * @return {number | BigNumber} variance\n   * @private\n   */\n\n  function _var(array, normalization) {\n    var sum = 0;\n    var num = 0;\n\n    if (array.length === 0) {\n      throw new SyntaxError('Function var requires one or more parameters (0 provided)');\n    } // calculate the mean and number of elements\n\n\n    deepForEach(array, function (value) {\n      try {\n        sum = add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'var', value);\n      }\n    });\n    if (num === 0) throw new Error('Cannot calculate var of an empty array');\n    var mean = divide(sum, num); // calculate the variance\n\n    sum = 0;\n    deepForEach(array, function (value) {\n      var diff = subtract(value, mean);\n      sum = add(sum, multiply(diff, diff));\n    });\n\n    if (isNaN(sum)) {\n      return sum;\n    }\n\n    switch (normalization) {\n      case 'uncorrected':\n        return divide(sum, num);\n\n      case 'biased':\n        return divide(sum, num + 1);\n\n      case 'unbiased':\n        var zero = type.isBigNumber(sum) ? new type.BigNumber(0) : 0;\n        return num === 1 ? zero : divide(sum, num - 1);\n\n      default:\n        throw new Error('Unknown normalization \"' + normalization + '\". ' + 'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');\n    }\n  }\n}\n\nexports.name = 'var';\nexports.factory = factory;"],"sourceRoot":""}