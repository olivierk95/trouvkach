{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/unit/index.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/unit/to.js"],"names":["module","exports","__webpack_require__","name","factory","type","config","load","typed","latex","matrix","algorithm13","algorithm14","to","Unit, Unit | string","x","unit","Matrix, Matrix","y","Array, Array","valueOf","Array, Matrix","Matrix, Array","Matrix, any","any, Matrix","Array, any","any, Array","toTex","2","concat","operators"],"mappings":"4FAEAA,EAAAC,QAAA,CAAkBC,EAAQ,wCC0E1BD,EAAAE,KAAA,KACAF,EAAAG,QA3EA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAcP,EAAQ,GAEtBQ,EAAAH,EAAoBL,EAAQ,IAC5BS,EAAAJ,EAAyBL,EAAQ,IACjCU,EAAAL,EAAyBL,EAAQ,IA0BjCW,EAAAL,EAAA,MACAM,sBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAF,GAAAG,IAEAC,iBAAA,SAAAF,EAAAG,GAEA,OAAAP,EAAAI,EAAAG,EAAAL,IAEAM,eAAA,SAAAJ,EAAAG,GAEA,OAAAL,EAAAH,EAAAK,GAAAL,EAAAQ,IAAAE,WAEAC,gBAAA,SAAAN,EAAAG,GAEA,OAAAL,EAAAH,EAAAK,GAAAG,IAEAI,gBAAA,SAAAP,EAAAG,GAEA,OAAAL,EAAAE,EAAAL,EAAAQ,KAEAK,cAAA,SAAAR,EAAAG,GAEA,OAAAN,EAAAG,EAAAG,EAAAL,GAAA,IAEAW,cAAA,SAAAT,EAAAG,GAEA,OAAAN,EAAAM,EAAAH,EAAAF,GAAA,IAEAY,aAAA,SAAAV,EAAAG,GAEA,OAAAN,EAAAF,EAAAK,GAAAG,EAAAL,GAAA,GAAAO,WAEAM,aAAA,SAAAX,EAAAG,GAEA,OAAAN,EAAAF,EAAAQ,GAAAH,EAAAF,GAAA,GAAAO,aAMA,OAHAP,EAAAc,MAAA,CACAC,EAAA,oBAAyBC,OAAApB,EAAAqB,UAAA,0BAEzBjB","file":"js/ed1f4ecce96e6d6948f2.js","sourcesContent":["'use strict';\n\nmodule.exports = [require('./to')];","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  var to = typed('to', {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, to);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return to(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return to(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return to(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, to, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, to, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, to, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, to, true).valueOf();\n    }\n  });\n  to.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['to'], \"${args[1]}\\\\right)\")\n  };\n  return to;\n}\n\nexports.name = 'to';\nexports.factory = factory;"],"sourceRoot":""}