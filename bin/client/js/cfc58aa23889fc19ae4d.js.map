{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/bitwise/bitAnd.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/bitwise/bitNot.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/bitwise/bitOr.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/bitwise/bitXor.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/bitwise/leftShift.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/bitwise/rightArithShift.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/bitwise/rightLogShift.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/combinatorics/bellNumbers.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/combinatorics/catalan.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/combinatorics/composition.js","webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/combinatorics/stirlingS2.js"],"names":["module","exports","name","category","syntax","description","examples","seealso"],"mappings":"4FAEAA,EAAAC,QAAA,CACAC,KAAA,SACAC,SAAA,UACAC,OAAA,yBACAC,YAAA,6QACAC,SAAA,+CACAC,QAAA,6GCNAP,EAAAC,QAAA,CACAC,KAAA,SACAC,SAAA,UACAC,OAAA,mBACAC,YAAA,8IACAC,SAAA,iCACAC,QAAA,6GCNAP,EAAAC,QAAA,CACAC,KAAA,QACAC,SAAA,UACAC,OAAA,wBACAC,YAAA,8PACAC,SAAA,gCACAC,QAAA,8GCNAP,EAAAC,QAAA,CACAC,KAAA,SACAC,SAAA,UACAC,OAAA,iBACAC,YAAA,mRACAC,SAAA,uCACAC,QAAA,6GCNAP,EAAAC,QAAA,CACAC,KAAA,YACAC,SAAA,UACAC,OAAA,6BACAC,YAAA,+DACAC,SAAA,oBACAC,QAAA,0GCNAP,EAAAC,QAAA,CACAC,KAAA,kBACAC,SAAA,UACAC,OAAA,mCACAC,YAAA,mEACAC,SAAA,+BACAC,QAAA,oGCNAP,EAAAC,QAAA,CACAC,KAAA,gBACAC,SAAA,UACAC,OAAA,kCACAC,YAAA,gEACAC,SAAA,iCACAC,QAAA,sGCNAP,EAAAC,QAAA,CACAC,KAAA,cACAC,SAAA,gBACAC,OAAA,mBACAC,YAAA,2NACAC,SAAA,oCACAC,QAAA,kDCNAP,EAAAC,QAAA,CACAC,KAAA,UACAC,SAAA,gBACAC,OAAA,eACAC,YAAA,0KACAC,SAAA,4BACAC,QAAA,mDCNAP,EAAAC,QAAA,CACAC,KAAA,cACAC,SAAA,gBACAC,OAAA,sBACAC,YAAA,wIACAC,SAAA,sBACAC,QAAA,oDCNAP,EAAAC,QAAA,CACAC,KAAA,aACAC,SAAA,gBACAC,OAAA,qBACAC,YAAA,kRACAC,SAAA,qBACAC,QAAA","file":"js/cfc58aa23889fc19ae4d.js","sourcesContent":["\"use strict\";\n\nmodule.exports = {\n  'name': 'bitAnd',\n  'category': 'Bitwise',\n  'syntax': ['x & y', 'bitAnd(x, y)'],\n  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',\n  'examples': ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],\n  'seealso': ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'bitNot',\n  'category': 'Bitwise',\n  'syntax': ['~x', 'bitNot(x)'],\n  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',\n  'examples': ['~1', '~2', 'bitNot([2, -3, 4])'],\n  'seealso': ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'bitOr',\n  'category': 'Bitwise',\n  'syntax': ['x | y', 'bitOr(x, y)'],\n  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',\n  'examples': ['5 | 3', 'bitOr([1, 2, 3], 4)'],\n  'seealso': ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'bitXor',\n  'category': 'Bitwise',\n  'syntax': ['bitXor(x, y)'],\n  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',\n  'examples': ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],\n  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'leftShift',\n  'category': 'Bitwise',\n  'syntax': ['x << y', 'leftShift(x, y)'],\n  'description': 'Bitwise left logical shift of a value x by y number of bits.',\n  'examples': ['4 << 1', '8 >> 1'],\n  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'rightArithShift',\n  'category': 'Bitwise',\n  'syntax': ['x >> y', 'rightArithShift(x, y)'],\n  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',\n  'examples': ['8 >> 1', '4 << 1', '-12 >> 2'],\n  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'rightLogShift',\n  'category': 'Bitwise',\n  'syntax': ['x >>> y', 'rightLogShift(x, y)'],\n  'description': 'Bitwise right logical shift of a value x by y number of bits.',\n  'examples': ['8 >>> 1', '4 << 1', '-12 >>> 2'],\n  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'bellNumbers',\n  'category': 'Combinatorics',\n  'syntax': ['bellNumbers(n)'],\n  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',\n  'examples': ['bellNumbers(3)', 'bellNumbers(8)'],\n  'seealso': ['stirlingS2']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'catalan',\n  'category': 'Combinatorics',\n  'syntax': ['catalan(n)'],\n  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',\n  'examples': ['catalan(3)', 'catalan(8)'],\n  'seealso': ['bellNumbers']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'composition',\n  'category': 'Combinatorics',\n  'syntax': ['composition(n, k)'],\n  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',\n  'examples': ['composition(5, 3)'],\n  'seealso': ['combinations']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'stirlingS2',\n  'category': 'Combinatorics',\n  'syntax': ['stirlingS2(n, k)'],\n  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',\n  'examples': ['stirlingS2(5, 3)'],\n  'seealso': ['bellNumbers']\n};"],"sourceRoot":""}