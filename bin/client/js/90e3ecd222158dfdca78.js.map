{"version":3,"sources":["webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/arithmetic/cbrt.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/arithmetic/ceil.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/arithmetic/cube.js"],"names":["deepMap","__webpack_require__","_cbrtNumber","Math","cbrt","x","result","negate","isFinite","exp","log","exports","name","factory","type","config","load","typed","unaryMinus","isNegative","matrix","number","Complex","_cbrtComplex","Complex, boolean","BigNumber","Unit","value","isComplex","clone","pow","third","isBigNumber","div","isFraction","Fraction","_result","Array | Matrix","allRoots","arg3","arg","abs","principal","mul","all","PI","toTex","1","ceil","cube","times"],"mappings":"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","file":"js/90e3ecd222158dfdca78.js","sourcesContent":["'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var unaryMinus = load(require('./unaryMinus'));\n  var isNegative = load(require('../utils/isNegative'));\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}\n   *            Returns the cubic root of `x`\n   */\n\n  var cbrt = typed('cbrt', {\n    'number': _cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n    'Complex': _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    'BigNumber': function BigNumber(x) {\n      return x.cbrt();\n    },\n    'Unit': _cbrtUnit,\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since cbrt(0) = 0\n      return deepMap(x, cbrt, true);\n    }\n  });\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n    var arg3 = x.arg() / 3;\n    var abs = x.abs(); // principal root:\n\n    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3).exp());\n\n    if (allRoots) {\n      var all = [principal, new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3 + Math.PI * 2 / 3).exp()), new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n\n\n  function _cbrtUnit(x) {\n    if (x.value && type.isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n\n      result.value = _cbrtComplex(x.value); // Compute the value\n\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      } // TODO: create a helper function for this\n\n\n      var third;\n\n      if (type.isBigNumber(x.value)) {\n        third = new type.BigNumber(1).div(3);\n      } else if (type.isFraction(x.value)) {\n        third = new type.Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n\n      var _result = x.pow(third);\n\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n\n      return _result;\n    }\n  }\n\n  cbrt.toTex = {\n    1: \"\\\\sqrt[3]{${args[0]}}\"\n  };\n  return cbrt;\n}\n/**\n * Calculate cbrt for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number | Complex} Returns the cubic root of x\n * @private\n */\n\n\nvar _cbrtNumber = Math.cbrt || function (x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n\nexports.name = 'cbrt';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var ceil = typed('ceil', {\n    'number': Math.ceil,\n    'Complex': function Complex(x) {\n      return x.ceil();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.ceil();\n    },\n    'Fraction': function Fraction(x) {\n      return x.ceil();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, ceil, true);\n    }\n  });\n  ceil.toTex = {\n    1: \"\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil\"\n  };\n  return ceil;\n}\n\nexports.name = 'ceil';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Compute the cube of a value, `x * x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cube(x)\n   *\n   * Examples:\n   *\n   *    math.cube(2)            // returns number 8\n   *    math.pow(2, 3)          // returns number 8\n   *    math.cube(4)            // returns number 64\n   *    4 * 4 * 4               // returns number 64\n   *\n   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]\n   *\n   * See also:\n   *\n   *    multiply, square, pow, cbrt\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x\n   */\n  var cube = typed('cube', {\n    'number': function number(x) {\n      return x * x * x;\n    },\n    'Complex': function Complex(x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.times(x).times(x);\n    },\n    'Fraction': function Fraction(x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since cube(0) = 0\n      return deepMap(x, cube, true);\n    },\n    'Unit': function Unit(x) {\n      return x.pow(3);\n    }\n  });\n  cube.toTex = {\n    1: \"\\\\left(${args[0]}\\\\right)^3\"\n  };\n  return cube;\n}\n\nexports.name = 'cube';\nexports.factory = factory;"],"sourceRoot":""}