{"version":3,"sources":["webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/product.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/gamma.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/index.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/kldivergence.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/multinomial.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/permutations.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/pickRandom.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/seededRNG.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/random.js","webpack:////home/badou/Desktop/LastDeploy/trouvkach/node_modules/mathjs/lib/function/probability/randomInt.js"],"names":["module","exports","product","i","n","half","deepMap","__webpack_require__","isInteger","g","p","name","factory","type","config","load","typed","multiply","pow","gamma","number","t","x","isFinite","Infinity","NaN","Math","PI","sin","twoN","threeN","fourN","fiveN","sqrt","E","length","exp","Complex","im","re","real","den","twoPiSqrt","result","r","cos","BigNumber","isNegative","isZero","precision","log","toNumber","res","clone","value","times","toPrecision","bigFactorial","minus","Error","Array | Matrix","toTex","1","matrix","divide","sum","dotDivide","isNumeric","_kldiv","q","plength","size","qlength","qnorm","pnorm","Number","Array, Array","Matrix, Array","Array, Matrix","Matrix, Matrix","deepForEach","add","factorial","isPositive","a","denom","ai","TypeError","isPositiveInteger","gte","permutations","number | BigNumber","number, number","k","BigNumber, BigNumber","gt","plus","lte","undefined","pickRandom","distribution","seedrandom","singletonRandom","math","random","setSeed","seed","String","randomSeed","on","curr","prev","changes","randomInt"],"mappings":"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","file":"js/0c0db5853a7d859e2431.js","sourcesContent":["\"use strict\";\n\n/** @param {integer} i\n *  @param {integer} n\n *  @returns : product of i to n\n */\nfunction product(i, n) {\n  var half;\n\n  if (n < i) {\n    return 1;\n  }\n\n  if (n === i) {\n    return n;\n  }\n\n  half = n + i >> 1; // divide (n + i) by 2 and truncate to integer\n\n  return product(i, half) * product(half + 1, n);\n}\n\nmodule.exports = product;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory(type, config, load, typed) {\n  var multiply = load(require('../arithmetic/multiply'));\n  var pow = load(require('../arithmetic/pow'));\n\n  var product = require('./product');\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | Array | Matrix} n   A real or complex number\n   * @return {number | Array | Matrix}    The gamma of `n`\n   */\n\n\n  var gamma = typed('gamma', {\n    'number': function number(n) {\n      var t, x;\n\n      if (isInteger(n)) {\n        if (n <= 0) {\n          return isFinite(n) ? Infinity : NaN;\n        }\n\n        if (n > 171) {\n          return Infinity; // Will overflow\n        }\n\n        return product(1, n - 1);\n      }\n\n      if (n < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));\n      }\n\n      if (n >= 171.35) {\n        return Infinity; // will overflow\n      }\n\n      if (n > 85.0) {\n        // Extended Stirling Approx\n        var twoN = n * n;\n        var threeN = twoN * n;\n        var fourN = threeN * n;\n        var fiveN = fourN * n;\n        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));\n      }\n\n      --n;\n      x = p[0];\n\n      for (var i = 1; i < p.length; ++i) {\n        x += p[i] / (n + i);\n      }\n\n      t = n + g + 0.5;\n      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n    },\n    'Complex': function Complex(n) {\n      var t, x;\n\n      if (n.im === 0) {\n        return gamma(n.re);\n      }\n\n      n = new type.Complex(n.re - 1, n.im);\n      x = new type.Complex(p[0], 0);\n\n      for (var i = 1; i < p.length; ++i) {\n        var real = n.re + i; // x += p[i]/(n+i)\n\n        var den = real * real + n.im * n.im;\n\n        if (den !== 0) {\n          x.re += p[i] * real / den;\n          x.im += -(p[i] * n.im) / den;\n        } else {\n          x.re = p[i] < 0 ? -Infinity : Infinity;\n        }\n      }\n\n      t = new type.Complex(n.re + g + 0.5, n.im);\n      var twoPiSqrt = Math.sqrt(2 * Math.PI);\n      n.re += 0.5;\n      var result = pow(t, n);\n\n      if (result.im === 0) {\n        // sqrt(2*PI)*result\n        result.re *= twoPiSqrt;\n      } else if (result.re === 0) {\n        result.im *= twoPiSqrt;\n      } else {\n        result.re *= twoPiSqrt;\n        result.im *= twoPiSqrt;\n      }\n\n      var r = Math.exp(-t.re); // exp(-t)\n\n      t.re = r * Math.cos(-t.im);\n      t.im = r * Math.sin(-t.im);\n      return multiply(multiply(result, t), x);\n    },\n    'BigNumber': function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new type.BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n\n      if (!n.isFinite()) {\n        return new type.BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n\n      throw new Error('Integer BigNumber expected');\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return deepMap(n, gamma);\n    }\n  });\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n\n  function bigFactorial(n) {\n    if (n.isZero()) {\n      return new type.BigNumber(1); // 0! is per definition 1\n    }\n\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = type.BigNumber.clone({\n      precision: precision\n    });\n    var res = new Big(n);\n    var value = n.toNumber() - 1; // number\n\n    while (value > 1) {\n      res = res.times(value);\n      value--;\n    }\n\n    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));\n  }\n\n  gamma.toTex = {\n    1: \"\\\\Gamma\\\\left(${args[0]}\\\\right)\"\n  };\n  return gamma;\n} // TODO: comment on the variables g and p\n\n\nvar g = 4.7421875;\nvar p = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];\nexports.name = 'gamma';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [// require('./distribution'), // TODO: rethink math.distribution\nrequire('./combinations'), require('./factorial'), require('./gamma'), require('./kldivergence'), require('./multinomial'), require('./permutations'), require('./pickRandom'), require('./random'), require('./randomInt')];","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var divide = load(require('../arithmetic/divide'));\n  var sum = load(require('../statistics/sum'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var dotDivide = load(require('../arithmetic/dotDivide'));\n  var log = load(require('../arithmetic/log'));\n  var isNumeric = load(require('../utils/isNumeric'));\n  /**\n     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n     *\n     * Syntax:\n     *\n     *     math.kldivergence(x, y)\n     *\n     * Examples:\n     *\n     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153\n     *\n     *\n     * @param  {Array | Matrix} q    First vector\n     * @param  {Array | Matrix} p    Second vector\n     * @return {number}              Returns distance between q and p\n     */\n\n  var kldivergence = typed('kldivergence', {\n    'Array, Array': function ArrayArray(q, p) {\n      return _kldiv(matrix(q), matrix(p));\n    },\n    'Matrix, Array': function MatrixArray(q, p) {\n      return _kldiv(q, matrix(p));\n    },\n    'Array, Matrix': function ArrayMatrix(q, p) {\n      return _kldiv(matrix(q), p);\n    },\n    'Matrix, Matrix': function MatrixMatrix(q, p) {\n      return _kldiv(q, p);\n    }\n  });\n\n  function _kldiv(q, p) {\n    var plength = p.size().length;\n    var qlength = q.size().length;\n\n    if (plength > 1) {\n      throw new Error('first object must be one dimensional');\n    }\n\n    if (qlength > 1) {\n      throw new Error('second object must be one dimensional');\n    }\n\n    if (plength !== qlength) {\n      throw new Error('Length of two vectors must be equal');\n    } // Before calculation, apply normalization\n\n\n    var sumq = sum(q);\n\n    if (sumq === 0) {\n      throw new Error('Sum of elements in first object must be non zero');\n    }\n\n    var sump = sum(p);\n\n    if (sump === 0) {\n      throw new Error('Sum of elements in second object must be non zero');\n    }\n\n    var qnorm = divide(q, sum(q));\n    var pnorm = divide(p, sum(p));\n    var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));\n\n    if (isNumeric(result)) {\n      return result;\n    } else {\n      return Number.NaN;\n    }\n  }\n\n  return kldivergence;\n}\n\nexports.name = 'kldivergence';\nexports.factory = factory;","'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var divide = load(require('../arithmetic/divide'));\n  var factorial = load(require('../probability/factorial'));\n  var isInteger = load(require('../utils/isInteger'));\n  var isPositive = load(require('../utils/isPositive'));\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n\n  return typed('multinomial', {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n}\n\nexports.name = 'multinomial';\nexports.factory = factory;","'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory(type, config, load, typed) {\n  var factorial = load(require('./factorial'));\n\n  var product = require('./product');\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n\n\n  var permutations = typed('permutations', {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      } // Permute n objects, k at a time\n\n\n      return product(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n\n      result = new type.BigNumber(1);\n\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n\n      return result;\n    } // TODO: implement support for collection in permutations\n\n  });\n  permutations.toTex = undefined; // use default template\n\n  return permutations;\n}\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}\n\nexports.name = 'permutations';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array} array     A one dimensional array\n   * @param {Int} number      An int or float\n   * @param {Array} weights   An array of ints or floats\n   * @return {number | Array} Returns a single random value from array when number is 1 or undefined.\n   *                          Returns an array with the configured number of elements when number is > 1.\n   */\n  // TODO: rework pickRandom to a typed-function\n\n  var pickRandom = distribution('uniform').pickRandom;\n  pickRandom.toTex = undefined; // use default template\n\n  return pickRandom;\n}\n\nexports.name = 'pickRandom';\nexports.factory = factory;","'use strict';\n\nvar seedrandom = require('seed-random'); // create a random seed here to prevent an infinite loop from seed-random\n// inside the factory. Reason is that math.random is defined as a getter/setter\n// and seed-random generates a seed from the local entropy by reading every\n// defined object including `math` itself. That means that whilst getting\n// math.random, it tries to get math.random, etc... an infinite loop.\n// See https://github.com/ForbesLindesay/seed-random/issues/6\n\n\nvar singletonRandom = seedrandom();\n\nfunction factory(type, config, load, typed, math) {\n  var random; // create a new random generator with given seed\n\n  function setSeed(seed) {\n    random = seed === null ? singletonRandom : seedrandom(String(seed));\n  } // initialize a seeded pseudo random number generator with config's random seed\n\n\n  setSeed(config.randomSeed); // wrapper function so the rng can be updated via generator\n\n  function rng() {\n    return random();\n  } // updates generator with a new instance of a seeded pseudo random number generator\n\n\n  math.on('config', function (curr, prev, changes) {\n    // if the user specified a randomSeed\n    if (changes.randomSeed !== undefined) {\n      // update generator with a new instance of a seeded pseudo random number generator\n      setSeed(curr.randomSeed);\n    }\n  });\n  return rng;\n}\n\nexports.factory = factory;\nexports.math = true;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random()       // returns a random number between 0 and 1\n   *     math.random(100)    // returns a random number between 0 and 100\n   *     math.random(30, 40) // returns a random number between 30 and 40\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n  // TODO: rework random to a typed-function\n\n  var random = distribution('uniform').random;\n  random.toTex = undefined; // use default template\n\n  return random;\n}\n\nexports.name = 'random';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var distribution = load(require('./distribution'));\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n  // TODO: rework randomInt to a typed-function\n\n  var randomInt = distribution('uniform').randomInt;\n  randomInt.toTex = undefined; // use default template\n\n  return randomInt;\n}\n\nexports.name = 'randomInt';\nexports.factory = factory;"],"sourceRoot":""}