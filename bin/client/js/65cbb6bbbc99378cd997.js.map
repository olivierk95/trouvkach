{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/sum.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/std.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/statistics/utils/improveErrorMessage.js"],"names":["deepForEach","__webpack_require__","reduce","containsCollections","exports","name","factory","type","config","load","typed","add","improveErrorMessage","sum","Array | Matrix","_sum","Array | Matrix, number | BigNumber","array","dim","_sum2","err","...","args","TypeError","toTex","undefined","value","number","BigNumber","Fraction","sqrt","variance","std","_std","Array | Matrix, string","normalization","length","SyntaxError","apply","arguments","message","indexOf","replace","getType","fnName","details","String","JSON","stringify","data","actual"],"mappings":"2FAEA,IAAAA,EAAkBC,EAAQ,IAE1BC,EAAaD,EAAQ,IAErBE,EAA0BF,EAAQ,IA6FlCG,EAAAC,KAAA,MACAD,EAAAE,QA5FA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAiBR,EAAQ,KACzBW,EAAAH,EAAiCR,EAAQ,KAyBzCY,EAAAH,EAAA,OAEAI,iBAAAC,EAEAC,qCAiDA,SAAAC,EAAAC,GACA,IACA,IAAAC,EAAAjB,EAAAe,EAAAC,EAAAP,GAEA,OAAAQ,EACK,MAAAC,GACL,MAAAR,EAAAQ,EAAA,SArDAC,MAAA,SAAAC,GACA,GAAAnB,EAAAmB,GACA,UAAAC,UAAA,0CAGA,OAAAR,EAAAO,MAKA,OAFAT,EAAAW,WAAAC,EAEAZ,EAQA,SAAAE,EAAAE,GACA,IAAAJ,EASA,GARAb,EAAAiB,EAAA,SAAAS,GACA,IACAb,OAAAY,IAAAZ,EAAAa,EAAAf,EAAAE,EAAAa,GACO,MAAAN,GACP,MAAAR,EAAAQ,EAAA,MAAAM,WAIAD,IAAAZ,EACA,OAAAL,EAAAmB,QACA,aACA,SAEA,gBACA,WAAApB,EAAAqB,UAAA,GAEA,eACA,WAAArB,EAAAsB,SAAA,GAEA,QACA,SAIA,OAAAhB,sCCRAT,EAAAC,KAAA,MACAD,EAAAE,QA5EA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAoB,EAAArB,EAAkBR,EAAQ,KAC1B8B,EAAAtB,EAAsBR,EAAQ,MA0C9B+B,EAAAtB,EAAA,OAEAI,iBAAAmB,EAEAC,yBAAAD,EAEAZ,MAAA,SAAAC,GACA,OAAAW,EAAAX,MAKA,OAFAU,EAAAR,WAAAC,EAEAO,EAEA,SAAAC,EAAAhB,EAAAkB,GACA,OAAAlB,EAAAmB,OACA,UAAAC,YAAA,6DAGA,IACA,OAAAP,EAAAC,EAAAO,MAAA,KAAAC,YACK,MAAAnB,GACL,MAAAA,aAAAG,YAAA,IAAAH,EAAAoB,QAAAC,QAAA,QACA,IAAAlB,UAAAH,EAAAoB,QAAAE,QAAA,gBAEAtB,sCCtCAhB,EAAAE,QA/BA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAiC,EAAAlC,EAAqBR,EAAQ,KAY7B,gBAAAmB,EAAAwB,EAAAlB,GAEA,IAAAmB,EAEA,WAAAC,OAAA1B,GAAAqB,QAAA,oBACAI,EAAAN,UAAAH,OAAA,aAAAO,EAAAjB,GAAA,YAAAqB,KAAAC,UAAAtB,GAAA,eAAAN,EAAA6B,KAAAC,OAAA,IACA,IAAA3B,UAAA,oBAAAqB,EAAA,gCAAAC,KAGA,IAAAC,OAAA1B,GAAAqB,QAAA,oBACAI,EAAAN,UAAAH,OAAA,aAAAO,EAAAjB,GAAA,YAAAqB,KAAAC,UAAAtB,GAAA,OACA,IAAAH,UAAA,oBAAAqB,EAAA,wDAAAC,IAGAzB","file":"js/65cbb6bbbc99378cd997.js","sourcesContent":["'use strict';\n\nvar deepForEach = require('../../utils/collection/deepForEach');\n\nvar reduce = require('../../utils/collection/reduce');\n\nvar containsCollections = require('../../utils/collection/containsCollections');\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/addScalar'));\n  var improveErrorMessage = load(require('./utils/improveErrorMessage'));\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, var\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n\n  var sum = typed('sum', {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  sum.toTex = undefined; // use default template\n\n  return sum;\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    if (sum === undefined) {\n      switch (config.number) {\n        case 'number':\n          return 0;\n\n        case 'BigNumber':\n          return new type.BigNumber(0);\n\n        case 'Fraction':\n          return new type.Fraction(0);\n\n        default:\n          return 0;\n      }\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var _sum2 = reduce(array, dim, add);\n\n      return _sum2;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n}\n\nexports.name = 'sum';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var sqrt = load(require('../arithmetic/sqrt'));\n  var variance = load(require('../statistics/var'));\n  /**\n   * Compute the standard deviation of a matrix or a  list with values.\n   * The standard deviations is defined as the square root of the variance:\n   * `std(A) = sqrt(var(A))`.\n   * In case of a (multi dimensional) array or matrix, the standard deviation\n   * over all elements will be calculated.\n   *\n   * Optionally, the type of normalization can be specified as second\n   * parameter. The parameter `normalization` can be one of the following values:\n   *\n   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)\n   * - 'uncorrected'        The sum of squared errors is divided by n\n   * - 'biased'             The sum of squared errors is divided by (n + 1)\n   *\n   * Syntax:\n   *\n   *     math.std(a, b, c, ...)\n   *     math.std(A)\n   *     math.std(A, normalization)\n   *\n   * Examples:\n   *\n   *     math.std(2, 4, 6)                     // returns 2\n   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611\n   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979\n   *     math.std([2, 4, 6, 8], 'biased')      // returns 2\n   *\n   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707\n   *\n   * See also:\n   *\n   *    mean, median, max, min, prod, sum, var\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or or multiple scalar values\n   * @param {string} [normalization='unbiased']\n   *                        Determines how to normalize the variance.\n   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.\n   * @return {*} The standard deviation\n   */\n\n  var std = typed('std', {\n    // std([a, b, c, d, ...])\n    'Array | Matrix': _std,\n    // std([a, b, c, d, ...], normalization)\n    'Array | Matrix, string': _std,\n    // std(a, b, c, d, ...)\n    '...': function _(args) {\n      return _std(args);\n    }\n  });\n  std.toTex = undefined; // use default template\n\n  return std;\n\n  function _std(array, normalization) {\n    if (array.length === 0) {\n      throw new SyntaxError('Function std requires one or more parameters (0 provided)');\n    }\n\n    try {\n      return sqrt(variance.apply(null, arguments));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf(' var') !== -1) {\n        throw new TypeError(err.message.replace(' var', ' std'));\n      } else {\n        throw err;\n      }\n    }\n  }\n}\n\nexports.name = 'std';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var getType = load(require('../../utils/typeof'));\n  /**\n   * Improve error messages for statistics functions. Errors are typically\n   * thrown in an internally used function like larger, causing the error\n   * not to mention the function (like max) which is actually used by the user.\n   *\n   * @param {Error} err\n   * @param {String} fnName\n   * @param {*} [value]\n   * @return {Error}\n   */\n\n  return function improveErrorMessage(err, fnName, value) {\n    // TODO: add information with the index (also needs transform in expression parser)\n    var details;\n\n    if (String(err).indexOf('Unexpected type') !== -1) {\n      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';\n      return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);\n    }\n\n    if (String(err).indexOf('complex numbers') !== -1) {\n      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : '';\n      return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);\n    }\n\n    return err;\n  };\n}\n\nexports.factory = factory;"],"sourceRoot":""}