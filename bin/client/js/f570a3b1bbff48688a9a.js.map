{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/relational/equalScalar.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/relational/largerEq.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/relational/index.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/relational/equalText.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/relational/larger.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/relational/equal.js"],"names":["nearlyEqual","__webpack_require__","bigNearlyEqual","exports","factory","type","config","load","typed","equalScalar","boolean, boolean","x","y","number, number","epsilon","BigNumber, BigNumber","eq","Fraction, Fraction","equals","Complex, Complex","Unit, Unit","equalBase","Error","value","name","matrix","algorithm03","algorithm07","algorithm12","algorithm13","algorithm14","latex","largerEq","gte","compare","TypeError","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","valueOf","Array, Matrix","Matrix, Array","SparseMatrix, any","DenseMatrix, any","any, SparseMatrix","any, DenseMatrix","Array, any","any, Array","toTex","2","concat","operators","module","compareText","isZero","equalText","any, any","undefined","larger","gt","equal"],"mappings":"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","file":"js/f570a3b1bbff48688a9a.js","sourcesContent":["'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Test whether two values are equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  var equalScalar = typed('equalScalar', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x === y || nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.equals(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return equalScalar(x.value, y.value);\n    }\n  });\n  return equalScalar;\n}\n\nexports.factory = factory;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is larger or equal to y.\n   *\n   * The function returns true when x is larger than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.largerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 1 + 1)         // returns false\n   *    math.largerEq(2, 1 + 1)       // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n   */\n\n\n  var largerEq = typed('largerEq', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x >= y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x >= y || nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) !== -1;\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return largerEq(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, largerEq);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, largerEq, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, largerEq, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, largerEq);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return largerEq(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return largerEq(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return largerEq(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, largerEq, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, largerEq, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, largerEq, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, largerEq, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, largerEq, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, largerEq, true).valueOf();\n    }\n  });\n  largerEq.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['largerEq'], \"${args[1]}\\\\right)\")\n  };\n  return largerEq;\n}\n\nexports.name = 'largerEq';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [require('./compare'), require('./compareNatural'), require('./compareText'), require('./deepEqual'), require('./equal'), require('./equalText'), require('./larger'), require('./largerEq'), require('./smaller'), require('./smallerEq'), require('./unequal')];","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var compareText = load(require('./compareText'));\n  var isZero = load(require('../utils/isZero'));\n  /**\n   * Check equality of two strings. Comparison is case sensitive.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.equalText(x, y)\n   *\n   * Examples:\n   *\n   *    math.equalText('Hello', 'Hello')     // returns true\n   *    math.equalText('a', 'A')             // returns false\n   *    math.equal('2e3', '2000')            // returns true\n   *    math.equalText('2e3', '2000')        // returns false\n   *\n   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    equal, compareText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.\n   */\n\n  var equalText = typed('equalText', {\n    'any, any': function anyAny(x, y) {\n      return isZero(compareText(x, y));\n    }\n  });\n  equalText.toTex = undefined; // use default template\n\n  return equalText;\n}\n\nexports.name = 'equalText';\nexports.factory = factory;","'use strict';\n\nvar nearlyEqual = require('../../utils/number').nearlyEqual;\n\nvar bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n\n\n  var larger = typed('larger', {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x > y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === 1;\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return larger(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, larger);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, larger, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, larger, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, larger);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return larger(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return larger(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return larger(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, larger, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, larger, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, larger, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, larger, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, larger, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, larger, true).valueOf();\n    }\n  });\n  larger.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['larger'], \"${args[1]}\\\\right)\")\n  };\n  return larger;\n}\n\nexports.name = 'larger';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('./equalScalar'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n\n  var latex = require('../../utils/latex');\n  /**\n   * Test whether two values are equal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\n   * equal to `null` and nothing else, and `undefined` is only equal to\n   * `undefined` and nothing else. Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.equal(x, y)\n   *\n   * Examples:\n   *\n   *    math.equal(2 + 2, 3)         // returns false\n   *    math.equal(2 + 2, 4)         // returns true\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.equal(a, b)             // returns true\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.equal(c, d)             // returns [true, false, true]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.equal(\"1000\", \"1e3\")    // returns true\n   *    math.equal(0, null)          // returns false\n   *\n   * See also:\n   *\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\n   *\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\n   */\n\n\n  var equal = typed('equal', {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n\n      if (y === null) {\n        return x === null;\n      }\n\n      if (x === undefined) {\n        return y === undefined;\n      }\n\n      if (y === undefined) {\n        return x === undefined;\n      }\n\n      return equalScalar(x, y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, equalScalar);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, equalScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, equalScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, equalScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return equal(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return equal(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return equal(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, equalScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, equalScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, equalScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, equalScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, equalScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, equalScalar, true).valueOf();\n    }\n  });\n  equal.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['equal'], \"${args[1]}\\\\right)\")\n  };\n  return equal;\n}\n\nexports.name = 'equal';\nexports.factory = factory;"],"sourceRoot":""}