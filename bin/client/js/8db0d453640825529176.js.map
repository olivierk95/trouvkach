{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/round.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/sign.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/subtract.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/square.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/unaryPlus.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/unaryMinus.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/arithmetic/sqrt.js"],"names":["isInteger","__webpack_require__","toFixed","deepMap","NO_INT","_round","value","decimals","parseFloat","exports","name","factory","type","config","load","typed","matrix","equalScalar","zeros","algorithm11","algorithm12","algorithm14","round","number","x","number, number","n","TypeError","Error","Complex","Complex, number","Complex, BigNumber","_n","toNumber","number, BigNumber","BigNumber","toDecimalPlaces","BigNumber, BigNumber","Fraction","Fraction, number","Array | Matrix","SparseMatrix, number | BigNumber","y","DenseMatrix, number | BigNumber","number | Complex | BigNumber, SparseMatrix","size","storage","number | Complex | BigNumber, DenseMatrix","Array, number | BigNumber","valueOf","number | Complex | BigNumber, Array","toTex","1","2","undefined","sign","cmp","s","Unit","DimensionError","checkEqualDimensions","xsize","ysize","length","latex","addScalar","unaryMinus","algorithm01","algorithm03","algorithm05","algorithm10","algorithm13","subtract","Complex, Complex","sub","minus","Fraction, Fraction","Unit, Unit","equalBase","res","clone","fixPrefix","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","Array, Matrix","Matrix, Array","SparseMatrix, any","DenseMatrix, any","any, SparseMatrix","any, DenseMatrix","Array, any","any, Array","concat","operators","square","mul","times","pow","unaryPlus","boolean | string","neg","sqrt","_sqrtNumber","isNegative","predictable","isNaN","NaN","Math"],"mappings":"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","file":"js/8db0d453640825529176.js","sourcesContent":["'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nvar toFixed = require('../../utils/number').toFixed;\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nvar NO_INT = 'Number of decimals in function round must be an integer';\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var equalScalar = load(require('../relational/equalScalar'));\n  var zeros = load(require('../matrix/zeros'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2)              // returns number 3\n   *    math.round(3.8)              // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  var round = typed('round', {\n    'number': function number(x) {\n      return _round(x, 0);\n    },\n    'number, number': function numberNumber(x, n) {\n      if (!isInteger(n)) {\n        throw new TypeError(NO_INT);\n      }\n\n      if (n < 0 || n > 15) {\n        throw new Error('Number of decimals in function round must be in te range of 0-15');\n      }\n\n      return _round(x, n);\n    },\n    'Complex': function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    'Fraction': function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, round, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, round, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, round, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, round, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  });\n  round.toTex = {\n    1: \"\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil\",\n    2: undefined // use default template\n\n  };\n  return round;\n}\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n * @private\n */\n\n\nfunction _round(value, decimals) {\n  return parseFloat(toFixed(value, decimals));\n}\n\nexports.name = 'round';\nexports.factory = factory;","'use strict';\n\nvar number = require('../../utils/number');\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  var sign = typed('sign', {\n    'number': number.sign,\n    'Complex': function Complex(x) {\n      return x.sign();\n    },\n    'BigNumber': function BigNumber(x) {\n      return new type.BigNumber(x.cmp(0));\n    },\n    'Fraction': function Fraction(x) {\n      return new type.Fraction(x.s, 1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return deepMap(x, sign, true);\n    },\n    'Unit': function Unit(x) {\n      return sign(x.value);\n    }\n  });\n  sign.toTex = {\n    1: \"\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)\"\n  };\n  return sign;\n}\n\nexports.name = 'sign';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var addScalar = load(require('./addScalar'));\n  var unaryMinus = load(require('./unaryMinus'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14')); // TODO: split function subtract in two: subtract and subtractScalar\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  var subtract = typed('subtract', {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, subtract);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, subtract, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, subtract, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, subtract);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, subtract);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, subtract, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, subtract, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n  subtract.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['subtract'], \"${args[1]}\\\\right)\")\n  };\n  return subtract;\n}\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}\n\nexports.name = 'subtract';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Compute the square of a value, `x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.square(x)\n   *\n   * Examples:\n   *\n   *    math.square(2)           // returns number 4\n   *    math.square(3)           // returns number 9\n   *    math.pow(3, 2)           // returns number 9\n   *    math.multiply(3, 3)      // returns number 9\n   *\n   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]\n   *\n   * See also:\n   *\n   *    multiply, cube, sqrt, pow\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            Number for which to calculate the square\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Squared value\n   */\n  var square = typed('square', {\n    'number': function number(x) {\n      return x * x;\n    },\n    'Complex': function Complex(x) {\n      return x.mul(x);\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.times(x);\n    },\n    'Fraction': function Fraction(x) {\n      return x.mul(x);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since square(0) = 0\n      return deepMap(x, square, true);\n    },\n    'Unit': function Unit(x) {\n      return x.pow(2);\n    }\n  });\n  square.toTex = {\n    1: \"\\\\left(${args[0]}\\\\right)^2\"\n  };\n  return square;\n}\n\nexports.name = 'square';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n\n\n  var unaryPlus = typed('unaryPlus', {\n    'number': function number(x) {\n      return x;\n    },\n    'Complex': function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    'BigNumber': function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    'Fraction': function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    'Unit': function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, unaryPlus, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new type.BigNumber(+x) : +x;\n    }\n  });\n  unaryPlus.toTex = {\n    1: \"\".concat(latex.operators['unaryPlus'], \"\\\\left(${args[0]}\\\\right)\")\n  };\n  return unaryPlus;\n}\n\nexports.name = 'unaryPlus';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n\n\n  var unaryMinus = typed('unaryMinus', {\n    'number': function number(x) {\n      return -x;\n    },\n    'Complex': function Complex(x) {\n      return x.neg();\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.neg();\n    },\n    'Fraction': function Fraction(x) {\n      return x.neg();\n    },\n    'Unit': function Unit(x) {\n      var res = x.clone();\n      res.value = unaryMinus(x.value);\n      return res;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryMinus(0) = 0\n      return deepMap(x, unaryMinus, true);\n    } // TODO: add support for string\n\n  });\n  unaryMinus.toTex = {\n    1: \"\".concat(latex.operators['unaryMinus'], \"\\\\left(${args[0]}\\\\right)\")\n  };\n  return unaryMinus;\n}\n\nexports.name = 'unaryMinus';\nexports.factory = factory;","'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Array | Matrix | Unit}\n   *            Returns the square root of `x`\n   */\n  var sqrt = typed('sqrt', {\n    'number': _sqrtNumber,\n    'Complex': function Complex(x) {\n      return x.sqrt();\n    },\n    'BigNumber': function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sqrt(0) = 0\n      return deepMap(x, sqrt, true);\n    },\n    'Unit': function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new type.Complex(x, 0).sqrt();\n    }\n  }\n\n  sqrt.toTex = {\n    1: \"\\\\sqrt{${args[0]}}\"\n  };\n  return sqrt;\n}\n\nexports.name = 'sqrt';\nexports.factory = factory;"],"sourceRoot":""}