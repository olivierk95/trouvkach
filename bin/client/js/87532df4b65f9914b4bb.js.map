{"version":3,"sources":["webpack:////home/raph/home/raph/becode/trouvkach/node_modules/mathjs/lib/function/arithmetic/gcd.js"],"names":["isInteger","__webpack_require__","_gcd","a","b","Error","r","exports","name","factory","type","config","load","typed","matrix","algorithm01","algorithm04","algorithm10","algorithm13","algorithm14","gcd","number, number","BigNumber, BigNumber","isInt","zero","BigNumber","isZero","mod","lt","neg","Fraction, Fraction","x","y","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","valueOf","Array, Matrix","Matrix, Array","SparseMatrix, number | BigNumber","DenseMatrix, number | BigNumber","number | BigNumber, SparseMatrix","number | BigNumber, DenseMatrix","Array, number | BigNumber","number | BigNumber, Array","Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber","args","res","i","length","toTex"],"mappings":"4FAEA,IAAAA,EAAgBC,EAAQ,GAAoBD,UAoI5C,SAAAE,EAAAC,EAAAC,GACA,IAAAJ,EAAAG,KAAAH,EAAAI,GACA,UAAAC,MAAA,sDAMA,IAFA,IAAAC,EAEA,IAAAF,GACAE,EAAAH,EAAAC,EACAD,EAAAC,EACAA,EAAAE,EAGA,OAAAH,EAAA,GAAAA,IAGAI,EAAAC,KAAA,MACAD,EAAAE,QApJA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAoBX,EAAQ,IAC5Bc,EAAAH,EAAyBX,EAAQ,KACjCe,EAAAJ,EAAyBX,EAAQ,KACjCgB,EAAAL,EAAyBX,EAAQ,KACjCiB,EAAAN,EAAyBX,EAAQ,IACjCkB,EAAAP,EAAyBX,EAAQ,IA2BjCmB,EAAAP,EAAA,OACAQ,iBAAAnB,EACAoB,uBAqEA,SAAAnB,EAAAC,GACA,IAAAD,EAAAoB,UAAAnB,EAAAmB,QACA,UAAAlB,MAAA,sDAMA,IAFA,IAAAmB,EAAA,IAAAd,EAAAe,UAAA,IAEArB,EAAAsB,UAAA,CACA,IAAApB,EAAAH,EAAAwB,IAAAvB,GACAD,EAAAC,EACAA,EAAAE,EAGA,OAAAH,EAAAyB,GAAAJ,GAAArB,EAAA0B,MAAA1B,GAlFA2B,qBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAX,IAAAY,IAEAC,6BAAA,SAAAF,EAAAC,GACA,OAAAhB,EAAAe,EAAAC,EAAAZ,IAEAc,4BAAA,SAAAH,EAAAC,GACA,OAAAjB,EAAAiB,EAAAD,EAAAX,GAAA,IAEAe,4BAAA,SAAAJ,EAAAC,GACA,OAAAjB,EAAAgB,EAAAC,EAAAZ,GAAA,IAEAgB,2BAAA,SAAAL,EAAAC,GACA,OAAAd,EAAAa,EAAAC,EAAAZ,IAEAiB,eAAA,SAAAN,EAAAC,GAEA,OAAAZ,EAAAN,EAAAiB,GAAAjB,EAAAkB,IAAAM,WAEAC,gBAAA,SAAAR,EAAAC,GAEA,OAAAZ,EAAAN,EAAAiB,GAAAC,IAEAQ,gBAAA,SAAAT,EAAAC,GAEA,OAAAZ,EAAAW,EAAAjB,EAAAkB,KAEAS,mCAAA,SAAAV,EAAAC,GACA,OAAAf,EAAAc,EAAAC,EAAAZ,GAAA,IAEAsB,kCAAA,SAAAX,EAAAC,GACA,OAAAb,EAAAY,EAAAC,EAAAZ,GAAA,IAEAuB,mCAAA,SAAAZ,EAAAC,GACA,OAAAf,EAAAe,EAAAD,EAAAX,GAAA,IAEAwB,kCAAA,SAAAb,EAAAC,GACA,OAAAb,EAAAa,EAAAD,EAAAX,GAAA,IAEAyB,4BAAA,SAAAd,EAAAC,GAEA,OAAAb,EAAAL,EAAAiB,GAAAC,EAAAZ,GAAA,GAAAkB,WAEAQ,4BAAA,SAAAf,EAAAC,GAEA,OAAAb,EAAAL,EAAAkB,GAAAD,EAAAX,GAAA,GAAAkB,WAGAS,mHAAA,SAAA5C,EAAAC,EAAA4C,GAGA,IAFA,IAAAC,EAAA7B,EAAAjB,EAAAC,GAEA8C,EAAA,EAAqBA,EAAAF,EAAAG,OAAiBD,IACtCD,EAAA7B,EAAA6B,EAAAD,EAAAE,IAGA,OAAAD,KAIA,OADA7B,EAAAgC,MAAA,8BACAhC","file":"js/87532df4b65f9914b4bb.js","sourcesContent":["'use strict';\n\nvar isInteger = require('../../utils/number').isInteger;\n\nfunction factory(type, config, load, typed) {\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));\n  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));\n  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n\n  var gcd = typed('gcd', {\n    'number, number': _gcd,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, gcd);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, gcd, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, gcd, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, gcd);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return gcd(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm10(x, y, gcd, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, gcd, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm10(y, x, gcd, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, gcd, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, gcd, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, gcd, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = gcd(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = gcd(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  gcd.toTex = \"\\\\gcd\\\\left(${args}\\\\right)\";\n  return gcd;\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new type.BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n}\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n * @private\n */\n\n\nfunction _gcd(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  } // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n  var r;\n\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n\n  return a < 0 ? -a : a;\n}\n\nexports.name = 'gcd';\nexports.factory = factory;"],"sourceRoot":""}