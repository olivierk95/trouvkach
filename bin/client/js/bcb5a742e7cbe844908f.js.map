{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/node/utils/access.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/node/utils/assign.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","errorTransform","__webpack_require__","transform","getSafeProperty","exports","factory","type","config","load","typed","subset","object","index","Array","isArray","isObjectProperty","TypeError","getObjectProperty","err","setSafeProperty","matrix","value","valueOf"],"mappings":"4FAEA,SAAAA,EAAAC,GAAwU,OAAtOD,EAA3E,mBAAAE,QAAA,iBAAAA,OAAAC,SAA2E,SAAAF,GAAkC,cAAAA,GAA+B,SAAAA,GAAkC,OAAAA,GAAA,mBAAAC,QAAAD,EAAAG,cAAAF,QAAAD,IAAAC,OAAAG,UAAA,gBAAAJ,IAAmIA,GAExU,IAAAK,EAAqBC,EAAQ,IAAiCC,UAE9DC,EAAsBF,EAAQ,IAAwBE,gBAyCtDC,EAAAC,QAvCA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAoBP,EAAQ,KAa5B,gBAAAU,EAAAC,GACA,IACA,GAAAC,MAAAC,QAAAH,GACA,OAAAD,EAAAC,EAAAC,GACO,GAAAD,GAAA,mBAAAA,EAAAD,OAEP,OAAAC,EAAAD,OAAAE,GACO,oBAAAD,EAEP,OAAAD,EAAAC,EAAAC,GACO,cAAAlB,EAAAiB,GAAA,CACP,IAAAC,EAAAG,mBACA,UAAAC,UAAA,mDAGA,OAAAb,EAAAQ,EAAAC,EAAAK,qBAEA,UAAAD,UAAA,kDAEK,MAAAE,GACL,MAAAlB,EAAAkB,wCCxCA,SAAAxB,EAAAC,GAAwU,OAAtOD,EAA3E,mBAAAE,QAAA,iBAAAA,OAAAC,SAA2E,SAAAF,GAAkC,cAAAA,GAA+B,SAAAA,GAAkC,OAAAA,GAAA,mBAAAC,QAAAD,EAAAG,cAAAF,QAAAD,IAAAC,OAAAG,UAAA,gBAAAJ,IAAmIA,GAExU,IAAAK,EAAqBC,EAAQ,IAAiCC,UAE9DiB,EAAsBlB,EAAQ,IAAwBkB,gBA8CtDf,EAAAC,QA5CA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAoBP,EAAQ,KAC5BmB,EAAAZ,EAAoBP,EAAQ,IAgB5B,gBAAAU,EAAAC,EAAAS,GACA,IACA,GAAAR,MAAAC,QAAAH,GACA,OAAAS,EAAAT,GAAAD,OAAAE,EAAAS,GAAAC,UACO,GAAAX,GAAA,mBAAAA,EAAAD,OAEP,OAAAC,EAAAD,OAAAE,EAAAS,GACO,oBAAAV,EAEP,OAAAD,EAAAC,EAAAC,EAAAS,GACO,cAAA3B,EAAAiB,GAAA,CACP,IAAAC,EAAAG,mBACA,MAAAC,UAAA,mDAIA,OADAG,EAAAR,EAAAC,EAAAK,oBAAAI,GACAV,EAEA,UAAAK,UAAA,kDAEK,MAAAE,GACL,MAAAlB,EAAAkB","file":"js/bcb5a742e7cbe844908f.js","sourcesContent":["'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar errorTransform = require('../../transform/error.transform').transform;\n\nvar getSafeProperty = require('../../../utils/customs').getSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  /**\n   * Retrieve part of an object:\n   *\n   * - Retrieve a property from an object\n   * - Retrieve a part of a string\n   * - Retrieve a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @return {Object | Array | Matrix | string} Returns the subset\n   */\n\n  return function access(object, index) {\n    try {\n      if (Array.isArray(object)) {\n        return subset(object, index);\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index);\n      } else if (typeof object === 'string') {\n        // TODO: move getStringSubset into a separate util file, use that\n        return subset(object, index);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw new TypeError('Cannot apply a numeric index as object property');\n        }\n\n        return getSafeProperty(object, index.getObjectProperty());\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}\n\nexports.factory = factory;","'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar errorTransform = require('../../transform/error.transform').transform;\n\nvar setSafeProperty = require('../../../utils/customs').setSafeProperty;\n\nfunction factory(type, config, load, typed) {\n  var subset = load(require('../../../function/matrix/subset'));\n  var matrix = load(require('../../../type/matrix/function/matrix'));\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        return matrix(object).subset(index, value).valueOf();\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}\n\nexports.factory = factory;"],"sourceRoot":""}