{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/combinatorics/stirlingS2.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/combinatorics/index.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/combinatorics/bellNumbers.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/combinatorics/composition.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/combinatorics/catalan.js"],"names":["exports","name","factory","type","config","load","typed","add","__webpack_require__","subtract","multiply","divide","pow","factorial","combinations","isNegative","isInteger","larger","stirlingS2","number | BigNumber, number | BigNumber","n","k","TypeError","kFactorial","result","i","negativeOne","kChooseI","iPower","toTex","2","module","bellNumbers","number | BigNumber","1","isPositive","composition","undefined","catalan"],"mappings":"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","file":"js/f47bdbc2a35331ff28c3.js","sourcesContent":["'use strict';\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var subtract = load(require('../arithmetic/subtract'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var divide = load(require('../arithmetic/divide'));\n  var pow = load(require('../arithmetic/pow'));\n  var factorial = load(require('../probability/factorial'));\n  var combinations = load(require('../probability/combinations'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n  var larger = load(require('../relational/larger'));\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1, then s(n,k) = 1\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n\n  var stirlingS2 = typed('stirlingS2', {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\n\n\n      var kFactorial = factorial(k);\n      var result = 0;\n\n      for (var i = 0; i <= k; i++) {\n        var negativeOne = pow(-1, subtract(k, i));\n        var kChooseI = combinations(k, i);\n        var iPower = pow(i, n);\n        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));\n      }\n\n      return divide(result, kFactorial);\n    }\n  });\n  stirlingS2.toTex = {\n    2: \"\\\\mathrm{S}\\\\left(${args}\\\\right)\"\n  };\n  return stirlingS2;\n}\n\nexports.name = 'stirlingS2';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [require('./bellNumbers'), require('./composition'), require('./stirlingS2'), require('./catalan')];","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var stirlingS2 = load(require('./stirlingS2'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n  /**\n   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\n   * bellNumbers only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.bellNumbers(n)\n   *\n   * Examples:\n   *\n   *    math.bellNumbers(3) // returns 5\n   *    math.bellNumbers(8) // returns 4140\n   *\n   * See also:\n   *\n   *    stirlingS2\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @return {Number | BigNumber}     B(n)\n   */\n\n  var bellNumbers = typed('bellNumbers', {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function bellNumbers');\n      } // Sum (k=0, n) S(n,k).\n\n\n      var result = 0;\n\n      for (var i = 0; i <= n; i++) {\n        result = add(result, stirlingS2(n, i));\n      }\n\n      return result;\n    }\n  });\n  bellNumbers.toTex = {\n    1: \"\\\\mathrm{B}_{${args[0]}}\"\n  };\n  return bellNumbers;\n}\n\nexports.name = 'bellNumbers';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var combinations = load(require('../probability/combinations'));\n  var add = load(require('../arithmetic/addScalar'));\n  var isPositive = load(require('../utils/isPositive'));\n  var isInteger = load(require('../utils/isInteger'));\n  var larger = load(require('../relational/larger'));\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n\n  var composition = typed('composition', {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n\n      return combinations(add(n, -1), add(k, -1));\n    }\n  });\n  composition.toTex = undefined; // use default template\n\n  return composition;\n}\n\nexports.name = 'composition';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var add = load(require('../arithmetic/add'));\n  var divide = load(require('../arithmetic/divide'));\n  var multiply = load(require('../arithmetic/multiply'));\n  var combinations = load(require('../probability/combinations'));\n  var isNegative = load(require('../utils/isNegative'));\n  var isInteger = load(require('../utils/isInteger'));\n  /**\n   * The Catalan Numbers enumerate combinatorial structures of many different types.\n   * catalan only takes integer arguments.\n   * The following condition must be enforced: n >= 0\n   *\n   * Syntax:\n   *\n   *   math.catalan(n)\n   *\n   * Examples:\n   *\n   *    math.catalan(3) // returns 5\n   *    math.catalan(8) // returns 1430\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    nth Catalan number\n   * @return {Number | BigNumber}     Cn(n)\n   */\n\n  var catalan = typed('catalan', {\n    'number | BigNumber': function numberBigNumber(n) {\n      if (!isInteger(n) || isNegative(n)) {\n        throw new TypeError('Non-negative integer value expected in function catalan');\n      }\n\n      return divide(combinations(multiply(n, 2), n), add(n, 1));\n    }\n  });\n  catalan.toTex = {\n    1: \"\\\\mathrm{C}_{${args[0]}}\"\n  };\n  return catalan;\n}\n\nexports.name = 'catalan';\nexports.factory = factory;"],"sourceRoot":""}