{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/type/matrix/utils/algorithm08.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/type/matrix/utils/algorithm09.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/type/matrix/utils/algorithm07.js"],"names":["DimensionError","__webpack_require__","exports","name","factory","type","config","load","typed","equalScalar","SparseMatrix","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","RangeError","Error","dt","rows","columns","eq","zero","cf","find","convert","k","k0","k1","i","cvalues","cindex","cptr","c","values","index","ptr","size","datatype","x","w","j","mark","push","v","splice","undefined","vb","vc","DenseMatrix","_scatter","m","cdata","data","xa","xb","wa","wb","va"],"mappings":"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","file":"js/70c01a98bb64d5005dd6.js","sourcesContent":["'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm08 = function algorithm08(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var k, k0, k1, i; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values in a\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // mark workspace\n\n        w[i] = mark; // set value\n\n        x[i] = avalues[k]; // add index\n\n        cindex.push(i);\n      } // loop values in b\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check value exists in workspace\n\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      } // initialize first index in j\n\n\n      k = cptr[j]; // loop index in j\n\n      while (k < cindex.length) {\n        // row\n        i = cindex[k]; // value @ i\n\n        var v = x[i]; // check for zero value\n\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v); // increment pointer\n\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm08;\n}\n\nexports.name = 'algorithm08';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var equalScalar = load(require('../../../function/relational/equalScalar'));\n  var SparseMatrix = type.SparseMatrix;\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm09 = function algorithm09(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // matrix\n\n    var c = new SparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // column mark\n\n      var mark = j + 1; // check we need to process values\n\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k]; // update workspace\n\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      } // loop A(:,j)\n\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // check we need to process values\n\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero; // invoke f\n\n          var vc = cf(avalues[k], vb); // check zero value\n\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i); // push value\n\n            cvalues.push(vc);\n          }\n        } else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n\n  return algorithm09;\n}\n\nexports.name = 'algorithm09';\nexports.factory = factory;","'use strict';\n\nvar DimensionError = require('../../../error/DimensionError');\n\nfunction factory(type, config, load, typed) {\n  var DenseMatrix = type.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  var algorithm07 = function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // matrix\n\n\n    var c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n\n  return algorithm07;\n}\n\nexports.name = 'algorithm07';\nexports.factory = factory;"],"sourceRoot":""}