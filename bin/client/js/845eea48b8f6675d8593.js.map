{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/core/core.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/constants.js"],"names":["__webpack_require__","isFactory","typedFactory","emitter","importFactory","configFactory","exports","create","options","Object","Error","factories","instances","math","mixin","type","expression","transform","mathWithTransform","typed","_config","epsilon","matrix","number","precision","predictable","randomSeed","load","factory","instance","index","indexOf","push","config","object","bigConstants","setConstant","name","value","setLazyConstant","resolver","lazy","on","curr","prev","BigNumber","Infinity","NaN","pi","tau","e","phi","ln","div","sqrt","Math","PI","E","LN2","LN10","LOG2E","LOG10E","SQRT1_2","SQRT2","Complex","I"],"mappings":"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","file":"js/845eea48b8f6675d8593.js","sourcesContent":["'use strict';\n\nrequire('./../utils/polyfills');\n\nvar isFactory = require('./../utils/object').isFactory;\n\nvar typedFactory = require('./typed');\n\nvar emitter = require('./../utils/emitter');\n\nvar importFactory = require('./function/import');\n\nvar configFactory = require('./function/config');\n/**\n * Math.js core. Creates a new, empty math.js instance\n * @param {Object} [options] Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\n\n\nexports.create = function create(options) {\n  // simple test for ES5 support\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');\n  } // cached factories and instances\n\n\n  var factories = [];\n  var instances = []; // create a namespace for the mathjs instance, and attach emitter functions\n\n  var math = emitter.mixin({});\n  math.type = {};\n  math.expression = {\n    transform: {},\n    mathWithTransform: {} // create a new typed instance\n\n  };\n  math.typed = typedFactory.create(math.type); // create configuration options. These are private\n\n  var _config = {\n    // minimum relative difference between two compared values,\n    // used by all comparison functions\n    epsilon: 1e-12,\n    // type of default matrix output. Choose 'matrix' (default) or 'array'\n    matrix: 'Matrix',\n    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n    number: 'number',\n    // number of significant digits in BigNumbers\n    precision: 64,\n    // predictable output type of functions. When true, output type depends only\n    // on the input types. When false (default), output type can vary depending\n    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n    // predictable is false, and returns `NaN` when true.\n    predictable: false,\n    // random seed for seeded pseudo random number generation\n    // null = randomly seed\n    randomSeed: null\n    /**\n     * Load a function or data type from a factory.\n     * If the function or data type already exists, the existing instance is\n     * returned.\n     * @param {{type: string, name: string, factory: Function}} factory\n     * @returns {*}\n     */\n\n  };\n\n  function load(factory) {\n    if (!isFactory(factory)) {\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = factories.indexOf(factory);\n    var instance;\n\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, _config, load, math.typed, math);\n      } else {\n        instance = factory.factory(math.type, _config, load, math.typed);\n      } // append to the cache\n\n\n      factories.push(factory);\n      instances.push(instance);\n    } else {\n      // already existing function, return the cached instance\n      instance = instances[index];\n    }\n\n    return instance;\n  } // load the import and config functions\n\n\n  math['import'] = load(importFactory);\n  math['config'] = load(configFactory);\n  math.expression.mathWithTransform['config'] = math['config']; // apply options\n\n  if (options) {\n    math.config(options);\n  }\n\n  return math;\n};","'use strict';\n\nvar object = require('./utils/object');\n\nvar bigConstants = require('./utils/bignumber/constants');\n\nfunction factory(type, config, load, typed, math) {\n  // listen for changed in the configuration, automatically reload\n  // constants when needed\n  math.on('config', function (curr, prev) {\n    if (curr.number !== prev.number) {\n      factory(type, config, load, typed, math);\n    }\n  });\n  setConstant(math, 'true', true);\n  setConstant(math, 'false', false);\n  setConstant(math, 'null', null);\n  setConstant(math, 'uninitialized', 'Error: Constant uninitialized is removed since v4.0.0. Use null instead');\n\n  if (config.number === 'BigNumber') {\n    setConstant(math, 'Infinity', new type.BigNumber(Infinity));\n    setConstant(math, 'NaN', new type.BigNumber(NaN));\n    setLazyConstant(math, 'pi', function () {\n      return bigConstants.pi(type.BigNumber);\n    });\n    setLazyConstant(math, 'tau', function () {\n      return bigConstants.tau(type.BigNumber);\n    });\n    setLazyConstant(math, 'e', function () {\n      return bigConstants.e(type.BigNumber);\n    });\n    setLazyConstant(math, 'phi', function () {\n      return bigConstants.phi(type.BigNumber);\n    }); // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\n    setLazyConstant(math, 'E', function () {\n      return math.e;\n    });\n    setLazyConstant(math, 'LN2', function () {\n      return new type.BigNumber(2).ln();\n    });\n    setLazyConstant(math, 'LN10', function () {\n      return new type.BigNumber(10).ln();\n    });\n    setLazyConstant(math, 'LOG2E', function () {\n      return new type.BigNumber(1).div(new type.BigNumber(2).ln());\n    });\n    setLazyConstant(math, 'LOG10E', function () {\n      return new type.BigNumber(1).div(new type.BigNumber(10).ln());\n    });\n    setLazyConstant(math, 'PI', function () {\n      return math.pi;\n    });\n    setLazyConstant(math, 'SQRT1_2', function () {\n      return new type.BigNumber('0.5').sqrt();\n    });\n    setLazyConstant(math, 'SQRT2', function () {\n      return new type.BigNumber(2).sqrt();\n    });\n  } else {\n    setConstant(math, 'Infinity', Infinity);\n    setConstant(math, 'NaN', NaN);\n    setConstant(math, 'pi', Math.PI);\n    setConstant(math, 'tau', Math.PI * 2);\n    setConstant(math, 'e', Math.E);\n    setConstant(math, 'phi', 1.61803398874989484820458683436563811772030917980576286213545); // golden ratio, (1+sqrt(5))/2\n    // uppercase constants (for compatibility with built-in Math)\n\n    setConstant(math, 'E', math.e);\n    setConstant(math, 'LN2', Math.LN2);\n    setConstant(math, 'LN10', Math.LN10);\n    setConstant(math, 'LOG2E', Math.LOG2E);\n    setConstant(math, 'LOG10E', Math.LOG10E);\n    setConstant(math, 'PI', math.pi);\n    setConstant(math, 'SQRT1_2', Math.SQRT1_2);\n    setConstant(math, 'SQRT2', Math.SQRT2);\n  } // complex i\n\n\n  if (type.Complex) {\n    setConstant(math, 'i', type.Complex.I);\n  } // meta information\n\n\n  setConstant(math, 'version', require('./version'));\n} // create a constant in both math and mathWithTransform\n\n\nfunction setConstant(math, name, value) {\n  math[name] = value;\n  math.expression.mathWithTransform[name] = value;\n} // create a lazy constant in both math and mathWithTransform\n\n\nfunction setLazyConstant(math, name, resolver) {\n  object.lazy(math, name, resolver);\n  object.lazy(math.expression.mathWithTransform, name, resolver);\n}\n\nexports.factory = factory;\nexports.lazy = false; // no lazy loading of constants, the constants themselves are lazy when needed\n\nexports.math = true; // request access to the math namespace"],"sourceRoot":""}