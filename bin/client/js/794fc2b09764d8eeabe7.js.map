{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/special/erf.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/mad.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/max.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/mean.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/median.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/min.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/mode.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/prod.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/quantileSeq.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/std.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/sum.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/statistics/var.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/acos.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/acosh.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/acot.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/acoth.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/acsc.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/acsch.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/asec.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/asech.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/asin.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/asinh.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/atan.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/atanh.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/atan2.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/cos.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/cosh.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/cot.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/coth.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/csc.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/csch.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/sec.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/sech.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/sin.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/sinh.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/tan.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/trigonometry/tanh.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/units/to.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/clone.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/format.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/isNaN.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/isInteger.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/isNegative.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/isNumeric.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/hasNumericValue.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/isPositive.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/isPrime.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/isZero.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/expression/embeddedDocs/function/utils/typeof.js"],"names":["module","exports","name","category","syntax","description","examples","seealso"],"mappings":"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","file":"js/794fc2b09764d8eeabe7.js","sourcesContent":["\"use strict\";\n\nmodule.exports = {\n  'name': 'erf',\n  'category': 'Special',\n  'syntax': ['erf(x)'],\n  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',\n  'examples': ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],\n  'seealso': []\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'mad',\n  'category': 'Statistics',\n  'syntax': ['mad(a, b, c, ...)', 'mad(A)'],\n  'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',\n  'examples': ['mad(10, 20, 30)', 'mad([1, 2, 3])'],\n  'seealso': ['mean', 'median', 'std', 'abs']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'max',\n  'category': 'Statistics',\n  'syntax': ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],\n  'description': 'Compute the maximum value of a list of values.',\n  'examples': ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],\n  'seealso': ['mean', 'median', 'min', 'prod', 'std', 'sum', 'var']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'mean',\n  'category': 'Statistics',\n  'syntax': ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],\n  'description': 'Compute the arithmetic mean of a list of values.',\n  'examples': ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],\n  'seealso': ['max', 'median', 'min', 'prod', 'std', 'sum', 'var']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'median',\n  'category': 'Statistics',\n  'syntax': ['median(a, b, c, ...)', 'median(A)'],\n  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',\n  'examples': ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],\n  'seealso': ['max', 'mean', 'min', 'prod', 'std', 'sum', 'var', 'quantileSeq']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'min',\n  'category': 'Statistics',\n  'syntax': ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],\n  'description': 'Compute the minimum value of a list of values.',\n  'examples': ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],\n  'seealso': ['max', 'mean', 'median', 'prod', 'std', 'sum', 'var']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'mode',\n  'category': 'Statistics',\n  'syntax': ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],\n  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',\n  'examples': ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],\n  'seealso': ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'var']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'prod',\n  'category': 'Statistics',\n  'syntax': ['prod(a, b, c, ...)', 'prod(A)'],\n  'description': 'Compute the product of all values.',\n  'examples': ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],\n  'seealso': ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'var']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'quantileSeq',\n  'category': 'Statistics',\n  'syntax': ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],\n  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \\n\\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',\n  'examples': ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],\n  'seealso': ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'var']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'std',\n  'category': 'Statistics',\n  'syntax': ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],\n  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n  'examples': ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], \"uncorrected\")', 'std([2, 4, 6, 8], \"biased\")', 'std([1, 2, 3; 4, 5, 6])'],\n  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'sum', 'var']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'sum',\n  'category': 'Statistics',\n  'syntax': ['sum(a, b, c, ...)', 'sum(A)'],\n  'description': 'Compute the sum of all values.',\n  'examples': ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],\n  'seealso': ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'var']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'var',\n  'category': 'Statistics',\n  'syntax': ['var(a, b, c, ...)', 'var(A)', 'var(A, normalization)'],\n  'description': 'Compute the variance of all values. Optional parameter normalization can be \"unbiased\" (default), \"uncorrected\", or \"biased\".',\n  'examples': ['var(2, 4, 6)', 'var([2, 4, 6, 8])', 'var([2, 4, 6, 8], \"uncorrected\")', 'var([2, 4, 6, 8], \"biased\")', 'var([1, 2, 3; 4, 5, 6])'],\n  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'acos',\n  'category': 'Trigonometry',\n  'syntax': ['acos(x)'],\n  'description': 'Compute the inverse cosine of a value in radians.',\n  'examples': ['acos(0.5)', 'acos(cos(2.3))'],\n  'seealso': ['cos', 'atan', 'asin']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'acosh',\n  'category': 'Trigonometry',\n  'syntax': ['acosh(x)'],\n  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',\n  'examples': ['acosh(1.5)'],\n  'seealso': ['cosh', 'asinh', 'atanh']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'acot',\n  'category': 'Trigonometry',\n  'syntax': ['acot(x)'],\n  'description': 'Calculate the inverse cotangent of a value.',\n  'examples': ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],\n  'seealso': ['cot', 'atan']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'acoth',\n  'category': 'Trigonometry',\n  'syntax': ['acoth(x)'],\n  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',\n  'examples': ['acoth(2)', 'acoth(0.5)'],\n  'seealso': ['acsch', 'asech']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'acsc',\n  'category': 'Trigonometry',\n  'syntax': ['acsc(x)'],\n  'description': 'Calculate the inverse cotangent of a value.',\n  'examples': ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],\n  'seealso': ['csc', 'asin', 'asec']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'acsch',\n  'category': 'Trigonometry',\n  'syntax': ['acsch(x)'],\n  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',\n  'examples': ['acsch(0.5)'],\n  'seealso': ['asech', 'acoth']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'asec',\n  'category': 'Trigonometry',\n  'syntax': ['asec(x)'],\n  'description': 'Calculate the inverse secant of a value.',\n  'examples': ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],\n  'seealso': ['acos', 'acot', 'acsc']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'asech',\n  'category': 'Trigonometry',\n  'syntax': ['asech(x)'],\n  'description': 'Calculate the inverse secant of a value.',\n  'examples': ['asech(0.5)'],\n  'seealso': ['acsch', 'acoth']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'asin',\n  'category': 'Trigonometry',\n  'syntax': ['asin(x)'],\n  'description': 'Compute the inverse sine of a value in radians.',\n  'examples': ['asin(0.5)', 'asin(sin(0.5))'],\n  'seealso': ['sin', 'acos', 'atan']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'asinh',\n  'category': 'Trigonometry',\n  'syntax': ['asinh(x)'],\n  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',\n  'examples': ['asinh(0.5)'],\n  'seealso': ['acosh', 'atanh']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'atan',\n  'category': 'Trigonometry',\n  'syntax': ['atan(x)'],\n  'description': 'Compute the inverse tangent of a value in radians.',\n  'examples': ['atan(0.5)', 'atan(tan(0.5))'],\n  'seealso': ['tan', 'acos', 'asin']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'atanh',\n  'category': 'Trigonometry',\n  'syntax': ['atanh(x)'],\n  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',\n  'examples': ['atanh(0.5)'],\n  'seealso': ['acosh', 'asinh']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'atan2',\n  'category': 'Trigonometry',\n  'syntax': ['atan2(y, x)'],\n  'description': 'Computes the principal value of the arc tangent of y/x in radians.',\n  'examples': ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],\n  'seealso': ['sin', 'cos', 'tan']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'cos',\n  'category': 'Trigonometry',\n  'syntax': ['cos(x)'],\n  'description': 'Compute the cosine of x in radians.',\n  'examples': ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],\n  'seealso': ['acos', 'sin', 'tan']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'cosh',\n  'category': 'Trigonometry',\n  'syntax': ['cosh(x)'],\n  'description': 'Compute the hyperbolic cosine of x in radians.',\n  'examples': ['cosh(0.5)'],\n  'seealso': ['sinh', 'tanh', 'coth']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'cot',\n  'category': 'Trigonometry',\n  'syntax': ['cot(x)'],\n  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',\n  'examples': ['cot(2)', '1 / tan(2)'],\n  'seealso': ['sec', 'csc', 'tan']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'coth',\n  'category': 'Trigonometry',\n  'syntax': ['coth(x)'],\n  'description': 'Compute the hyperbolic cotangent of x in radians.',\n  'examples': ['coth(2)', '1 / tanh(2)'],\n  'seealso': ['sech', 'csch', 'tanh']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'csc',\n  'category': 'Trigonometry',\n  'syntax': ['csc(x)'],\n  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',\n  'examples': ['csc(2)', '1 / sin(2)'],\n  'seealso': ['sec', 'cot', 'sin']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'csch',\n  'category': 'Trigonometry',\n  'syntax': ['csch(x)'],\n  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',\n  'examples': ['csch(2)', '1 / sinh(2)'],\n  'seealso': ['sech', 'coth', 'sinh']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'sec',\n  'category': 'Trigonometry',\n  'syntax': ['sec(x)'],\n  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',\n  'examples': ['sec(2)', '1 / cos(2)'],\n  'seealso': ['cot', 'csc', 'cos']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'sech',\n  'category': 'Trigonometry',\n  'syntax': ['sech(x)'],\n  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',\n  'examples': ['sech(2)', '1 / cosh(2)'],\n  'seealso': ['coth', 'csch', 'cosh']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'sin',\n  'category': 'Trigonometry',\n  'syntax': ['sin(x)'],\n  'description': 'Compute the sine of x in radians.',\n  'examples': ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],\n  'seealso': ['asin', 'cos', 'tan']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'sinh',\n  'category': 'Trigonometry',\n  'syntax': ['sinh(x)'],\n  'description': 'Compute the hyperbolic sine of x in radians.',\n  'examples': ['sinh(0.5)'],\n  'seealso': ['cosh', 'tanh']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'tan',\n  'category': 'Trigonometry',\n  'syntax': ['tan(x)'],\n  'description': 'Compute the tangent of x in radians.',\n  'examples': ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],\n  'seealso': ['atan', 'sin', 'cos']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'tanh',\n  'category': 'Trigonometry',\n  'syntax': ['tanh(x)'],\n  'description': 'Compute the hyperbolic tangent of x in radians.',\n  'examples': ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],\n  'seealso': ['sinh', 'cosh']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'to',\n  'category': 'Units',\n  'syntax': ['x to unit', 'to(x, unit)'],\n  'description': 'Change the unit of a value.',\n  'examples': ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],\n  'seealso': []\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'clone',\n  'category': 'Utils',\n  'syntax': ['clone(x)'],\n  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',\n  'examples': ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone(\"hello world\")'],\n  'seealso': []\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'format',\n  'category': 'Utils',\n  'syntax': ['format(value)', 'format(value, precision)'],\n  'description': 'Format a value of any type as string.',\n  'examples': ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],\n  'seealso': ['print']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'isNaN',\n  'category': 'Utils',\n  'syntax': ['isNaN(x)'],\n  'description': 'Test whether a value is NaN (not a number)',\n  'examples': ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],\n  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'isInteger',\n  'category': 'Utils',\n  'syntax': ['isInteger(x)'],\n  'description': 'Test whether a value is an integer number.',\n  'examples': ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],\n  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'isNegative',\n  'category': 'Utils',\n  'syntax': ['isNegative(x)'],\n  'description': 'Test whether a value is negative: smaller than zero.',\n  'examples': ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],\n  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'isNumeric',\n  'category': 'Utils',\n  'syntax': ['isNumeric(x)'],\n  'description': 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',\n  'examples': ['isNumeric(2)', 'isNumeric(\"2\")', 'hasNumericValue(\"2\")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, \"foo\", false])'],\n  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'hasNumericValue',\n  'category': 'Utils',\n  'syntax': ['hasNumericValue(x)'],\n  'description': 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',\n  'examples': ['hasNumericValue(2)', 'hasNumericValue(\"2\")', 'isNumeric(\"2\")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, \"foo\", false])'],\n  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'isPositive',\n  'category': 'Utils',\n  'syntax': ['isPositive(x)'],\n  'description': 'Test whether a value is positive: larger than zero.',\n  'examples': ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'isPrime',\n  'category': 'Utils',\n  'syntax': ['isPrime(x)'],\n  'description': 'Test whether a value is prime: has no divisors other than itself and one.',\n  'examples': ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'isZero',\n  'category': 'Utils',\n  'syntax': ['isZero(x)'],\n  'description': 'Test whether a value is zero.',\n  'examples': ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],\n  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']\n};","\"use strict\";\n\nmodule.exports = {\n  'name': 'typeof',\n  'category': 'Utils',\n  'syntax': ['typeof(x)'],\n  'description': 'Get the type of a variable.',\n  'examples': ['typeof(3.5)', 'typeof(2 - 4i)', 'typeof(45 deg)', 'typeof(\"hello world\")'],\n  'seealso': ['getMatrixDataType']\n};"],"sourceRoot":""}