{"version":3,"sources":["webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/logical/not.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/index.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/logical/index.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/logical/and.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/logical/or.js","webpack:////home/badou/trouvkach/node_modules/mathjs/lib/function/logical/xor.js"],"names":["deepMap","__webpack_require__","exports","name","factory","type","config","load","typed","latex","not","number","x","Complex","re","im","BigNumber","isZero","isNaN","Unit","value","Array | Matrix","toTex","1","operators","module","matrix","zeros","algorithm02","algorithm06","algorithm11","algorithm13","algorithm14","and","number, number","y","Complex, Complex","BigNumber, BigNumber","Unit, Unit","SparseMatrix, SparseMatrix","SparseMatrix, DenseMatrix","DenseMatrix, SparseMatrix","DenseMatrix, DenseMatrix","Array, Array","valueOf","Array, Matrix","Matrix, Array","SparseMatrix, any","size","storage","DenseMatrix, any","any, SparseMatrix","any, DenseMatrix","Array, any","any, Array","2","concat","algorithm03","algorithm05","algorithm12","or","algorithm07","xor"],"mappings":"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","file":"js/d405a0d2b8aabdd414c9.js","sourcesContent":["'use strict';\n\nvar deepMap = require('../../utils/collection/deepMap');\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n\n\n  var not = typed('not', {\n    'number': function number(x) {\n      return !x;\n    },\n    'Complex': function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    'BigNumber': function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    'Unit': function Unit(x) {\n      return x.value !== null ? not(x.value) : true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, not);\n    }\n  });\n  not.toTex = {\n    1: latex.operators['not'] + \"\\\\left(${args[0]}\\\\right)\"\n  };\n  return not;\n}\n\nexports.name = 'not';\nexports.factory = factory;","'use strict';\n\nmodule.exports = [require('./algebra'), require('./arithmetic'), require('./bitwise'), require('./combinatorics'), require('./complex'), require('./geometry'), require('./logical'), require('./matrix'), require('./probability'), require('./relational'), require('./set'), require('./special'), require('./statistics'), require('./string'), require('./trigonometry'), require('./unit'), require('./utils')];","'use strict';\n\nmodule.exports = [require('./and'), require('./not'), require('./or'), require('./xor')];","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var zeros = load(require('../matrix/zeros'));\n  var not = load(require('./not'));\n  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));\n  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));\n  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n\n  var and = typed('and', {\n    'number, number': function numberNumber(x, y) {\n      return !!(x && y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return and(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, and, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, and, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, and, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, and);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return and(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return and(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return and(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(x, y, and, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(x, y, and, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(y, x, and, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(y, x, and, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return and(matrix(x), y).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return and(x, matrix(y)).valueOf();\n    }\n  });\n  and.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['and'], \"${args[1]}\\\\right)\")\n  };\n  return and;\n}\n\nexports.name = 'and';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n\n  var or = typed('or', {\n    'number, number': function numberNumber(x, y) {\n      return !!(x || y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return or(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, or);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, or, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, or, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, or);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return or(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return or(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return or(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, or, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, or, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, or, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, or, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, or, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, or, true).valueOf();\n    }\n  });\n  or.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['or'], \"${args[1]}\\\\right)\")\n  };\n  return or;\n}\n\nexports.name = 'or';\nexports.factory = factory;","'use strict';\n\nfunction factory(type, config, load, typed) {\n  var latex = require('../../utils/latex');\n\n  var matrix = load(require('../../type/matrix/function/matrix'));\n  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));\n  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));\n  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));\n  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));\n  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n\n  var xor = typed('xor', {\n    'number, number': function numberNumber(x, y) {\n      return !!x !== !!y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return xor(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, xor);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, xor, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, xor, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, xor);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, xor, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, xor, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, xor, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, xor, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n  xor.toTex = {\n    2: \"\\\\left(${args[0]}\".concat(latex.operators['xor'], \"${args[1]}\\\\right)\")\n  };\n  return xor;\n}\n\nexports.name = 'xor';\nexports.factory = factory;"],"sourceRoot":""}